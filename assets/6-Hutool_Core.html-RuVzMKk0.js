import{_ as l,c,b as t,a as n,d as a,e,r as o,o as i}from"./app-DJjQCWUF.js";const u={},r={href:"http://commons.apache.org/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.python.org/",target:"_blank",rel:"noopener noreferrer"},d={href:"http://www.aaa.bbb/search?scope=ccc&q=ddd",target:"_blank",rel:"noopener noreferrer"};function m(v,s){const p=o("ExternalLinkIcon");return i(),c("div",null,[s[18]||(s[18]=t('<p><img src="https://bizhi1.com/wp-content/uploads/2024/10/boat-and-duck-in-the-calm-of-dawn-us-3840x2160-1.jpg" alt="黎明静谧中的船和鸭子"></p><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 概述</p><p>② 字符串工具-StrUtil</p><p>③ 16进制工具-HexUtil</p><p>④ Escape工具-EscapeUtil</p><p>⑤ Hash算法-HashUtil</p><p>⑥ URL工具-URLUtil</p><p>⑦ XML工具-XmlUtil</p><p>⑧ 对象工具-ObjectUtil</p><p>⑨ 反射工具-ReflectUtil</p><p>⑩ 泛型类型工具-TypeUtil</p><p>⑪ 分页工具-PageUtil</p><p>⑫ 剪贴板工具-ClipboardUtil</p><p>⑬ 类工具-ClassUtil</p><p>⑭ 枚举工具-EnumUtil</p><p>⑮ 命令行工具-RuntimeUtil</p><p>⑯ 数字工具-NumberUtil</p><p>⑰ 数组工具-ArrayUtil</p><p>⑱ 随机工具-RandomUtil</p><p>⑲ 唯一ID工具-IdUtil</p><p>⑳ 压缩工具-ZipUtil</p><p>㉑ 引用工具-ReferenceUtil</p><p>㉒ 正则工具-ReUtil</p><p>㉓ 身份证工具-IdcardUtil</p><p>㉔ 信息脱敏工具-DesensitizedUtil</p><p>㉕ 社会信用代码工具-CreditCodeUtil</p><p>㉖ SPI加载工具-ServiceLoaderUtil</p><p>㉗ 字符编码工具-CharseUtil</p><p>㉘ 类加载工具-ClassLoaderUtil</p></div><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>① 概述</span></a></h2><h3 id="_1-包含内容" tabindex="-1"><a class="header-anchor" href="#_1-包含内容"><span>1 包含内容</span></a></h3><p>此内容的工具类为未经过分类的一些工具类，提供一些常用的工具方法。</p><p>此包中根据用途归类为 XXXUtil，提供大量的工具方法。在工具类中，主要以类方法（static方法为主），且各个类无法实例化为对象，一个方法是一个独立功能，无相互影响。</p><h2 id="_2-字符串工具-strutil" tabindex="-1"><a class="header-anchor" href="#_2-字符串工具-strutil"><span>② 字符串工具-StrUtil</span></a></h2><h3 id="_1-由来" tabindex="-1"><a class="header-anchor" href="#_1-由来"><span>1 由来</span></a></h3>',9)),n("p",null,[s[1]||(s[1]=a("这个工具的用处类似于 ")),n("a",r,[s[0]||(s[0]=a("Apache Commons Lang")),e(p)]),s[2]||(s[2]=a(" 中的 ")),s[3]||(s[3]=n("code",null,"StringUtil",-1)),s[4]||(s[4]=a(" 是因为前者更短，而且 ")),s[5]||(s[5]=n("code",null,"Str",-1)),s[6]||(s[6]=a(" 这个简写已经深入人心了，大家都知道是字符串的意思。常用的方法例如 ")),s[7]||(s[7]=n("code",null,"isBlank、isNotBlank、isEmpty、isNotEmpty",-1)),s[8]||(s[8]=a(" 这些就不做介绍了，判断字符串是否为空，下面介绍几个比较好用的功能。"))]),s[19]||(s[19]=t(`<h3 id="_2-方法" tabindex="-1"><a class="header-anchor" href="#_2-方法"><span>2 方法</span></a></h3><p><strong>① hasBlank、hasEmpty 方法</strong></p><p>就是给定一些字符串，如果一旦有空就返回 true，常用于判断好多字段是否有空的，（例如 web 表单数据）。</p><p>这两个方法的区别是 hasEmpty 只判断是否为 null 或者空字符串（&quot;&quot;），hasBlank 则会把不可见字符也算作空。isEmpty 和 isBlank 同理。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 hasBlank、hasEmpty方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//这两个方法的区别是hasEmpty只判断是否为null或者空字符串（&quot;&quot;），hasBlank则会把不可见字符也算做空，isEmpty和isBlank同理。</span></span>
<span class="line">        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;  &quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;  &quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">boolean</span> hasBlank <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">hasBlank</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">boolean</span> hasEmpty <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">hasEmpty</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--hasBlank==&gt;&quot;</span><span class="token operator">+</span>hasBlank<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--hasEmpty==&gt;&quot;</span><span class="token operator">+</span>hasEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--hasBlank==&gt;true</span></span>
<span class="line">        <span class="token comment">//test1--hasEmpty==&gt;false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② removePrefix、removeSuffix 方法</strong></p><p>这两个是去掉字符串的前缀后缀的，例如娶个文件名的扩展名。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">removeSuffix</span><span class="token punctuation">(</span><span class="token string">&quot;pretty_girl.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//fileName -&gt; pretty_girl</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>还有忽略大小写的 <code>removePreffixIgnoreCase</code> 和 <code>removeSuffixIgnoreCase</code> 都比较实用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 removePrefix、removeSuffix 方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//fileName -&gt; pretty_girl</span></span>
<span class="line">        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">removeSuffix</span><span class="token punctuation">(</span><span class="token string">&quot;pretty_girl.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--fileName==&gt;&quot;</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//pretty_girl -&gt; pretty_girl</span></span>
<span class="line">        <span class="token class-name">String</span> fileName2 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">removePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;pretty_girl.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;pretty_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--fileName2==&gt;&quot;</span><span class="token operator">+</span>fileName2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 忽略大小写</span></span>
<span class="line">        <span class="token comment">// pretty_girl -&gt; pretty_girl</span></span>
<span class="line">        <span class="token class-name">String</span> fileName3 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">removePrefixIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;Pretty_girl.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;PrETTY_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--fileName3==&gt;&quot;</span><span class="token operator">+</span>fileName3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// pretty_girl -&gt; pretty_girl</span></span>
<span class="line">        <span class="token class-name">String</span> fileName4 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">removeSuffixIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;pretty_girl.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;.JPG&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--fileName4==&gt;&quot;</span><span class="token operator">+</span>fileName4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--fileName==&gt;pretty_girl</span></span>
<span class="line">        <span class="token comment">//test2--fileName2==&gt;girl.jpg</span></span>
<span class="line">        <span class="token comment">//test2--fileName3==&gt;girl.jpg</span></span>
<span class="line">        <span class="token comment">//test2--fileName4==&gt;pretty_girl</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ sub 方法</strong></p>`,11)),n("p",null,[s[10]||(s[10]=a("不得不提一下这个方法，有人说 String 有了 subString 你还写它干啥，我想说 subString 方法越界啥的都会报异常，你还得自己判断，难受死了，Hutool 把各种情况判断都加进来了，而且 index 的位置还支持负数，-1 表示最后一个字符前（这个思想来自 ")),n("a",k,[s[9]||(s[9]=a("Python")),e(p)]),s[11]||(s[11]=a("），还有就是如果不小心把第一个位置和第二个位置搞反了，也会自动修正（例如想截取第4个和第2个字符之间的部分也是可以的），举个例子："))]),s[20]||(s[20]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abcdefgh&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> strSub1 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//strSub1 -&gt; c</span></span>
<span class="line"><span class="token class-name">String</span> strSub2 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//strSub2 -&gt; cde</span></span>
<span class="line"><span class="token class-name">String</span> strSub3 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//strSub2 -&gt; c</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，-1 表示最后一个字符，但是因为 sub 方法的结束 index 是不包含的，因此传 -1 最后一个字符是取不到的</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abcdefgh&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> strSub1 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cdefg</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想截取后半段，可以使用 <code>StrUtil.subSuf</code> 方法。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3 sub方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abcdefgh&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//strSub1 -&gt; c</span></span>
<span class="line">        <span class="token class-name">String</span> strSub1 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--strSub1==&gt;&quot;</span><span class="token operator">+</span>strSub1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//strSub2 -&gt; cde</span></span>
<span class="line">        <span class="token class-name">String</span> strSub2 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--strSub2==&gt;&quot;</span><span class="token operator">+</span>strSub2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//strSub2 -&gt; c</span></span>
<span class="line">        <span class="token class-name">String</span> strSub3 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--strSub3==&gt;&quot;</span><span class="token operator">+</span>strSub3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//需要注意的是，-1表示最后一个字符，但是因为sub方法的结束index是不包含的，因此传-1最后一个字符是取不到的：</span></span>
<span class="line">        <span class="token class-name">String</span> strSub4 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--strSub4==&gt;&quot;</span><span class="token operator">+</span>strSub4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//如果想截取后半段，可以使用StrUtil.subSuf方法。</span></span>
<span class="line">        <span class="token comment">// StrUtil.subSuf</span></span>
<span class="line">        <span class="token class-name">String</span> strSub5 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">subSuf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--strSub5==&gt;&quot;</span><span class="token operator">+</span>strSub5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 截取某字符之后的字符串</span></span>
<span class="line">        <span class="token class-name">String</span> subAfter <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">subAfter</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--subAfter==&gt;&quot;</span><span class="token operator">+</span>subAfter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 截取某字符之前的字符串</span></span>
<span class="line">        <span class="token class-name">String</span> subBefore <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">subBefore</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--subBefore==&gt;&quot;</span><span class="token operator">+</span>subBefore<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//如果设置为 true，表示将从 第一个匹配到的字符 之后开始截取子字符串，并且不包括匹配的字符本身。</span></span>
<span class="line">        <span class="token comment">//如果设置为 false，表示将从 最后一个匹配到的字符 之后开始截取子字符串，并且不包括匹配的字符本身。</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--strSub1==&gt;c</span></span>
<span class="line">        <span class="token comment">//test3--strSub2==&gt;cde</span></span>
<span class="line">        <span class="token comment">//test3--strSub3==&gt;c</span></span>
<span class="line">        <span class="token comment">//test3--strSub4==&gt;cdefg</span></span>
<span class="line">        <span class="token comment">//test3--strSub5==&gt;cdefgh</span></span>
<span class="line">        <span class="token comment">//test3--subAfter==&gt;cdefgh</span></span>
<span class="line">        <span class="token comment">//test3--subBefore==&gt;a</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ str、bytes 方法</strong></p><p>Hutool 把 <code>String.getByte(String charsetName)</code> 方法封装在这里了，原生的 <code>String.getByte()</code> 这个方法太坑了，使用系统编码，经常会有人跳进来导致乱码问题，所以 Hutool 就加了这两个方法强制指定字符集了，包了个 try 抛出一个运行时异常，省的在业务代码里处理那个恶心的 <code>UnsupportedEncodingException</code> 。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 4 str、bytes 方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abcdefgh张三&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--str1==&gt;&quot;</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--str2==&gt;&quot;</span><span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--bytes==&gt;&quot;</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--str3==&gt;&quot;</span><span class="token operator">+</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test4--str1==&gt;abcdefgh寮犱笁</span></span>
<span class="line">        <span class="token comment">//test4--str2==&gt;abcdefgh张三</span></span>
<span class="line">        <span class="token comment">//test4--bytes==&gt;[97, 98, 99, 100, 101, 102, 103, 104, -27, -68, -96, -28, -72, -119]</span></span>
<span class="line">        <span class="token comment">//test4--str3==&gt;abcdefgh张三</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑤ format 方法</strong></p><p>灵感来自 <code>sl4j</code>，可以使用字符串模板代替字符串的拼接，Hutool 也实现了一个，而且变量的标识符都一样，无瑕兼容，上例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">&quot;{}爱{}，就像老鼠爱大米&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token string">&quot;我&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;你&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//str -&gt; 我爱你，就像老鼠爱大米</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 Hutool 定义成了 Object 类型，如果传的别的类型也可以，会自动调用 toString() 方法的。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 5 format 方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">&quot;{}爱{}，就像老鼠爱大米&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//str -&gt; 我爱你，就像老鼠爱大米</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token string">&quot;我&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;你&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--str==&gt;&quot;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test5--str==&gt;我爱你，就像老鼠爱大米</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑥ 定义的一些常量</strong></p><p>为了方便，Hutool 定义了一些比较常见的字符串常量在里面，像点、空串、换行符等等，还有 HTML 中的一些转义字符。</p><p>更多方法请参阅 API 文档。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StrPool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_SPACE</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_TAB</span> <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_DOT</span> <span class="token operator">=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_SLASH</span> <span class="token operator">=</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_BACKSLASH</span> <span class="token operator">=</span> <span class="token char">&#39;\\\\&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_CR</span> <span class="token operator">=</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_LF</span> <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_UNDERLINE</span> <span class="token operator">=</span> <span class="token char">&#39;_&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_COMMA</span> <span class="token operator">=</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_DELIM_START</span> <span class="token operator">=</span> <span class="token char">&#39;{&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_DELIM_END</span> <span class="token operator">=</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_BRACKET_START</span> <span class="token operator">=</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_BRACKET_END</span> <span class="token operator">=</span> <span class="token char">&#39;]&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_COLON</span> <span class="token operator">=</span> <span class="token char">&#39;:&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token constant">C_AT</span> <span class="token operator">=</span> <span class="token char">&#39;@&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">TAB</span> <span class="token operator">=</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">DOT</span> <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">DOUBLE_DOT</span> <span class="token operator">=</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">SLASH</span> <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">BACKSLASH</span> <span class="token operator">=</span> <span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">CR</span> <span class="token operator">=</span> <span class="token string">&quot;\\r&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">LF</span> <span class="token operator">=</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">CRLF</span> <span class="token operator">=</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">UNDERLINE</span> <span class="token operator">=</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">DASHED</span> <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">COMMA</span> <span class="token operator">=</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">DELIM_START</span> <span class="token operator">=</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">DELIM_END</span> <span class="token operator">=</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">BRACKET_START</span> <span class="token operator">=</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">BRACKET_END</span> <span class="token operator">=</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">COLON</span> <span class="token operator">=</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">AT</span> <span class="token operator">=</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">HTML_NBSP</span> <span class="token operator">=</span> <span class="token string">&quot;&amp;nbsp;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">HTML_AMP</span> <span class="token operator">=</span> <span class="token string">&quot;&amp;amp;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">HTML_QUOTE</span> <span class="token operator">=</span> <span class="token string">&quot;&amp;quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">HTML_APOS</span> <span class="token operator">=</span> <span class="token string">&quot;&amp;apos;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">HTML_LT</span> <span class="token operator">=</span> <span class="token string">&quot;&amp;lt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">HTML_GT</span> <span class="token operator">=</span> <span class="token string">&quot;&amp;gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">EMPTY_JSON</span> <span class="token operator">=</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-16进制工具-hexutil" tabindex="-1"><a class="header-anchor" href="#_3-16进制工具-hexutil"><span>③ 16进制工具-HexUtil</span></a></h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1 介绍</span></a></h3><p>十六进制（简写为 hex 或 下标 16）在数学中是一种逢 16 进 1 的进制位，一般用数字 0 到 9 和字母 A 到 F 表示（其中：A~F 即 10~15）。例如十进制 57 ，在二进制写作 111001 ，在 16 进制写作 39。</p><p>像 java ，c 这样的语言为了区分十六进制和十进制数值，会在十六进制数的前面加上 0x，比如 0x20 是十进制的32，而不是十进制的 20 。<code>HexUtil</code> 就是字符串或 byte 数组与 16 进制表示转换的工具类。</p><h3 id="_2-用于" tabindex="-1"><a class="header-anchor" href="#_2-用于"><span>2 用于</span></a></h3><p>16 进制一般针对无法显示的一些二进制显示，常用于：</p><ol><li>图片的字符串表现形式</li><li>加密解密</li><li>编码转换</li></ol><h3 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用"><span>3 使用</span></a></h3><p>HexUtil 主要以 <code>encodeHex</code> 和 <code>decodeHex</code> 两个方法位核心，提供一些针对字符串的重载方法。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;我是一个字符串&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token class-name">HexUtil</span><span class="token punctuation">.</span><span class="token function">encodeHexStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">CHARSET_UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//hex是：</span></span>
<span class="line"><span class="token comment">//e68891e698afe4b880e4b8aae5ad97e7aca6e4b8b2</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> decodedStr <span class="token operator">=</span> <span class="token class-name">HexUtil</span><span class="token punctuation">.</span><span class="token function">decodeHexStr</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//解码后与str相同</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 16进制工具-HexUti</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;我是一个字符串&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token class-name">HexUtil</span><span class="token punctuation">.</span><span class="token function">encodeHexStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">CHARSET_UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--hex==&gt;&quot;</span><span class="token operator">+</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//hex是：</span></span>
<span class="line">        <span class="token comment">//e68891e698afe4b880e4b8aae5ad97e7aca6e4b8b2</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> decodedStr <span class="token operator">=</span> <span class="token class-name">HexUtil</span><span class="token punctuation">.</span><span class="token function">decodeHexStr</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--decodedStr==&gt;&quot;</span><span class="token operator">+</span>decodedStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//解码后与str相同</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--hex==&gt;e68891e698afe4b880e4b8aae5ad97e7aca6e4b8b2</span></span>
<span class="line">        <span class="token comment">//test1--decodedStr==&gt;我是一个字符串</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-escape工具-escapeutil" tabindex="-1"><a class="header-anchor" href="#_4-escape工具-escapeutil"><span>④ Escape工具-EscapeUtil</span></a></h2><h3 id="_1-介绍-1" tabindex="-1"><a class="header-anchor" href="#_1-介绍-1"><span>1 介绍</span></a></h3><p>转义和反转义工具类 Escape / Unescape 。escape 采用 ISO Latin 字符集对指定的字符串进行编码。所有的空格符、标点符号、特殊字符以及其他非 ASCII 字符都将被转化成 %xx 格式的字符编码（xx等于该字符在字符集里面的编码的 16 进制数字）。</p><p>此类中的方法对应 JavaScript 中的 <code>escape()</code> 函数和 <code>unescape()</code> 函数。</p><h3 id="_2-方法-1" tabindex="-1"><a class="header-anchor" href="#_2-方法-1"><span>2 方法</span></a></h3><ul><li><code>EscapeUtil.escape</code> Escape 编码（Unicode），该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码：<code>*@-_+./</code> 。其他所有的字符都会被转义序列替换。</li><li><code>EscapeUtil.unescape</code> Escape 解码</li><li><code>EscapeUtil.safeUnescape</code> 安全的 unescape 文本，当文本不是被 esacpe 的时候，返回原文。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Escape工具-EscapeUtil</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;我是一个字符串 * @ - _ + . /&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> escape <span class="token operator">=</span> <span class="token class-name">EscapeUtil</span><span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--escape==&gt;&quot;</span><span class="token operator">+</span>escape<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//escape是：</span></span>
<span class="line">        <span class="token comment">//%u6211%u662f%u4e00%u4e2a%u5b57%u7b26%u4e32%20*%20@%20-%20_%20+%20.%20/</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> unescape <span class="token operator">=</span> <span class="token class-name">EscapeUtil</span><span class="token punctuation">.</span><span class="token function">unescape</span><span class="token punctuation">(</span>escape<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--unescape==&gt;&quot;</span><span class="token operator">+</span>unescape<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> safeUnescape <span class="token operator">=</span> <span class="token class-name">EscapeUtil</span><span class="token punctuation">.</span><span class="token function">safeUnescape</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--safeUnescape==&gt;&quot;</span><span class="token operator">+</span>safeUnescape<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--escape==&gt;%u6211%u662f%u4e00%u4e2a%u5b57%u7b26%u4e32%20*%20@%20-%20_%20+%20.%20/</span></span>
<span class="line">        <span class="token comment">//test1--unescape==&gt;我是一个字符串 * @ - _ + . /</span></span>
<span class="line">        <span class="token comment">//test1--safeUnescape==&gt;我是一个字符串 * @ - _ + . /</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-hash算法-hashutil" tabindex="-1"><a class="header-anchor" href="#_5-hash算法-hashutil"><span>⑤ Hash算法-HashUtil</span></a></h2><h3 id="_1-介绍-2" tabindex="-1"><a class="header-anchor" href="#_1-介绍-2"><span>1 介绍</span></a></h3><p><code>HashUtil</code> 其实是一个 hash 算法的集合，此工具类中融合了各种 hash 算法。</p><h3 id="_2-方法-2" tabindex="-1"><a class="header-anchor" href="#_2-方法-2"><span>2 方法</span></a></h3><ol><li><code>additiveHash</code> 加法 hash</li><li><code>rotatingHash</code> 旋转 hash</li><li><code>oneByOneHash</code> 一次一个 hash</li><li><code>bernstein</code> Bernstein&#39;s hash</li><li><code>universal</code> Universal Hashing</li><li><code>zobrist</code> Zobrist Hashing</li><li><code>fnvHash</code> 改进的 32 位 FNV 算法</li><li><code>intHash</code> Thomas Wang 的算法，整数 hash</li><li><code>rsHash</code> RS 算法 hash</li><li><code>jsHash</code> JS 算法 hash</li><li><code>pjwHash</code> PJW 算法</li><li><code>elfHash</code> ELF 算法</li><li><code>bkdrHash</code> BKDR 算法</li><li><code>sdbmHash</code> SDBM 算法</li><li><code>djbHash</code> DJB 算法</li><li><code>dekHash</code> DEK 算法</li><li><code>apHash</code> AP 算法</li><li><code>tianlHash</code> TianL Hash 算法</li><li><code>javaDefaultHash</code> JAVA 自带的算法</li><li><code>mixHash</code> 混合 hash 算法，输出 64 位的值</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// a 97 b 98 c 99</span></span>
<span class="line">        <span class="token comment">// additiveHash 加法 hash</span></span>
<span class="line">        <span class="token keyword">int</span> additiveHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">additiveHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--additiveHash==&gt;&quot;</span><span class="token operator">+</span>additiveHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// rotatingHash 旋转 hash</span></span>
<span class="line">        <span class="token keyword">int</span> rotatingHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">rotatingHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--rotatingHash==&gt;&quot;</span><span class="token operator">+</span>rotatingHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// oneByOneHash 一次一个 hash</span></span>
<span class="line">        <span class="token keyword">int</span> oneByOneHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">oneByOneHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--oneByOneHash==&gt;&quot;</span><span class="token operator">+</span>oneByOneHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// bernstein Bernstein&#39;s hash</span></span>
<span class="line">        <span class="token keyword">int</span> bernstein <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">bernstein</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--bernstein==&gt;&quot;</span><span class="token operator">+</span>bernstein<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// fnvHash 改进的 32 位 FNV 算法</span></span>
<span class="line">        <span class="token keyword">int</span> fnvHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">fnvHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--fnvHash==&gt;&quot;</span><span class="token operator">+</span>fnvHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// intHash Thomas Wang 的算法，整数 hash</span></span>
<span class="line">        <span class="token keyword">int</span> intHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">intHash</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--intHash==&gt;&quot;</span><span class="token operator">+</span>intHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// rsHash RS 算法 hash</span></span>
<span class="line">        <span class="token keyword">int</span> rsHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">rsHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--rsHash==&gt;&quot;</span><span class="token operator">+</span>rsHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// jsHash JS 算法 hash</span></span>
<span class="line">        <span class="token keyword">int</span> jsHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">jsHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--jsHash==&gt;&quot;</span><span class="token operator">+</span>jsHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// pjwHash PJW 算法</span></span>
<span class="line">        <span class="token keyword">int</span> pjwHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">pjwHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--pjwHash==&gt;&quot;</span><span class="token operator">+</span>pjwHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// elfHash ELF 算法</span></span>
<span class="line">        <span class="token keyword">int</span> elfHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">elfHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--elfHash==&gt;&quot;</span><span class="token operator">+</span>elfHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// bkdrHash BKDR 算法</span></span>
<span class="line">        <span class="token keyword">int</span> bkdrHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">bkdrHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--bkdrHash==&gt;&quot;</span><span class="token operator">+</span>bkdrHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// sdbmHash SDBM 算法</span></span>
<span class="line">        <span class="token keyword">int</span> sdbmHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">sdbmHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--sdbmHash==&gt;&quot;</span><span class="token operator">+</span>sdbmHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// djbHash DJB 算法</span></span>
<span class="line">        <span class="token keyword">int</span> djbHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">djbHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--djbHash==&gt;&quot;</span><span class="token operator">+</span>djbHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// dekHash DEK 算法</span></span>
<span class="line">        <span class="token keyword">int</span> dekHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">dekHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--dekHash==&gt;&quot;</span><span class="token operator">+</span>dekHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// apHash AP 算法</span></span>
<span class="line">        <span class="token keyword">int</span> apHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">apHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--apHash==&gt;&quot;</span><span class="token operator">+</span>apHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// tianlHash TianL Hash 算法</span></span>
<span class="line">        <span class="token keyword">long</span> tianlHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">tianlHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--tianlHash==&gt;&quot;</span><span class="token operator">+</span>tianlHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// javaDefaultHash JAVA 自带的算法</span></span>
<span class="line">        <span class="token keyword">int</span> javaDefaultHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">javaDefaultHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--javaDefaultHash==&gt;&quot;</span><span class="token operator">+</span>javaDefaultHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// mixHash 混合 hash 算法，输出 64 位的值</span></span>
<span class="line">        <span class="token keyword">long</span> mixHash <span class="token operator">=</span> <span class="token class-name">HashUtil</span><span class="token punctuation">.</span><span class="token function">mixHash</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--mixHash==&gt;&quot;</span><span class="token operator">+</span>mixHash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--additiveHash==&gt;97</span></span>
<span class="line">        <span class="token comment">//test1--rotatingHash==&gt;39</span></span>
<span class="line">        <span class="token comment">//test1--oneByOneHash==&gt;-317513893</span></span>
<span class="line">        <span class="token comment">//test1--bernstein==&gt;108966</span></span>
<span class="line">        <span class="token comment">//test1--fnvHash==&gt;34757373</span></span>
<span class="line">        <span class="token comment">//test1--intHash==&gt;1098118400</span></span>
<span class="line">        <span class="token comment">//test1--rsHash==&gt;822160044</span></span>
<span class="line">        <span class="token comment">//test1--jsHash==&gt;895805535</span></span>
<span class="line">        <span class="token comment">//test1--pjwHash==&gt;26499</span></span>
<span class="line">        <span class="token comment">//test1--elfHash==&gt;26499</span></span>
<span class="line">        <span class="token comment">//test1--bkdrHash==&gt;1677554</span></span>
<span class="line">        <span class="token comment">//test1--sdbmHash==&gt;807794786</span></span>
<span class="line">        <span class="token comment">//test1--djbHash==&gt;193485963</span></span>
<span class="line">        <span class="token comment">//test1--dekHash==&gt;2083</span></span>
<span class="line">        <span class="token comment">//test1--apHash==&gt;-25651485</span></span>
<span class="line">        <span class="token comment">//test1--tianlHash==&gt;33734718</span></span>
<span class="line">        <span class="token comment">//test1--javaDefaultHash==&gt;96354</span></span>
<span class="line">        <span class="token comment">//test1--mixHash==&gt;413837313596157</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-url工具-urlutil" tabindex="-1"><a class="header-anchor" href="#_6-url工具-urlutil"><span>⑥ URL工具-URLUtil</span></a></h2><h3 id="_1-介绍-3" tabindex="-1"><a class="header-anchor" href="#_1-介绍-3"><span>1 介绍</span></a></h3><p>URL（Uniform Resource Locator）中文名为统一资源定位符，有时也被俗称为网页地址。表示互联网上的资源，如网页或者 FTP 地址。在 Java 中，也可以使用 URL 表示 Classpath 中的资源 (Resource) 地址。</p><h3 id="_2-方法-3" tabindex="-1"><a class="header-anchor" href="#_2-方法-3"><span>2 方法</span></a></h3><p><strong>① 获取 URL 对象</strong></p><ul><li><code>URLUtil.url</code> 通过一个字符串形式的 URL 地址创建对象</li><li><code>URLUtil.getURL</code> 主要获得 Classpath 下资源的 URL，方便读取 Classpath 下的配制文件等信息</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 获取 URL 对象</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;https://picx.zhimg.com/v2-62a937b540a6c8156c5798805d799c4d_1440w.jpg&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--url==&gt;&quot;</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">URI</span> uri <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--uri==&gt;&quot;</span><span class="token operator">+</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">URL</span> getUrl <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\Study\\\\JavaSkill\\\\Hutool\\\\src\\\\main\\\\java\\\\com\\\\hutool\\\\core\\\\tool\\\\Main5.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--getUrl==&gt;&quot;</span><span class="token operator">+</span>getUrl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--url==&gt;https://picx.zhimg.com/v2-62a937b540a6c8156c5798805d799c4d_1440w.jpg</span></span>
<span class="line">        <span class="token comment">//test1--uri==&gt;https://picx.zhimg.com</span></span>
<span class="line">        <span class="token comment">//test1--getUrl==&gt;file:/E:/Study/JavaSkill/Hutool/src/main/java/com/hutool/core/tool/Main5.java</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② 其他</strong></p>`,49)),n("ul",null,[s[16]||(s[16]=t(`<li><p>URLUtil.normalize 标准化 URL 链接。对于不带 http:// 头的地址做简单补全。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://www.hutool.cn//aaa/bbb&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果为：http://www.hutool.cn/aaa/bbb</span></span>
<span class="line"><span class="token class-name">String</span> normalize <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&quot;http://www.hutool.cn//aaa/\\\\bbb?a=1&amp;b=2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果为：http://www.hutool.cn/aaa/bbb?a=1&amp;b=2</span></span>
<span class="line">normalize <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>URLUtil.encode 封装 URLEncoder.encode ，将需要转换的内容（ASCII 码等形式之外的内容），用十六进制表示转换出来，并在之前加上 % 开头。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">&quot;366466 - 副本.jpg&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果为：366466%20-%20%E5%89%AF%E6%9C%AC.jpg</span></span>
<span class="line"><span class="token class-name">String</span> encode <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>URLUtil.decode</code> 封装 <code>URLDecoder.decode</code> ，将 % 开头的 16 进制表示的内容解码。</p></li>`,3)),n("li",null,[n("p",null,[s[13]||(s[13]=n("code",null,"URLUtil.getPath",-1)),s[14]||(s[14]=a(" 获得 path 部分 URI - > ")),n("a",d,[s[12]||(s[12]=a("http://www.aaa.bbb/search?scope=ccc&q=ddd")),e(p)]),s[15]||(s[15]=a(" PATH -> /search"))])]),s[17]||(s[17]=n("li",null,[n("p",null,[n("code",null,"URLUtil.toURI"),a(" 转 URL 或 URL 字符串为 URI")])],-1))]),s[21]||(s[21]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 其他</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//该方法用于标准化URL链接，代码如下：</span></span>
<span class="line">        <span class="token class-name">String</span> url1 <span class="token operator">=</span> <span class="token string">&quot;https://images5.alphacoders.com\\\\854\\\\thumb-1920-854436.png&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> normalize <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--normalize==&gt;&quot;</span><span class="token operator">+</span>normalize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//该方法用于获取URL链接中的path部分字符串，比如：</span></span>
<span class="line">        <span class="token class-name">String</span> url2 <span class="token operator">=</span> <span class="token string">&quot;https://images5.alphacoders.com/854/thumb-1920-854436.png?name=violet&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> pathStr <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--pathStr==&gt;&quot;</span><span class="token operator">+</span>pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//URLUtil.encode 封装URLEncoder.encode，将需要转换的内容（ASCII码形式之外的内容）</span></span>
<span class="line">        <span class="token comment">//用十六进制表示法转换出来，并在之前加上%开头。</span></span>
<span class="line">        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">&quot;366466 - 副本.jpg&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 结果为：366466%20-%20%E5%89%AF%E6%9C%AC.jpg</span></span>
<span class="line">        <span class="token class-name">String</span> encode <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--encode==&gt;&quot;</span><span class="token operator">+</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//URLUtil.decode 封装URLDecoder.decode，将%开头的16进制表示的内容解码。</span></span>
<span class="line">        <span class="token class-name">String</span> decode <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--decode==&gt;&quot;</span><span class="token operator">+</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//转URL或URL字符串为URI。</span></span>
<span class="line">        <span class="token class-name">String</span> urlStr <span class="token operator">=</span> <span class="token string">&quot;https://images5.alphacoders.com/854/thumb-1920-854436.png&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">URI</span> toURI <span class="token operator">=</span> <span class="token class-name">URLUtil</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--toURI==&gt;&quot;</span><span class="token operator">+</span>toURI<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--normalize==&gt;https://images5.alphacoders.com/854/thumb-1920-854436.png</span></span>
<span class="line">        <span class="token comment">//test2--pathStr==&gt;/854/thumb-1920-854436.png</span></span>
<span class="line">        <span class="token comment">//test2--encode==&gt;366466%20-%20%E5%89%AF%E6%9C%AC.jpg</span></span>
<span class="line">        <span class="token comment">//test2--decode==&gt;366466 - 副本.jpg</span></span>
<span class="line">        <span class="token comment">//test2--toURI==&gt;https://images5.alphacoders.com/854/thumb-1920-854436.png</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const g=l(u,[["render",m],["__file","6-Hutool_Core.html.vue"]]),h=JSON.parse('{"path":"/docs/Java/Hutool/2_Hutool_Core/6-Hutool_Core.html","title":"Hutool-Core核心（六）","lang":"en-US","frontmatter":{"title":"Hutool-Core核心（六）","date":"2024/12/25"},"headers":[{"level":2,"title":"工具类","slug":"工具类","link":"#工具类","children":[]},{"level":2,"title":"① 概述","slug":"_1-概述","link":"#_1-概述","children":[{"level":3,"title":"1 包含内容","slug":"_1-包含内容","link":"#_1-包含内容","children":[]}]},{"level":2,"title":"② 字符串工具-StrUtil","slug":"_2-字符串工具-strutil","link":"#_2-字符串工具-strutil","children":[{"level":3,"title":"1 由来","slug":"_1-由来","link":"#_1-由来","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法","link":"#_2-方法","children":[]}]},{"level":2,"title":"③ 16进制工具-HexUtil","slug":"_3-16进制工具-hexutil","link":"#_3-16进制工具-hexutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍","link":"#_1-介绍","children":[]},{"level":3,"title":"2 用于","slug":"_2-用于","link":"#_2-用于","children":[]},{"level":3,"title":"3 使用","slug":"_3-使用","link":"#_3-使用","children":[]}]},{"level":2,"title":"④ Escape工具-EscapeUtil","slug":"_4-escape工具-escapeutil","link":"#_4-escape工具-escapeutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-1","link":"#_1-介绍-1","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法-1","link":"#_2-方法-1","children":[]}]},{"level":2,"title":"⑤ Hash算法-HashUtil","slug":"_5-hash算法-hashutil","link":"#_5-hash算法-hashutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-2","link":"#_1-介绍-2","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法-2","link":"#_2-方法-2","children":[]}]},{"level":2,"title":"⑥ URL工具-URLUtil","slug":"_6-url工具-urlutil","link":"#_6-url工具-urlutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-3","link":"#_1-介绍-3","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法-3","link":"#_2-方法-3","children":[]}]}],"filePathRelative":"docs/Java/Hutool/2_Hutool_Core/6-Hutool_Core.md","git":{"createdTime":1735284834000,"updatedTime":1735466072000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{g as comp,h as data};
