import{_ as a,c as n,b as p,o as t}from"./app-B_5tQx1u.js";const e="/assets/image-20211005153730568-BPRbZFDS.png",l="/assets/image-20211005162743679-cDctlRUf.png",i="/assets/image-20211005164219822-DfwycBXC.png",o="/assets/image-20211005164728369-BQUN-Yej.png",c="/assets/image-20211005165130449-DgSKWT1E.png",r="/assets/image-20211005165146724--OHSjv3P.png",m="/assets/image-20211005180333706-Du6PF_SK.png",u="/assets/image-20211005180356744-u3ke4DT8.png",d="/assets/image-20211005180908236-fZvfTHMf.png",k="/assets/image-20211005210514088-ZWYMgf1r.png",g={};function h(v,s){return t(),n("div",null,s[0]||(s[0]=[p(`<p><img src="https://artfiles.alphacoders.com/118/thumb-1920-118070.jpg" alt="Download Video Game Overwatch Art"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul><li>线性表定义</li><li>线性表的顺序存储结构</li><li>线性表的链式存储结构</li></ul></div><h2 id="线性表定义" tabindex="-1"><a class="header-anchor" href="#线性表定义"><span>线性表定义</span></a></h2><blockquote><p><strong>线性表(List):零个或者多个数据元素有限序列</strong></p><p><em><strong>若元素存在多个,则第一个元素无前驱,最后一个无后驱,其他元素存在唯一的前驱,和后驱</strong></em></p></blockquote><h2 id="线性表的顺序存储结构" tabindex="-1"><a class="header-anchor" href="#线性表的顺序存储结构"><span>线性表的顺序存储结构</span></a></h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">LOC(a_{i}) = LOC(a_1) +(i-1)*d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></p><blockquote><p><em><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为线性表上第i个元素, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为线性表示上第一个元素,d为每个元素所占长度</em></p></blockquote><p><strong>线性表插入操作</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">//在顺序表L中第i个位置前插入一个新元素x</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span> L<span class="token operator">-&gt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&gt;=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 从最后一个元素开始往前移动</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line">    L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x </span>
<span class="line">    L<span class="token operator">-&gt;</span>length<span class="token operator">++</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// i为插入位置下标,x插入数据,L线性表</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等概率下顺序线性表插入平均移动次数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mrow><mi>i</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><msub><mi>P</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">E_{is}(n) = \\sum_{i=1}^{n+1}P_i(n-i+1) = \\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2537em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><strong>线性表删除操作</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">x <span class="token operator">=</span> L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">,</span>j<span class="token operator">&lt;=</span>L<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">    L<span class="token operator">-&gt;</span>length<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// i 删除位置  x为删除元素 </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线性表的链式存储结构" tabindex="-1"><a class="header-anchor" href="#线性表的链式存储结构"><span>线性表的链式存储结构</span></a></h2><p><img src="`+e+`" alt="image-20211005153730568"></p><blockquote><p>单链表 head头指针(一般采用变量名字地址设定) tail尾指针指向NULL</p><p><em>头指针指向链表第一个结点指针,头指针具有标识作用,无论链表是否为空,头指针均不为空</em></p></blockquote><p><strong>单链表</strong></p><blockquote><ul><li><p>头插法</p><blockquote><p>将插入的结点放到当前表头上</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 申请新结点p</span></span>
<span class="line">p <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//将头指针指向新结点指针域</span></span>
<span class="line">p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//将p结点指针指向赋值头指针</span></span>
<span class="line">head <span class="token operator">=</span> p</span>
<span class="line"><span class="token keyword">return</span> head<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>尾插法</p><blockquote><p>输入与输出内容一致使用插尾法,将新结点插入当前链表的表尾</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">r <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line">p <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">p <span class="token operator">-&gt;</span> data <span class="token operator">=</span> ch<span class="token punctuation">;</span></span>
<span class="line">r <span class="token operator">-&gt;</span> next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// 将头结点指针域指向下一结点</span></span>
<span class="line">r <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment">//</span></span>
<span class="line">r<span class="token operator">-&gt;</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">return</span> head<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>单链表插入</p><blockquote><p><img src="`+l+`" alt="image-20211005162743679"></p><p>s-&gt;next = p -&gt; next ; p-&gt;next = s;</p><p>将p的后继结点改为s的后继结点, p的下一结点指向s</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">InsertList</span> <span class="token punctuation">(</span>LinkList head<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>DataType x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"> ListNode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span></span>
<span class="line"> p <span class="token operator">=</span> head<span class="token punctuation">;</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 寻找第i-1个结点</span></span>
<span class="line"> <span class="token punctuation">{</span></span>
<span class="line">     p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">     <span class="token operator">++</span>j<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>null<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">     s <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x <span class="token punctuation">;</span> s<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">     p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>单链表删除</p><blockquote><p><img src="`+i+'" alt="image-20211005164219822"></p><p>q=p-&gt;next; p-&gt;next=q-&gt;next;</p><p>q为删除结点,p为q前驱结点</p><p>或</p><p>p-&gt;next = p-&gt;next-&gt;next</p></blockquote></li></ul><p><img src="'+o+'" alt="image-20211005164728369"></p></blockquote><p><strong>循环链表</strong></p><blockquote><p><strong>单链表中终端结点指针指向头指针,使整个单链表成为一个环,首尾衔接的单链表为循环链表</strong></p><p><img src="'+c+'" alt="image-20211005165130449"></p><p><img src="'+r+`" alt="image-20211005165146724"></p><p><strong>对比单链表,循环链表的判断条件是时候等于头指针</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">InsertList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"> ListNode <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span></span>
<span class="line"> s<span class="token operator">=</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> s<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span> p<span class="token operator">=</span>L<span class="token punctuation">;</span></span>
<span class="line"> q<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>data<span class="token operator">&gt;</span>x <span class="token operator">&amp;&amp;</span> q<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//有序性插入</span></span>
<span class="line">     p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">     q<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span></span>
<span class="line"> s<span class="token operator">-&gt;</span>next<span class="token operator">=</span> q<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>双向链表</strong></p><ul><li>双向链表结构</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DulNode</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"> ElemType data<span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">struct</span> <span class="token class-name">DulNode</span> <span class="token operator">*</span>prior<span class="token punctuation">;</span> <span class="token comment">// 直接前驱指针</span></span>
<span class="line"> <span class="token keyword">struct</span> <span class="token class-name">DulNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment">// 直接后继指针</span></span>
<span class="line"><span class="token punctuation">}</span> DulNode<span class="token punctuation">,</span><span class="token operator">*</span>DuLinkList<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+'" alt="image-20211005180333706"></p><p><img src="'+u+'" alt="image-20211005180356744"></p><ul><li><p>双向链表插入</p><p><img src="'+d+`" alt="image-20211005180908236"></p></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">DlNode  <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>DLNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">s<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span></span>
<span class="line">s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">p<span class="token operator">-&gt;</span>next <span class="token operator">-&gt;</span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span></span>
<span class="line">p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>双向链删除</li></ul><blockquote><p><img src="`+k+'" alt="image-20211005210514088"></p><p>p-&gt;prior-&gt;next=p-&gt;next;</p><p>p-&gt;next-&gt;prior = p-&gt;prior;</p></blockquote>',28)]))}const y=a(g,[["render",h]]),x=JSON.parse('{"path":"/docs/Computer/Computer/5_Structure/4-Structure.html","title":"线性表","lang":"en-US","frontmatter":{"title":"线性表","date":"2025/07/04"},"headers":[{"level":2,"title":"线性表定义","slug":"线性表定义","link":"#线性表定义","children":[]},{"level":2,"title":"线性表的顺序存储结构","slug":"线性表的顺序存储结构","link":"#线性表的顺序存储结构","children":[]},{"level":2,"title":"线性表的链式存储结构","slug":"线性表的链式存储结构","link":"#线性表的链式存储结构","children":[]}],"filePathRelative":"docs/Computer/Computer/5_Structure/4-Structure.md","git":{"createdTime":1751621258000,"updatedTime":1751621258000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{y as comp,x as data};
