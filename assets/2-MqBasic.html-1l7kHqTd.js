import{_ as t,c as i,b as s,a,d as p,e as o,r as l,o as c}from"./app-v4KVQ4WJ.js";const r="/assets/image-20250624110509022-CTL4KHFy.png",d="/assets/image-20250624110526469-CVjHh0vu.png",m="/assets/image-20250624110541359-B2YL7flJ.png",g="/assets/image-20250624110630003-Ck64jSxm.png",u="/assets/image-20250624110643263-By86JXVm.png",h="/assets/image-20250624110711380-2kYgC8Cs.png",_="/assets/image-20250624110744650-BuHOfi0W.png",v="/assets/image-20250624110758638-DEkFrUSz.png",b="/assets/image-20250624110816942-pYqIK-Nw.png",k="/assets/image-20250624110911828-DLpe8YXr.png",q="/assets/image-20250624110927316-BUSaTzCR.png",x="/assets/image-20250624111002919-CbMdimeQ.png",f="/assets/image-20250624111027432-CTS0_IA_.png",M="/assets/image-20250624111042856-DgtSuiOT.png",w="/assets/image-20250624111104100-DbyFB2JP.png",B="/assets/image-20250624111142544-CPnKqP8h.png",Q="/assets/image-20250624111158822-jZHY9qip.png",R="/assets/image-20250624111213915-_cNAIliI.png",T="/assets/image-20250624111252804-DETy-Pk8.png",C="/assets/image-20250624111307488-DwVakwTF.png",S="/assets/image-20250624111331345-Dh2_plaC.png",D="/assets/image-20250624111348660-tp8S8lcn.png",E="/assets/image-20250624111408165-B6NOUqK1.png",I="/assets/image-20250624111423234-HLL0ezSC.png",L="/assets/image-20250624111436318-B2GtgcMl.png",N={},y={href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"};function A(H,e){const n=l("ExternalLinkIcon");return c(),i("div",null,[e[1]||(e[1]=s('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/兽耳-猫耳美女-短发-猫尾巴-4k动漫壁纸-3840_2160.jpg" alt="兽耳 猫耳美女 短发 猫尾巴 4k动漫壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 安装</p><p>2 收发消息</p><p>3 数据隔离</p></div><p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：</p>',3)),a("p",null,[a("a",y,[e[0]||(e[0]=p("https://www.rabbitmq.com/")),o(n)])]),e[2]||(e[2]=s(`<p>接下来，我们就学习它的基本概念和基础用法。</p><h2 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装"><span>1 安装</span></a></h2><p>我们同样基于Docker来安装RabbitMQ，使用下面的命令即可：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itheima <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">-v</span> mq-plugins:/plugins <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">--name</span> mq <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">--hostname</span> mq <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">--network</span> hm-net<span class="token punctuation">\\</span></span>
<span class="line"> <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line"> rabbitmq:3.8-management</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果拉取镜像困难的话，可以使用课前资料给大家准备的镜像，利用docker load命令加载：</p><p><img src="`+r+'" alt="image-20250624110509022"></p><p>可以看到在安装命令中有两个映射的端口：</p><ul><li>15672：RabbitMQ提供的管理控制台的端口</li><li>5672：RabbitMQ的消息发送处理接口</li></ul><p>安装完成后，我们访问 http://192.168.150.101:15672即可看到管理控制台。首次访问需要登录，默认的用户名和密码在配置文件中已经指定了。</p><p>登录后即可看到管理控制台总览页面：</p><p><img src="'+d+'" alt="image-20250624110526469"></p><p>RabbitMQ对应的架构如图：</p><p><img src="'+m+'" alt="image-20250624110541359"></p><p>其中包含几个概念：</p><ul><li><strong><code>publisher</code></strong>：生产者，也就是发送消息的一方</li><li><strong><code>consumer</code></strong>：消费者，也就是消费消息的一方</li><li><strong><code>queue</code></strong>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li><strong><code>exchange</code></strong>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li><li><strong><code>virtual host</code></strong>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li></ul><p>上述这些东西都可以在RabbitMQ的管理控制台来管理，下一节我们就一起来学习控制台的使用。</p><h2 id="_2-收发消息" tabindex="-1"><a class="header-anchor" href="#_2-收发消息"><span>2 收发消息</span></a></h2><h3 id="_2-1-交换机" tabindex="-1"><a class="header-anchor" href="#_2-1-交换机"><span>2.1 交换机</span></a></h3><p>我们打开Exchanges选项卡，可以看到已经存在很多交换机：</p><p><img src="'+g+'" alt="image-20250624110630003"></p><p>我们点击任意交换机，即可进入交换机详情页面。仍然会利用控制台中的publish message 发送一条消息：</p><p><img src="'+u+'" alt="image-20250624110643263"></p><p><img src="'+h+'" alt="image-20250624110711380"></p><p>这里是由控制台模拟了生产者发送的消息。由于没有消费者存在，最终消息丢失了，这样说明交换机没有存储消息的能力。</p><h3 id="_2-2-队列" tabindex="-1"><a class="header-anchor" href="#_2-2-队列"><span>2.2 队列</span></a></h3><p>我们打开<code>Queues</code>选项卡，新建一个队列：</p><p><img src="'+_+'" alt="image-20250624110744650"></p><p>命名为<code>hello.queue1</code>：</p><p><img src="'+v+'" alt="image-20250624110758638"></p><p>再以相同的方式，创建一个队列，密码为<code>hello.queue2</code>，最终队列列表如下：</p><p><img src="'+b+'" alt="image-20250624110816942"></p><p>此时，我们再次向<code>amq.fanout</code>交换机发送一条消息。会发现消息依然没有到达队列！！</p><p>怎么回事呢？</p><p>发送到交换机的消息，只会路由到与其绑定的队列，因此仅仅创建队列是不够的，我们还需要将其与交换机绑定。</p><h3 id="_2-3-绑定关系" tabindex="-1"><a class="header-anchor" href="#_2-3-绑定关系"><span>2.3 绑定关系</span></a></h3><p>点击<code>Exchanges</code>选项卡，点击<code>amq.fanout</code>交换机，进入交换机详情页，然后点击<code>Bindings</code>菜单，在表单中填写要绑定的队列名称：</p><p><img src="'+k+'" alt="image-20250624110911828"></p><p>相同的方式，将hello.queue2也绑定到改交换机。</p><p>最终，绑定结果如下：</p><p><img src="'+q+'" alt="image-20250624110927316"></p><h3 id="_2-4-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-4-发送消息"><span>2.4 发送消息</span></a></h3><p>再次回到exchange页面，找到刚刚绑定的<code>amq.fanout</code>，点击进入详情页，再次发送一条消息：</p><p><img src="'+x+'" alt="image-20250624111002919"></p><p>回到<code>Queues</code>页面，可以发现<code>hello.queue</code>中已经有一条消息了：</p><p><img src="'+f+'" alt="image-20250624111027432"></p><p>点击队列名称，进入详情页，查看队列详情，这次我们点击get message：</p><p><img src="'+M+'" alt="image-20250624111042856"></p><p>可以看到消息到达队列了：</p><p><img src="'+w+'" alt="image-20250624111104100"></p><p>这个时候如果有消费者监听了MQ的<code>hello.queue1</code>或<code>hello.queue2</code>队列，自然就能接收到消息了。</p><h2 id="_3-数据隔离" tabindex="-1"><a class="header-anchor" href="#_3-数据隔离"><span>3 数据隔离</span></a></h2><h3 id="_3-1-用户管理" tabindex="-1"><a class="header-anchor" href="#_3-1-用户管理"><span>3.1 用户管理</span></a></h3><p>点击<code>Admin</code>选项卡，首先会看到RabbitMQ控制台的用户管理界面：</p><p><img src="'+B+'" alt="image-20250624111142544"></p><p>这里的用户都是RabbitMQ的管理或运维人员。目前只有安装RabbitMQ时添加的<code>itheima</code>这个用户。仔细观察用户表格中的字段，如下：</p><ul><li><code>Name</code>：<code>itheima</code>，也就是用户名</li><li><code>Tags</code>：<code>administrator</code>，说明<code>itheima</code>用户是超级管理员，拥有所有权限</li><li><code>Can access virtual host</code>： <code>/</code>，可以访问的<code>virtual host</code>，这里的<code>/</code>是默认的<code>virtual host</code></li></ul><p>对于小型企业而言，出于成本考虑，我们通常只会搭建一套MQ集群，公司内的多个不同项目同时使用。这个时候为了避免互相干扰， 我们会利用<code>virtual host</code>的隔离特性，将不同项目隔离。一般会做两件事情：</p><ul><li>给每个项目创建独立的运维账号，将管理权限分离。</li><li>给每个项目创建不同的<code>virtual host</code>，将每个项目的数据隔离。</li></ul><p>比如，我们给黑马商城创建一个新的用户，命名为<code>hmall</code>：</p><p><img src="'+Q+'" alt="image-20250624111158822"></p><p>你会发现此时hmall用户没有任何<code>virtual host</code>的访问权限：</p><p><img src="'+R+'" alt="image-20250624111213915"></p><p>别急，接下来我们就来授权。</p><h3 id="_3-2-virtual-host" tabindex="-1"><a class="header-anchor" href="#_3-2-virtual-host"><span>3.2 virtual host</span></a></h3><p>我们先退出登录：</p><p><img src="'+T+'" alt="image-20250624111252804"></p><p>切换到刚刚创建的hmall用户登录，然后点击<code>Virtual Hosts</code>菜单，进入<code>virtual host</code>管理页：</p><p><img src="'+C+'" alt="image-20250624111307488"></p><p>可以看到目前只有一个默认的<code>virtual host</code>，名字为 <code>/</code>。</p><p>我们可以给黑马商城项目创建一个单独的<code>virtual host</code>，而不是使用默认的<code>/</code>。</p><p><img src="'+S+'" alt="image-20250624111331345"></p><p>创建完成后如图：</p><p><img src="'+D+'" alt="image-20250624111348660"></p><p>由于我们是登录<code>hmall</code>账户后创建的<code>virtual host</code>，因此回到<code>users</code>菜单，你会发现当前用户已经具备了对<code>/hmall</code>这个<code>virtual host</code>的访问权限了：</p><p><img src="'+E+'" alt="image-20250624111408165"></p><p>此时，点击页面右上角的<code>virtual host</code>下拉菜单，切换<code>virtual host</code>为 <code>/hmall</code>：</p><p><img src="'+I+'" alt="image-20250624111423234"></p><p>然后再次查看queues选项卡，会发现之前的队列已经看不到了：</p><p><img src="'+L+'" alt="image-20250624111436318"></p><p>这就是基于<code>virtual host </code>的隔离效果。</p>',80))])}const P=t(N,[["render",A]]),U=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day06_MqBasic/2-MqBasic.html","title":"RabbitMQ","lang":"en-US","frontmatter":{"title":"RabbitMQ","date":"2025/03/06"},"headers":[{"level":2,"title":"1 安装","slug":"_1-安装","link":"#_1-安装","children":[]},{"level":2,"title":"2 收发消息","slug":"_2-收发消息","link":"#_2-收发消息","children":[{"level":3,"title":"2.1 交换机","slug":"_2-1-交换机","link":"#_2-1-交换机","children":[]},{"level":3,"title":"2.2 队列","slug":"_2-2-队列","link":"#_2-2-队列","children":[]},{"level":3,"title":"2.3 绑定关系","slug":"_2-3-绑定关系","link":"#_2-3-绑定关系","children":[]},{"level":3,"title":"2.4 发送消息","slug":"_2-4-发送消息","link":"#_2-4-发送消息","children":[]}]},{"level":2,"title":"3 数据隔离","slug":"_3-数据隔离","link":"#_3-数据隔离","children":[{"level":3,"title":"3.1 用户管理","slug":"_3-1-用户管理","link":"#_3-1-用户管理","children":[]},{"level":3,"title":"3.2 virtual host","slug":"_3-2-virtual-host","link":"#_3-2-virtual-host","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day06_MqBasic/2-MqBasic.md","git":{"createdTime":1741251281000,"updatedTime":1750752221000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":3}]}}');export{P as comp,U as data};
