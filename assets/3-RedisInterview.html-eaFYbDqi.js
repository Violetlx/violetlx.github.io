import{_ as t,c as p,b as n,a,d as l,e as c,r as i,o}from"./app-CezBFXHK.js";const r="/assets/image-20250624163616804-D5FfzPQd.png",d="/assets/image-20250624163651340-CsIxuQ8S.png",u="/assets/image-20250624163700173-B5Rw5uE5.png",k="/assets/image-20250624163804122-DHKC6ug3.png",m="/assets/image-20250624163818924-ki7L-xDI.png",v="/assets/image-20250624163837444-MXDhIwEB.png",b="/assets/image-20250624163943237-DQfb27qV.png",g="/assets/image-20250624163953469-BGJRsvPt.png",h="/assets/image-20250624164009961-Dasq0OzS.png",q="/assets/image-20250624164022189-CE11KxyH.png",y="/assets/image-20250624164110662-Cx3fox04.png",_="/assets/image-20250624164124280-BSA-oX1a.png",f={},x={href:"https://redis.io/docs/management/scaling/#redis-cluster-101",target:"_blank",rel:"noopener noreferrer"};function w(R,s){const e=i("ExternalLinkIcon");return o(),p("div",null,[s[1]||(s[1]=n('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/dodge-charger-classic-muscle-car-desktop-wallpaper.jpg" alt="道奇CHARGER经典肌肉车桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 搭建分片集群</p><p>2 散列插槽</p><p>3 故障转移</p><p>4 总结</p><p>5 Java 客户端连接分片集群 (选学)</p></div><p>主从模式可以解决高可用、高并发读的问题。但依然有两个问题没有解决：</p><ul><li>海量数据存储</li><li>高并发写</li></ul><p>要解决这两个问题就需要用到分片集群了。分片的意思，就是把数据拆分存储到不同节点，这样整个集群的存储数据量就更大了。</p><p>Redis分片集群的结构如图：</p><p><img src="'+r+'" alt="image-20250624163616804"></p><p>分片集群特征：</p><ul><li>集群中有多个master，每个master保存不同分片数据 ，解决海量数据存储问题</li><li>每个master都可以有多个slave节点 ，确保高可用</li><li>master之间通过ping监测彼此健康状态 ，类似哨兵作用</li><li>客户端请求可以访问集群任意节点，最终都会被转发到数据所在节点</li></ul><h2 id="_1-搭建分片集群" tabindex="-1"><a class="header-anchor" href="#_1-搭建分片集群"><span>1 搭建分片集群</span></a></h2><p>Redis分片集群最少也需要3个master节点，由于我们的机器性能有限，我们只给每个master配置1个slave，形成最小的分片集群：</p><p><img src="'+d+'" alt="image-20250624163651340"></p><p>计划部署的节点信息如下：</p><p><img src="'+u+`" alt="image-20250624163700173"></p><h3 id="_1-1-集群配置" tabindex="-1"><a class="header-anchor" href="#_1-1-集群配置"><span>1.1 集群配置</span></a></h3><p>分片集群中的Redis节点必须开启集群模式，一般在配置文件中添加下面参数：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">port <span class="token number">7000</span></span>
<span class="line">cluster-enabled <span class="token function">yes</span></span>
<span class="line">cluster-config-file nodes.conf</span>
<span class="line">cluster-node-timeout <span class="token number">5000</span></span>
<span class="line">appendonly <span class="token function">yes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中有3个我们没见过的参数：</p><ul><li><code>cluster-enabled</code>：是否开启集群模式</li><li><code>cluster-config-file</code>：集群模式的配置文件名称，无需手动创建，由集群自动维护</li><li><code>cluster-node-timeout</code>：集群中节点之间心跳超时时间</li></ul><p>一般搭建部署集群肯定是给每个节点都配置上述参数，不过考虑到我们计划用<code>docker-compose</code>部署，因此可以直接在启动命令中指定参数，偷个懒。</p><p>在虚拟机的<code>/root</code>目录下新建一个<code>redis-cluster</code>目录，然后在其中新建一个<code>docker-compose.yaml</code>文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.2&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">r1</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> r1</span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;host&quot;</span></span>
<span class="line">    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;redis-server&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7001&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-enabled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-config-file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node.conf&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">r2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> r2</span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;host&quot;</span></span>
<span class="line">    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;redis-server&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7002&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-enabled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-config-file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node.conf&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">r3</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> r3</span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;host&quot;</span></span>
<span class="line">    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;redis-server&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7003&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-enabled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-config-file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node.conf&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">r4</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> r4</span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;host&quot;</span></span>
<span class="line">    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;redis-server&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7004&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-enabled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-config-file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node.conf&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">r5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> r5</span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;host&quot;</span></span>
<span class="line">    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;redis-server&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7005&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-enabled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-config-file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node.conf&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">r6</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> r6</span>
<span class="line">    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;host&quot;</span></span>
<span class="line">    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;redis-server&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7006&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-enabled&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--cluster-config-file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node.conf&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：使用Docker部署Redis集群，network模式必须采用host</p><h3 id="_1-2-启动集群" tabindex="-1"><a class="header-anchor" href="#_1-2-启动集群"><span>1.2 启动集群</span></a></h3><p>进入<code>/root/redis-cluster</code>目录，使用命令启动redis：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动成功，可以通过命令查看启动进程：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> redis</span>
<span class="line"><span class="token comment"># 结果：</span></span>
<span class="line">root       <span class="token number">4822</span>   <span class="token number">4743</span>  <span class="token number">0</span> <span class="token number">14</span>:29 ?        00:00:02 redis-server *:7002 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span></span>
<span class="line">root       <span class="token number">4827</span>   <span class="token number">4745</span>  <span class="token number">0</span> <span class="token number">14</span>:29 ?        00:00:01 redis-server *:7005 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span></span>
<span class="line">root       <span class="token number">4897</span>   <span class="token number">4778</span>  <span class="token number">0</span> <span class="token number">14</span>:29 ?        00:00:01 redis-server *:7004 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span></span>
<span class="line">root       <span class="token number">4903</span>   <span class="token number">4759</span>  <span class="token number">0</span> <span class="token number">14</span>:29 ?        00:00:01 redis-server *:7006 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span></span>
<span class="line">root       <span class="token number">4905</span>   <span class="token number">4775</span>  <span class="token number">0</span> <span class="token number">14</span>:29 ?        00:00:02 redis-server *:7001 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span></span>
<span class="line">root       <span class="token number">4912</span>   <span class="token number">4732</span>  <span class="token number">0</span> <span class="token number">14</span>:29 ?        00:00:01 redis-server *:7003 <span class="token punctuation">[</span>cluster<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现每个redis节点都以cluster模式运行。不过节点与节点之间并未建立连接。</p><p>接下来，我们使用命令创建集群：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入任意节点容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> r1 <span class="token function">bash</span></span>
<span class="line"><span class="token comment"># 然后，执行命令</span></span>
<span class="line">redis-cli <span class="token parameter variable">--cluster</span> create --cluster-replicas <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token number">192.168</span>.150.101:7001 <span class="token number">192.168</span>.150.101:7002 <span class="token number">192.168</span>.150.101:7003 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token number">192.168</span>.150.101:7004 <span class="token number">192.168</span>.150.101:7005 <span class="token number">192.168</span>.150.101:7006</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--cluster-replicas 1</code> ：指定集群中每个<code>master</code>的副本个数为1 <ul><li>此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是<code>master</code>的数量<code>n</code>。因此节点列表中的前<code>n</code>个节点就是<code>master</code>，其它节点都是<code>slave</code>节点，随机分配到不同<code>master</code></li></ul></li></ul><p>输入命令后控制台会弹出下面的信息：</p><p><img src="`+k+'" alt="image-20250624163804122"></p><p>这里展示了集群中<code>master</code>与<code>slave</code>节点分配情况，并询问你是否同意。节点信息如下：</p><ul><li><code>7001</code>是<code>master</code>，节点<code>id</code>后6位是<code>da134f</code></li><li><code>7002</code>是<code>master</code>，节点<code>id</code>后6位是<code>862fa0</code></li><li><code>7003</code>是<code>master</code>，节点<code>id</code>后6位是<code>ad5083</code></li><li><code>7004</code>是<code>slave</code>，节点<code>id</code>后6位是<code>391f8b</code>，认<code>ad5083</code>（7003）为<code>master</code></li><li><code>7005</code>是<code>slave</code>，节点<code>id</code>后6位是<code>e152cd</code>，认<code>da134f</code>（7001）为<code>master</code></li><li><code>7006</code>是<code>slave</code>，节点<code>id</code>后6位是<code>4a018a</code>，认<code>862fa0</code>（7002）为<code>master</code></li></ul><p>输入<code>yes</code>然后回车。会发现集群开始创建，并输出下列信息：</p><p><img src="'+m+`" alt="image-20250624163818924"></p><p>接着，我们可以通过命令查看集群状态：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span> cluster nodes</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><p><img src="`+v+'" alt="image-20250624163837444"></p><h2 id="_2-散列插槽" tabindex="-1"><a class="header-anchor" href="#_2-散列插槽"><span>2 散列插槽</span></a></h2><p>数据要分片存储到不同的Redis节点，肯定需要有分片的依据，这样下次查询的时候才能知道去哪个节点查询。很多数据分片都会采用一致性hash算法。而Redis则是利用散列插槽（<strong><code>hash slot</code></strong>）的方式实现数据分片。</p><p>详见官方文档：</p>',46)),a("p",null,[a("a",x,[s[0]||(s[0]=l("https://redis.io/docs/management/scaling/#redis-cluster-101")),c(e)])]),s[2]||(s[2]=n('<p>在Redis集群中，共有16384个<code>hash slots</code>，集群中的每一个master节点都会分配一定数量的<code>hash slots</code>。具体的分配在集群创建时就已经指定了：</p><p><img src="'+b+`" alt="image-20250624163943237"></p><p>如图中所示：</p><ul><li>Master[0]，本例中就是7001节点，分配到的插槽是0~5460</li><li>Master[1]，本例中就是7002节点，分配到的插槽是5461~10922</li><li>Master[2]，本例中就是7003节点，分配到的插槽是10923~16383</li></ul><p>当我们读写数据时，Redis基于<code>CRC16</code> 算法对<code>key</code>做<code>hash</code>运算，得到的结果与<code>16384</code>取余，就计算出了这个<code>key</code>的<code>slot</code>值。然后到<code>slot</code>所在的Redis节点执行读写操作。</p><p>不过<code>hash slot</code>的计算也分两种情况：</p><ul><li>当<code>key</code>中包含<code>{}</code>时，根据<code>{}</code>之间的字符串计算<code>hash slot</code></li><li>当<code>key</code>中不包含<code>{}</code>时，则根据整个<code>key</code>字符串计算<code>hash slot</code></li></ul><p>例如：</p><ul><li>key是<code>user</code>，则根据<code>user</code>来计算hash slot</li><li>key是<code>user:{age}</code>，则根据<code>age</code>来计算hash slot</li></ul><p>我们来测试一下，先于<code>7001</code>建立连接：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> r1 <span class="token function">bash</span></span>
<span class="line"><span class="token comment"># 进入redis-cli</span></span>
<span class="line">redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span></span>
<span class="line"><span class="token comment"># 测试</span></span>
<span class="line"><span class="token builtin class-name">set</span> user jack</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会发现报错了：</p><p><img src="`+g+`" alt="image-20250624163953469"></p><p>提示我们<code>MOVED 5474</code>，其实就是经过计算，得出<code>user</code>这个<code>key</code>的<code>hash slot</code> 是<code>5474</code>，而<code>5474</code>是在<code>7002</code>节点，不能在<code>7001</code>上写入！！</p><p>说好的任意节点都可以读写呢？</p><p>这是因为我们连接的方式有问题，连接集群时，要加<code>-c</code>参数：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 通过7001连接集群</span></span>
<span class="line">redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-p</span> <span class="token number">7001</span></span>
<span class="line"><span class="token comment"># 存入数据</span></span>
<span class="line"><span class="token builtin class-name">set</span> user jack</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><p><img src="`+h+`" alt="image-20250624164009961"></p><p>可以看到，客户端自动跳转到了<code>5474</code>这个<code>slot</code>所在的<code>7002</code>节点。</p><p>现在，我们添加一个新的key，这次加上<code>{}</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 试一下key中带{}</span></span>
<span class="line"><span class="token builtin class-name">set</span> user:<span class="token punctuation">{</span>age<span class="token punctuation">}</span> <span class="token number">21</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 再试一下key中不带{}</span></span>
<span class="line"><span class="token builtin class-name">set</span> age <span class="token number">20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><p><img src="`+q+`" alt="image-20250624164022189"></p><p>可以看到<code>user:{age}</code>和<code>age</code>计算出的<code>slot</code>都是<code>741</code>。</p><h2 id="_3-故障转移" tabindex="-1"><a class="header-anchor" href="#_3-故障转移"><span>3 故障转移</span></a></h2><p>分片集群的节点之间会互相通过ping的方式做心跳检测，超时未回应的节点会被标记为下线状态。当发现master下线时，会将这个master的某个slave提升为master。</p><p>我们先打开一个控制台窗口，利用命令监测集群状态：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">watch</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> r1 redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span> cluster nodes</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令前面的watch可以每隔一段时间刷新执行结果，方便我们实时监控集群状态变化。</p><p>接着，我们故技重施，利用命令让某个master节点休眠。比如这里我们让<code>7002</code>节点休眠，打开一个新的ssh控制台，输入下面命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> r2 redis-cli <span class="token parameter variable">-p</span> <span class="token number">7002</span> DEBUG <span class="token function">sleep</span> <span class="token number">30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以观察到，集群发现7002宕机，标记为下线：</p><p><img src="`+y+'" alt="image-20250624164110662"></p><p>过了一段时间后，7002原本的小弟7006变成了<code>master</code>：</p><p><img src="'+_+`" alt="image-20250624164124280"></p><p>而7002被标记为<code>slave</code>，而且其<code>master</code>正好是7006，主从地位互换。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4 总结</span></a></h2><p>Redis分片集群如何判断某个key应该在哪个实例？</p><ul><li>将16384个插槽分配到不同的实例</li><li>根据key计算哈希值，对16384取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>Redis计算key的插槽值时会判断key中是否包含<code>{}</code>，如果有则基于<code>{}</code>内的字符计算插槽</li><li>数据的key中可以加入<code>{类型}</code>，例如key都以<code>{typeId}</code>为前缀，这样同类型数据计算的插槽一定相同</li></ul><h2 id="_5-java-客户端连接分片集群-选学" tabindex="-1"><a class="header-anchor" href="#_5-java-客户端连接分片集群-选学"><span>5 Java 客户端连接分片集群 (选学)</span></a></h2><p>RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致，参考<code>2.5节</code>：</p><p>1）引入redis的starter依赖</p><p>2）配置分片集群地址</p><p>3）配置读写分离</p><p>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">cluster</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">nodes</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7001</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7002</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7003</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8001</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8002</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8003</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49))])}const I=t(f,[["render",w]]),D=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day10_RedisInterview/3-RedisInterview.html","title":"Redis分片集群","lang":"en-US","frontmatter":{"title":"Redis分片集群","date":"2025/03/06"},"headers":[{"level":2,"title":"1 搭建分片集群","slug":"_1-搭建分片集群","link":"#_1-搭建分片集群","children":[{"level":3,"title":"1.1 集群配置","slug":"_1-1-集群配置","link":"#_1-1-集群配置","children":[]},{"level":3,"title":"1.2 启动集群","slug":"_1-2-启动集群","link":"#_1-2-启动集群","children":[]}]},{"level":2,"title":"2 散列插槽","slug":"_2-散列插槽","link":"#_2-散列插槽","children":[]},{"level":2,"title":"3 故障转移","slug":"_3-故障转移","link":"#_3-故障转移","children":[]},{"level":2,"title":"4 总结","slug":"_4-总结","link":"#_4-总结","children":[]},{"level":2,"title":"5 Java 客户端连接分片集群 (选学)","slug":"_5-java-客户端连接分片集群-选学","link":"#_5-java-客户端连接分片集群-选学","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day10_RedisInterview/3-RedisInterview.md","git":{"createdTime":1741251281000,"updatedTime":1750756522000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{I as comp,D as data};
