import{_ as i,c as o,b as t,o as p}from"./app-DlQzn5rm.js";const s="/assets/image-20231001122436405-BjsHDfxp.png",r="/assets/image-20231001122449386-BZvaruFA.png",n="/assets/image-20231001122814887-B4lgs2f-.png",e="/assets/image-20231001122828459-DdDannp2.png",g="/assets/image-20231001144202861-DO7T1IEN.png",a="/assets/image-20231001144428054-DUyRkq6s.png",c="/assets/image-20231001144621760-BTfq7GY2.png",m="/assets/image-20231001164059000-D-dbjKFL.png",u="/assets/image-20230930174300560-KNbxy1Nv.png",h="/assets/image-20230930174324833-BM0KJBUd.png",d="/assets/image-20230930182736652-CwZ8OFyQ.png",_="/assets/image-20230930182758088-F7WvIsMO.png",b="/assets/image-20231001013821157-X_u_LSC7.png",k="/assets/image-20231001020906804-rFL8uP6Y.png",w={};function S(v,l){return p(),o("div",null,l[0]||(l[0]=[t('<p><img src="https://artfiles.alphacoders.com/125/thumb-1920-125859.jpg" alt="Download Kyōka Jirō Anime My Hero Academia Art"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul><li>软件架构设计</li><li>系统开发基础</li><li>数据库系统</li><li>Web应用开发</li><li>信息系统架构设计</li></ul></div><h2 id="软件架构设计" tabindex="-1"><a class="header-anchor" href="#软件架构设计"><span><strong>软件架构设计</strong></span></a></h2><blockquote><p><img src="'+s+'" alt="image-20231001122436405"></p><p><img src="'+r+'" alt="image-20231001122449386"></p><p><strong>软件属性提升能力：</strong></p><ol><li>性能：增加计算资源、改善资源需求、 资源管理和资源调度，引入并发机制</li><li>安全：抵御攻击、攻击检测、从攻击中恢复和信息审计，用户日志，用户授权</li><li>可用性：心跳、Ping/Echo、主动冗余、 被动冗余、选举</li><li>可修改性：，接口-实现分离、抽象、内部信息封装</li></ol><p><strong>架构风格质量分析</strong></p><ul><li>软件架构风格：描述系统组成构件方式结构基本相同</li><li>架构风险：设计中潜在，存在问题的架构决策带来的隐患</li><li>风险点与非风险点：风险导致的问题</li><li>敏感点：实现某种特定质量属性具有的特性</li><li>均衡点：影响多个质量属性的特性（多个质量属性的敏感点）</li></ul><p><img src="'+n+'" alt="image-20231001122814887"></p><p><img src="'+e+'" alt="image-20231001122828459"></p><p><strong>典型架构脆弱分析（缺点）</strong></p><ul><li><p>分层架构</p><ol><li>依赖底层服务，底层错误，程序无法运行</li><li>层级之间通信脆弱，层级之间通信需要层层传递，降低通信性能下降</li></ol></li><li><p>C/S架构</p><ol><li><p>客户端需要下载专门应用使用</p></li><li><p>客户端环境不同，部署困难，不易于扩展</p></li><li><p>可修改性弱，当业务变更时，需要重写下载更新客户端</p></li></ol></li><li><p>B/S架构（三层C/S架构）</p><ol><li>页面通用化，可操作性弱</li><li>消耗网络资源，需要不停动态更新</li><li>暴露在外网上，安全性降低，面对大量不可知用户</li></ol></li><li><p>事件驱动架构</p><ol><li>不能确定响应事件组件执行顺序</li><li>组件之间交换数据弱，逻辑性复杂</li><li>事件驱动容易进入死循环</li><li>无法有效控制并发</li></ol></li><li><p>微服务架构</p><ol><li>分布式逻辑带来系统结构复杂</li><li>服务之间通信机制是分布式架构瓶颈</li></ol></li></ul><p><strong>MVC分层</strong></p><ul><li>控制层：处理用户交互部分，通常负责从视图中读取数据，约束用户输入，并向模型发送数据</li><li>模型：处理应用程序数据逻辑部分，通常在数据库中存取数据</li><li>视图：处理数据显示部分，用户与系统交互的界面</li><li>MVC优点：<strong>有助于管理复杂的应用程序，简化分组开发，不同的开发人员可以同时开发视图，控制器，业务逻辑</strong></li><li>MVC缺点：对于简单界面，增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。视图对模型数据的低效率访问，<strong>视图可能需要多次调用才能获得足够的显示数据</strong>。<strong>对未变化数据的不必要的频繁访问，也将损害操作性能</strong>。<strong>侧重于竖向即请求、处理、呈现之间的协调，而忽略了模块之间的协调</strong></li></ul><p><strong>J2EE四层结构</strong></p><ol><li>客户层</li><li>web组件层：JSP或Servlet</li><li>业务层</li><li>信息系统层：数据库和其他一些需要与之交互的独立系统</li></ol><p><strong>面向服务架构SOA：</strong> 将应用程序的不同功能单元（服务）通过这些服务之间定义良好的接口契约联系起来，<strong>独立于实现服务的硬件平台</strong>，操作系统和编程语言。关键目标是企业IT资产重用最大化</p><ul><li><p>ESB（企业服务总线设计）：连接服务节点，具有消息转化，解释，路由功能，使不同的服务相互连通</p><p>ESB特点：描述元数据和服务注册，在服务请求者和提供者之间数据传输，提供服务发现，路由，匹配，选择能力</p><p>ESB功能</p><ol><li>服务位置透明性</li><li>传输协议转换</li><li>消息格式转换</li><li>消息路由</li><li>消息增强</li><li>安全性</li><li>监控与管理</li></ol></li></ul></blockquote><h2 id="系统开发基础" tabindex="-1"><a class="header-anchor" href="#系统开发基础"><span><strong>系统开发基础</strong></span></a></h2><blockquote><p>结构化需求分析：自顶向下，逐步分解，面向数据</p><p>模型：数据流图，状态装换图，E-R图以及数据字典</p><p>数据字典：对DFD出现的元素加以定义，使其每个图形元素都有一个确定的解释</p><ul><li>数据元素</li><li>数据流</li><li>数据存储</li><li>加工逻辑</li><li>外部实体</li></ul><p>流程图：以图形化的方式展示<strong>应用程序从数据输入开始到获得输出为止的逻辑过程，描述处理过程的控制流</strong></p><p>数据流图：<strong>说明业务处理过程、系统边界内所包含的功能和系 统中的数据流</strong></p><p><strong>流程图与数据流图区别：</strong></p><ol><li>数据流图中的处理过程可并行；流程图在某个时间点只能处于一个处理过程</li><li>数据流图展现系统的数据流；<strong>流程图展现系统的控制流</strong>。</li><li>数据流图展现全局的处理过程，过程之间遵循不同的计时标准；流程图中处理过程遵循一致的计时标准。</li><li>数据流图适用于系统分析中的逻辑建模阶段；流程图适用于系统设计中的物理模阶段</li></ol><p><strong>高质量数据流图设计原则</strong></p><ol><li>复杂性最小化原则：DFD分层架构，将消息划分小且独立的子集</li><li>接口最小化原则：各个元素之间的接口数或连接数最小化</li><li>数据流一致性原则：是否存在流出流入数据，是否存在<strong>数据流入加工</strong>（椭圆形表示数据加工处理）</li></ol><p><img src="'+g+'" alt="image-20231001144202861"></p><p>甘特图：描述不同任务之间重叠关系</p><p><img src="'+a+'" alt="image-20231001144428054"></p><p>PERT：描述项目中任务关系（任务编号，名称，开始结束时间，持续时间，松弛时间）</p><p><strong>关键路径法</strong>：推算项目最短工期</p><ul><li><p><img src="'+c+'" alt="image-20231001144621760"></p></li><li><p>顺推：最早开始时间等于前一个活动最早完成时间，最早完成时间 = 最早开始时间+持续时间</p></li><li><p>逆推：最晚完成时间等于后续活动最晚开始时间的最小值，最晚开始时间 = 最晚完成时间 - 持续时间</p></li></ul><p><strong>信息安全</strong></p><ul><li><p>加密技术应用：对称，非对称，信息摘要，数字签名，数字证书</p></li><li><p>安全威胁种类</p><ol><li>信息泄漏</li><li>破坏信息完整性</li><li>拒绝服务：合法访问被无条件阻止</li><li>非法使用</li><li>窃听，窃取</li><li>假冒：通过欺骗系统（或用户）成为合法用户</li><li>授权侵犯（内部攻击）：将权限授权其他非法获取资源的人</li><li>木马</li><li>陷阱，业务欺骗：诱导用户提供系统关键数据</li><li>抵赖：否认或伪造用户数据</li><li>重放：截取用户通信数据，进行重新发送</li><li>病毒</li><li>人员渎职</li><li>媒体废弃：信息从废弃的磁盘，文件中恢复获取</li><li>物理入侵：绕过物理设备控制获得对系统访问</li></ol></li><li><p>安全架构设计</p><ol><li>预警，保护，检测，响应，恢复，反击</li></ol></li><li><p>安全保证体系</p><ol><li>定时审计评估，安装入侵检测系统，统一授权，认证</li><li>统一配置和管理防病毒系统</li><li>网络安全管理</li></ol></li></ul><p><strong>项目计划包含内容</strong></p><ol><li>项目背景</li><li>项目成员</li><li>项目总体技术解决方案</li><li>项目管理过程</li><li>过程工具，技术输入输出描述</li><li>进度计划，最终目标，阶段性目标</li><li>项目预算</li></ol></blockquote><h2 id="数据库系统" tabindex="-1"><a class="header-anchor" href="#数据库系统"><span><strong>数据库系统</strong></span></a></h2><blockquote><p>ORM：关系数据库与对象之间映射，使用对象操作代替SQL语句操作数据</p><ul><li>降低学习和开发成本</li><li>减少SQL进行数据库操作</li><li>减少程序代码量</li><li>降低SQL代码质量差带啦影响</li><li>不适合处理条件复杂的查询语句</li><li>性能较比SQL差</li></ul><p><strong>数据库范式</strong></p><p>1NF：无重复的列，且每一列不可分割的原子属性</p><p>2NF：实体的其他属性完全依赖主键（单表中不存在两个有联系的主体字段，消除数据冗余）</p><p>3NF：不包含其它关系已包含的非主键信息（单表中不存在其他表中非主键的字段，消除数据冗余）</p><p><strong>反规范化技术</strong>：</p><ul><li>增加冗余列</li><li>增加派生列</li><li>重新组表</li><li>水平分割表</li><li>垂直分割表</li></ul><p><strong>封锁协议</strong></p><ul><li>X锁（排他锁，写锁）：只允许锁的事务运行读取和修改，不允许再次加锁</li><li>S锁（共享锁，读锁）：允许锁的事务进行读取，不允许修改（存在锁版本控制，读取不同状态数据）</li></ul><p><strong>数据仓库集成</strong></p><ul><li>集成数据</li><li>面向主题</li><li>数据相对文档</li><li>包含历史信息</li></ul><p><img src="'+m+'" alt="image-20231001164059000"></p><p><strong>分布式数据库</strong></p><ul><li>具有灵活的体系结构</li><li>适应分布式的管理和控制机构</li><li>系统的可靠性高、可用性好</li><li>局部应用的响应速度快</li><li>可扩展性好，易于集成现有系统。</li><li>系统开销大，需要良好通信</li><li>复杂的存取结构</li><li>数据安全性和保密性难以处理</li></ul><p><strong>数据库对比</strong></p><p><img src="'+u+'" alt="image-20230930174300560"></p><p><img src="'+h+'" alt="image-20230930174324833"></p></blockquote><h2 id="web应用开发" tabindex="-1"><a class="header-anchor" href="#web应用开发"><span><strong>Web应用开发</strong></span></a></h2><blockquote><p><strong>微服务架构</strong>：SOA技术延深，强调业务彻底组件化和服务化，微服务包含完整的业务功能，开放一种或多种接口为其他服务使用，并且可以包含一个自己私有的数据库</p><p><img src="'+d+'" alt="image-20230930182736652"></p><p><img src="'+_+'" alt="image-20230930182758088"></p><ul><li><p>微服务优势</p><ol><li>将应用分解一系列访问，降低程序复杂性</li><li>每个服务独立开发，统一约定API</li><li>每个服务独立配置，独立调整</li><li>性能带来影响</li><li>数据一致性问题</li></ol></li></ul><p><strong>负载均衡</strong>：将请求分摊到多个执行单元上执行</p><ol><li>http重定向（301，302状态码重定向）</li><li>反向代理服务器</li><li>DNS域名解析（通过域名解析不同的IP，存在应用故障限制）</li><li>NAT（公网IP与内网IP转换协议）</li><li>CDN：内容分发网络（依靠部署各地的服务器实现用户就近访问资源，包含内容存储和分发）</li></ol><p>REST：表述性状态转移</p><ol><li><p>网络上所有事务都是资源</p></li><li><p>每个资源拥有唯一标识ID</p></li><li><p>所有操作无状态</p></li><li><p>通过接口（方法）实现资源操作</p></li></ol></blockquote><blockquote><p><strong>大数据架构设计</strong></p><p>大数据特征：</p><ol><li>数据量大；</li><li>要求快速响应；</li><li>数据多样性；</li><li>价值密度低</li></ol><p><strong>大数据架构</strong></p><ul><li><p>Lambda架构（机器学习，物理网，流处理）</p><ol><li>批处理层</li><li>速度处理层</li><li>服务层（响应查询）</li><li>优缺点：容错性好，查询灵活度高，易伸缩，易扩展，全场景覆盖带来编码开销，重新部署和迁移成本高</li></ol><p><img src="'+b+'" alt="image-20231001013821157"></p></li><li><p>Kappa架构：在Lambda基础上，删除BatchLayer架构，将数据通道以消息队列进行代替（数据存储在消息队列中，当进行离线分析或在计算时重新消费）</p><ol><li>消息中间件缓存的数据量和回溯数据性能有瓶颈</li><li>依赖实时计算系统能力</li></ol></li></ul><p><img src="'+k+'" alt="image-20231001020906804"></p></blockquote><h2 id="信息系统架构设计" tabindex="-1"><a class="header-anchor" href="#信息系统架构设计"><span><strong>信息系统架构设计</strong></span></a></h2><blockquote><p>信息系统架构（ISA）：对某一特定内容的信息进行统筹，规划，设计，安排等一系列活动</p><ul><li>物理结构 <ol><li>横向综合：将同一水平的业务综合在一起，使其业务一体化</li><li>纵向综合：把职能相的业务综合在一起</li><li>横纵综合：实现信息共享，程序模块化，建立公用数据库和统一的信息处理</li></ol></li></ul><p><strong>建设企业信息系统因素</strong>（战略&gt; 业务与应用&gt;信息基础设施）</p><ul><li><p>战略：对管理者的决策提供支持，信息系统建设的影响与要求</p></li><li><p>业务与应用：信息化提高企业，流程，业务效率，使其成本质量，服务及速度提高</p><p>BRP：业务流程重组，BPM：业务流程管理</p></li><li><p>信息基础设施：信息采集，处理，存储和流通需求（信息系统部门，管理方法，规章制度，及计算机软硬件设备）</p></li></ul><p><strong>信息化</strong>：以培养，发展智能化工具为代表的新的生产力</p><p>实现信息化：开发和利用信息资源，建设国家信息网络，推进信息技术应用，发展信息技术产业，培养信息化人才，制定和完善信息化政策</p><p><strong>信息化架构</strong></p><ul><li><strong>价值驱动体系结构</strong><ol><li>价值期望；反作用力（期望高，实现难度大）；变革催化（环境导致期望价值变化）</li><li>识别合适的价值背景环境，制定效用和优先化期望，识别背景中反作用力和变革带来影响</li></ol></li><li><strong>层次式架构</strong>，</li></ul></blockquote>',13)]))}const x=i(w,[["render",S]]),q=JSON.parse('{"path":"/docs/Computer/Computer/6_Framework/6-Framework.html","title":"案例分析","lang":"en-US","frontmatter":{"title":"案例分析","date":"2025/07/04"},"headers":[{"level":2,"title":"软件架构设计","slug":"软件架构设计","link":"#软件架构设计","children":[]},{"level":2,"title":"系统开发基础","slug":"系统开发基础","link":"#系统开发基础","children":[]},{"level":2,"title":"数据库系统","slug":"数据库系统","link":"#数据库系统","children":[]},{"level":2,"title":"Web应用开发","slug":"web应用开发","link":"#web应用开发","children":[]},{"level":2,"title":"信息系统架构设计","slug":"信息系统架构设计","link":"#信息系统架构设计","children":[]}],"filePathRelative":"docs/Computer/Computer/6_Framework/6-Framework.md","git":{"createdTime":1751621258000,"updatedTime":1751621258000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{x as comp,q as data};
