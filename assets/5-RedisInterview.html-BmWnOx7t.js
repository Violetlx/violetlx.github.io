import{_ as n,c as a,b as e,o as p}from"./app-C7pp65Rl.js";const t="/assets/image-20250624164611191-C6OkKE6z.png",l="/assets/image-20250624164621774-BW98YTDk.png",o={};function i(c,s){return p(),a("div",null,s[0]||(s[0]=[e(`<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/nissan-skyline-r34-night-race-desktop-wallpaper.jpg" alt="日产 SKYLINE R34 夜间比赛桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 内存过期处理</p><p>2 内存淘汰策略</p><p>3 总结</p></div><p>Redis之所以性能强，最主要的原因就是基于内存存储。然而单节点的Redis其内存大小不宜过大，会影响持久化或主从同步性能。</p><p>我们可以通过修改redis.conf文件，添加下面的配置来配置Redis的最大内存：</p><div class="language-Properties line-numbers-mode" data-highlighter="prismjs" data-ext="Properties" data-title="Properties"><pre><code><span class="line">maxmemory 1gb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当内存达到上限，就无法存储更多数据了。因此，Redis内部会有两套内存回收的策略：</p><ul><li>内存过期策略</li><li>内存淘汰策略</li></ul><h2 id="_1-内存过期处理" tabindex="-1"><a class="header-anchor" href="#_1-内存过期处理"><span>1 内存过期处理</span></a></h2><p>存入Redis中的数据可以配置过期时间，到期后再次访问会发现这些数据都不存在了，也就是被过期清理了。</p><h3 id="_1-1-过期命令" tabindex="-1"><a class="header-anchor" href="#_1-1-过期命令"><span>1.1 过期命令</span></a></h3><p>Redis中通过<code>expire</code>命令可以给KEY设置<code>TTL</code>（过期时间），例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 写入一条数据</span></span>
<span class="line"><span class="token builtin class-name">set</span> num <span class="token number">123</span></span>
<span class="line"><span class="token comment"># 设置20秒过期时间</span></span>
<span class="line">expire num <span class="token number">20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过set命令本身也可以支持过期时间的设置：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 写入一条数据并设置20s过期时间</span></span>
<span class="line"><span class="token builtin class-name">set</span> num EX <span class="token number">20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当过期时间到了以后，再去查询数据，会发现数据已经不存在。</p><h3 id="_1-2-过期策略" tabindex="-1"><a class="header-anchor" href="#_1-2-过期策略"><span>1.2 过期策略</span></a></h3><p>那么问题来了：</p><ul><li>Redis如何判断一个KEY是否过期呢？</li><li>Redis又是何时删除过期KEY的呢？</li></ul><p>Redis不管有多少种数据类型，本质是一个<code>KEY-VALUE</code>的键值型数据库，而这种键值映射底层正式基于HashTable来实现的，在Redis中叫做Dict.</p><p>来看下RedisDB的底层源码：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">{</span></span>
<span class="line">    dict dict<span class="token punctuation">;</span>                 <span class="token operator">/</span> The keyspace <span class="token keyword">for</span> this DB <span class="token punctuation">,</span> 也就是存放KEY和VALUE的哈希表<span class="token operator">*</span><span class="token operator">/</span></span>
<span class="line">    dict <span class="token operator">*</span>expires<span class="token punctuation">;</span>              <span class="token comment">/* 同样是哈希表，但保存的是设置了TTL的KEY，及其到期时间*/</span></span>
<span class="line">    dict <span class="token operator">*</span>blocking_keys<span class="token punctuation">;</span>        <span class="token comment">/* Keys with clients waiting for data (BLPOP)*/</span></span>
<span class="line">    dict <span class="token operator">*</span>ready_keys<span class="token punctuation">;</span>           <span class="token comment">/* Blocked keys that received a PUSH */</span></span>
<span class="line">    dict <span class="token operator">*</span>watched_keys<span class="token punctuation">;</span>         <span class="token comment">/* WATCHED keys for MULTI/EXEC CAS /</span>
<span class="line">    int id;                     / Database ID, 0 ~ 15 /</span>
<span class="line">    long long avg_ttl;          / Average TTL, just for stats /</span>
<span class="line">    unsigned long expires_cursor; / Cursor of the active expire cycle. */</span></span>
<span class="line">    list <span class="token operator">*</span>defrag_later<span class="token punctuation">;</span>         <span class="token comment">/* List of key names to attempt to defrag one by one, gradually. */</span></span>
<span class="line"><span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在回答第一个问题：</p><p><strong>面试题</strong>：Redis如何判断KEY是否过期呢？</p><p><strong>答</strong>：在Redis中会有两个Dict，也就是HashTable，其中一个记录KEY-VALUE键值对，另一个记录KEY和过期时间。要判断一个KEY是否过期，只需要到记录过期时间的Dict中根据KEY查询即可。</p><p>Redis是何时删除过期KEY的呢？</p><p>Redis并不会在KEY过期时立刻删除KEY，因为要实现这样的效果就必须给每一个过期的KEY设置时钟，并监控这些KEY的过期状态。无论对CPU还是内存都会带来极大的负担。</p><p>Redis的过期KEY删除策略有两种：</p><ul><li>惰性删除</li><li>周期删除</li></ul><p><strong>惰性删除</strong>，顾明思议就是过期后不会立刻删除。那在什么时候删除呢？</p><p>Redis会在每次访问KEY的时候判断当前KEY有没有设置过期时间，如果有，过期时间是否已经到期。对应的源码如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// db.c</span></span>
<span class="line"><span class="token comment">// 寻找要执行写操作的key</span></span>
<span class="line">robj <span class="token operator">*</span><span class="token function">lookupKeyWriteWithFlags</span><span class="token punctuation">(</span>redisDb <span class="token operator">*</span>db<span class="token punctuation">,</span> robj <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 检查key是否过期，如果过期则删除</span></span>
<span class="line">    <span class="token function">expireIfNeeded</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">lookupKey</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">,</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 寻找要执行读操作的key</span></span>
<span class="line">robj <span class="token operator">*</span><span class="token function">lookupKeyReadWithFlags</span><span class="token punctuation">(</span>redisDb <span class="token operator">*</span>db<span class="token punctuation">,</span> robj <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    robj <span class="token operator">*</span>val<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 检查key是否过期，如果过期则删除</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">expireIfNeeded</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 略 ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    val <span class="token operator">=</span> <span class="token function">lookupKey</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">,</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">goto</span> keymiss<span class="token punctuation">;</span></span>
<span class="line">    server<span class="token punctuation">.</span>stat_keyspace_hits<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> val<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>周期删除</strong>：顾明思议是通过一个定时任务，周期性的抽样部分过期的key，然后执行删除。</p><p>执行周期有两种：</p><ul><li>**SLOW模式：**Redis会设置一个定时任务<code>serverCron()</code>，按照<code>server.hz</code>的频率来执行过期key清理</li><li>**FAST模式：**Redis的每个事件循环前执行过期key清理（事件循环就是NIO事件处理的循环）。</li></ul><p><strong>SLOW</strong>模式规则：</p><ul><li>① 执行频率受<code>server.hz</code>影响，默认为10，即每秒执行10次，每个执行周期100ms。</li><li>② 执行清理耗时不超过一次执行周期的25%，即25ms.</li><li>③ 逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</li><li>④ 如果没达到时间上限（25ms）并且过期key比例大于10%，再进行一次抽样，否则结束</li></ul><p><strong>FAST</strong>模式规则（过期key比例小于10%不执行）：</p><ul><li>① 执行频率受<code>beforeSleep()</code>调用频率影响，但两次FAST模式间隔不低于2ms</li><li>② 执行清理耗时不超过1ms</li><li>③ 逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</li><li>④ 如果没达到时间上限（1ms）并且过期key比例大于10%，再进行一次抽样，否则结束</li></ul><h2 id="_2-内存淘汰策略" tabindex="-1"><a class="header-anchor" href="#_2-内存淘汰策略"><span>2 内存淘汰策略</span></a></h2><p>对于某些特别依赖于Redis的项目而言，仅仅依靠过期KEY清理是不够的，内存可能很快就达到上限。因此Redis允许设置内存告警阈值，当内存使用达到阈值时就会主动挑选部分KEY删除以释放更多内存。这叫做<strong>内存淘汰</strong>机制。</p><h3 id="_2-1-内存淘汰时机" tabindex="-1"><a class="header-anchor" href="#_2-1-内存淘汰时机"><span>2.1 内存淘汰时机</span></a></h3><p>那么问题来了，当内存达到阈值时执行内存淘汰，但问题是Redis什么时候会执去判断内存是否达到预警呢？</p><p>Redis每次执行任何命令时，都会判断内存是否达到阈值：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// server.c中处理命令的部分源码</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">processCommand</span><span class="token punctuation">(</span>client <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ... 略</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>maxmemory <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>server<span class="token punctuation">.</span>lua_timedout<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调用performEvictions()方法尝试进行内存淘汰</span></span>
<span class="line">        <span class="token keyword">int</span> out_of_memory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">performEvictions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> EVICT_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// ... 略</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>out_of_memory <span class="token operator">&amp;&amp;</span> reject_cmd_on_oom<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 如果内存依然不足，直接拒绝命令</span></span>
<span class="line">            <span class="token function">rejectCommand</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> shared<span class="token punctuation">.</span>oomerr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-淘汰策略" tabindex="-1"><a class="header-anchor" href="#_2-2-淘汰策略"><span>2.2 淘汰策略</span></a></h3><p>好了，知道什么时候尝试淘汰了，那具体Redis是如何判断该淘汰哪些<code>Key</code>的呢？</p><p>Redis支持8种不同的内存淘汰策略：</p><ul><li><code>noeviction</code>： 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。</li><li><code>volatile\`\`-ttl</code>： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li><code>allkeys\`\`-random</code>：对全体key ，随机进行淘汰。也就是直接从db-&gt;dict中随机挑选</li><li><code>volatile-random</code>：对设置了TTL的key ，随机进行淘汰。也就是从db-&gt;expires中随机挑选。</li><li><code>allkeys-lru</code>： 对全体key，基于LRU算法进行淘汰</li><li><code>volatile-lru</code>： 对设置了TTL的key，基于LRU算法进行淘汰</li><li><code>allkeys-lfu</code>： 对全体key，基于LFU算法进行淘汰</li><li><code>volatile-lfu</code>： 对设置了TTL的key，基于LFI算法进行淘汰</li></ul><p>比较容易混淆的有两个算法：</p><ul><li><strong>LRU</strong>（<strong><code>L</code></strong><code>east </code><strong><code>R</code></strong><code>ecently </code><strong><code>U</code></strong><code>sed</code>），最近最久未使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</li><li><strong>LFU</strong>（<strong><code>L</code></strong><code>east </code><strong><code>F</code></strong><code>requently </code><strong><code>U</code></strong><code>sed</code>），最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高。</li></ul><p>Redis怎么知道某个KEY的<code>最近一次访问时间</code>或者是<code>访问频率</code>呢？</p><p>还记不记得之前讲过的RedisObject的结构？</p><p>回忆一下：</p><p><img src="`+t+'" alt="image-20250624164611191"></p><p>其中的<code>lru</code>就是记录最近一次访问时间和访问频率的。当然，你选择<code>LRU</code>和<code>LFU</code>时的记录方式不同：</p><ul><li><strong>LRU</strong>：以秒为单位记录最近一次访问时间，长度24bit</li><li><strong>LFU</strong>：高16位以分钟为单位记录最近一次访问时间，低8位记录逻辑访问次数</li></ul><p>时间就不说了，那么逻辑访问次数又是怎么回事呢？8位无符号数字最大才255，访问次数超过255怎么办？</p><p>这就要聊起Redis的<strong>逻辑访问次数</strong>算法了，LFU的访问次数之所以叫做<strong>逻辑访问次数</strong>，是因为并不是每次key被访问都计数，而是通过运算：</p><ul><li>① 生成<code>[0,1)</code>之间的随机数<code>R</code></li><li>② 计算 <code>1/(``旧次数`` * lfu_log_factor + 1)</code>，记录为<code>P</code>， <code>lfu_log_factor</code>默认为10</li><li>③ 如果 <code>R</code> &lt; <code>P </code>，则计数器 <code>+1</code>，且最大不超过255</li><li>④ 访问次数会随时间衰减，距离上一次访问时间每隔 <code>lfu_decay_time</code> 分钟(默认1) ，计数器<code>-1</code></li></ul><p>显然LFU的基于访问频率的统计更符合我们的淘汰目标，因此<strong>官方推荐使用LFU算法。</strong></p><p>算法我们弄明白了，不过这里大家要注意一下：Redis中的<code>KEY</code>可能有数百万甚至更多，每个KEY都有自己访问时间或者逻辑访问次数。我们要找出时间最早的或者访问次数最小的，难道要把Redis中<strong>所有数据排序</strong>？</p><p>要知道Redis的内存淘汰是在每次执行命令时处理的。如果每次执行命令都先对全量数据做内存排序，那命令的执行时长肯定会非常长，这是不现实的。</p><p>所以Redis采取的是<strong>抽样法</strong>，即每次抽样一定数量（<code>maxmemory_smples</code>）的key，然后基于内存策略做排序，找出淘汰优先级最高的，删除这个key。这就导致Redis的算法并不是真正的<strong>LRU</strong>，而是一种基于抽样的<strong>近似LRU算法</strong>。</p><p>不过，在Redis3.0以后改进了这个算法，引入了一个淘汰候选池，抽样的key要与候选池中的key比较淘汰优先级，优先级更高的才会被放入候选池。然后在候选池中找出优先级最高的淘汰掉，这就使算法的结果更接近与真正的LRU算法了。特别是在抽样值较高的情况下（例如10），可以达到与真正的LRU接近的效果。</p><p>这也是官方给出的真正LRU与近似LRU的结果对比：</p><p><img src="'+l+'" alt="image-20250624164621774"></p><p>你可以在图表中看到三种颜色的点形成三个不同的带，每个点就是一个加入的<code>KEY</code>。</p><ul><li>浅灰色带是被驱逐的对象</li><li>灰色带是没有被驱逐的对象</li><li>绿色带是被添加的对象</li></ul><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结"><span>3 总结</span></a></h2><blockquote><p><strong>面试题</strong>：<strong>Redis如何判断KEY是否过期呢？</strong></p><p><strong>答</strong>：在Redis中会有两个Dict，也就是HashTable，其中一个记录KEY-VALUE键值对，另一个记录KEY和过期时间。要判断一个KEY是否过期，只需要到记录过期时间的Dict中根据KEY查询即可。</p></blockquote><blockquote><p><strong>面试题</strong>：<strong>Redis何时删除过期KEY？如何删除？</strong></p><p><strong>答</strong>：Redis的过期KEY处理有两种策略，分别是惰性删除和周期删除。</p><p><strong>惰性删除</strong>是指在每次用户访问某个KEY时，判断KEY的过期时间：如果过期则删除；如果未过期则忽略。</p><p><strong>周期删除</strong>有两种模式：</p><ul><li><strong>SLOW</strong>模式：通过一个定时任务，定期的抽样部分带有TTL的KEY，判断其是否过期。默认情况下定时任务的执行频率是每秒10次，但每次执行不能超过25毫秒。如果执行抽样后发现时间还有剩余，并且过期KEY的比例较高，则会多次抽样。</li><li><strong>FAST</strong>模式：在Redis每次处理NIO事件之前，都会抽样部分带有TTL的KEY，判断是否过期，因此执行频率较高。但是每次执行时长不能超过1ms，如果时间充足并且过期KEY比例过高，也会多次抽样</li></ul></blockquote><blockquote><p><strong>面试题</strong>：<strong>当Redis内存不足时会怎么做？</strong></p><p><strong>答</strong>：这取决于配置的内存淘汰策略，Redis支持很多种内存淘汰策略，例如LRU、LFU、Random. 但默认的策略是直接拒绝新的写入请求。而如果设置了其它策略，则会在每次执行命令后判断占用内存是否达到阈值。如果达到阈值则会基于配置的淘汰策略尝试进行内存淘汰，直到占用内存小于阈值为止。</p></blockquote><blockquote><p><strong>面试题</strong>：<strong>那你能聊聊LRU和LFU吗？</strong></p><p><strong>答</strong>：<code>LRU</code>是最近最久未使用。Redis的Key都是RedisObject，当启用LRU算法后，Redis会在Key的头信息中使用24个bit记录每个key的最近一次使用的时间<code>lru</code>。每次需要内存淘汰时，就会抽样一部分KEY，找出其中空闲时间最长的，也就是<code>now - lru</code>结果最大的，然后将其删除。如果内存依然不足，就重复这个过程。</p><p>由于采用了抽样来计算，这种算法只能说是一种近似LRU算法。因此在Redis4.0以后又引入了<code>LFU</code>算法，这种算法是统计最近最少使用，也就是按key的访问频率来统计。当启用LFU算法后，Redis会在key的头信息中使用24bit记录最近一次使用时间和逻辑访问频率。其中高16位是以分钟为单位的最近访问时间，后8位是逻辑访问次数。与LFU类似，每次需要内存淘汰时，就会抽样一部分KEY，找出其中逻辑访问次数最小的，将其淘汰。</p></blockquote><blockquote><p><strong>面试题</strong>：<strong>逻辑访问次数是如何计算的？</strong></p><p><strong>答</strong>：由于记录访问次数的只有<code>8bit</code>，即便是无符号数，最大值只有255，不可能记录真实的访问次数。因此Redis统计的其实是逻辑访问次数。这其中有一个计算公式，会根据当前的访问次数做计算，结果要么是次数<code>+1</code>，要么是次数不变。但随着当前访问次数越大，<code>+1</code>的概率也会越低，并且最大值不超过255.</p><p>除此以外，逻辑访问次数还有一个衰减周期，默认为1分钟，即每隔1分钟逻辑访问次数会<code>-1</code>。这样逻辑访问次数就能基本反映出一个<code>key</code>的访问热度了。</p></blockquote>',74)]))}const r=n(o,[["render",i]]),u=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day10_RedisInterview/5-RedisInterview.html","title":"Redis内存回收","lang":"en-US","frontmatter":{"title":"Redis内存回收","date":"2025/03/06"},"headers":[{"level":2,"title":"1 内存过期处理","slug":"_1-内存过期处理","link":"#_1-内存过期处理","children":[{"level":3,"title":"1.1 过期命令","slug":"_1-1-过期命令","link":"#_1-1-过期命令","children":[]},{"level":3,"title":"1.2 过期策略","slug":"_1-2-过期策略","link":"#_1-2-过期策略","children":[]}]},{"level":2,"title":"2 内存淘汰策略","slug":"_2-内存淘汰策略","link":"#_2-内存淘汰策略","children":[{"level":3,"title":"2.1 内存淘汰时机","slug":"_2-1-内存淘汰时机","link":"#_2-1-内存淘汰时机","children":[]},{"level":3,"title":"2.2 淘汰策略","slug":"_2-2-淘汰策略","link":"#_2-2-淘汰策略","children":[]}]},{"level":2,"title":"3 总结","slug":"_3-总结","link":"#_3-总结","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day10_RedisInterview/5-RedisInterview.md","git":{"createdTime":1741251281000,"updatedTime":1750756522000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{r as comp,u as data};
