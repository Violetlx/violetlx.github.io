import{_ as n,c as a,b as t,o as e}from"./app-CNHi2u4I.js";const p="/assets/image-20250624144858029-lFwBPFIR.png",o="/assets/image-20250624144940391-BZH3SQci.png",l="/assets/image-20250624145014033-BIRwLI-5.png",i="/assets/image-20250624145045784-Caj4Wbk7.png",c="/assets/image-20250624145056455-B0FPFGPL.png",u="/assets/image-20250624145837365-D-v5urLr.png",r={};function d(k,s){return e(),a("div",null,s[0]||(s[0]=[t(`<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/kitten-3840x2160-adorable-minimalist-cute-charming-26377.jpg" alt="小猫 可爱的 极简主义者 可爱的 充满活力"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 新增文档</p><p>2 查询文档</p><p>3 删除文档</p><p>4 修改文档</p><p>5 批处理</p><p>6 总结</p></div><p>有了索引库，接下来就可以向索引库中添加数据了。</p><p>Elasticsearch中的数据其实就是JSON风格的文档。操作文档自然保护<code>增</code>、<code>删</code>、<code>改</code>、<code>查</code>等几种常见操作，我们分别来学习。</p><h2 id="_1-新增文档" tabindex="-1"><a class="header-anchor" href="#_1-新增文档"><span>1 新增文档</span></a></h2><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /索引库名/_doc/文档id</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;字段1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;字段2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;字段3&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;子属性1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值3&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;子属性2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值4&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /heima/_doc/<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员Java讲师&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>响应：</strong></p><p><img src="`+p+`" alt="image-20250624144858029"></p><h2 id="_2-查询文档" tabindex="-1"><a class="header-anchor" href="#_2-查询文档"><span>2 查询文档</span></a></h2><p>根据rest风格，新增是post，查询应该是get，不过查询一般都需要条件，这里我们把文档id带上。</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /<span class="token punctuation">{</span>索引库名称<span class="token punctuation">}</span>/_doc/<span class="token punctuation">{</span>id<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token constant">GET</span> <span class="token operator">/</span>heima<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>查看结果：</strong></p><p><img src="`+o+`" alt="image-20250624144940391"></p><h2 id="_3-删除文档" tabindex="-1"><a class="header-anchor" href="#_3-删除文档"><span>3 删除文档</span></a></h2><p>删除使用DELETE请求，同样，需要根据id进行删除：</p><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token constant">DELETE</span> <span class="token operator">/</span><span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span><span class="token operator">/</span>_doc<span class="token operator">/</span>id值</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">DELETE /heima/_doc/<span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>结果：</strong></p><p><img src="`+l+`" alt="image-20250624145014033"></p><h2 id="_4-修改文档" tabindex="-1"><a class="header-anchor" href="#_4-修改文档"><span>4 修改文档</span></a></h2><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>局部修改：修改文档中的部分字段</li></ul><h3 id="_4-1-全量修改" tabindex="-1"><a class="header-anchor" href="#_4-1-全量修改"><span>4.1 全量修改</span></a></h3><p>全量修改是覆盖原来的文档，其本质是两步操作：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_doc/文档id</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;字段1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;字段2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;值2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ... 略</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /heima/_doc/<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员高级Java讲师&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<code>id</code>为<code>1</code>的文档已经被删除，所以第一次执行时，得到的反馈是<code>created</code>：</p><p><img src="`+i+'" alt="image-20250624145045784"></p><p>所以如果执行第2次时，得到的反馈则是<code>updated</code>：</p><p><img src="'+c+`" alt="image-20250624145056455"></p><h3 id="_4-2-局部修改" tabindex="-1"><a class="header-anchor" href="#_4-2-局部修改"><span>4.2 局部修改</span></a></h3><p>局部修改是只修改指定id匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_update/文档id</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span> <span class="token string">&quot;新的值&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /heima/_update/<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ZhaoYun@itcast.cn&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果</strong>：</p><p><img src="`+u+`" alt="image-20250624145837365"></p><h2 id="_5-批处理" tabindex="-1"><a class="header-anchor" href="#_5-批处理"><span>5 批处理</span></a></h2><p>批处理采用POST请求，基本语法如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token constant">POST</span> _bulk</span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;field1&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;delete&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;create&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;3&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;field1&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;value3&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;update&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token string">&quot;doc&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;field2&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>index</code>代表新增操作 <ul><li><code>_index</code>：指定索引库名</li><li><code>_id</code>指定要操作的文档id</li><li><code>{ &quot;field1&quot; : &quot;value1&quot; }</code>：则是要新增的文档内容</li></ul></li><li><code>delete</code>代表删除操作 <ul><li><code>_index</code>：指定索引库名</li><li><code>_id</code>指定要操作的文档id</li></ul></li><li><code>update</code>代表更新操作 <ul><li><code>_index</code>：指定索引库名</li><li><code>_id</code>指定要操作的文档id</li><li><code>{ &quot;doc&quot; : {&quot;field2&quot; : &quot;value2&quot;} }</code>：要更新的文档字段</li></ul></li></ul><p>示例，批量新增：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token constant">POST</span> <span class="token operator">/</span>_bulk</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;index&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;heima&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员C++讲师&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ww@itcast.cn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;五&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lastName&quot;</span><span class="token operator">:</span><span class="token string">&quot;王&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;index&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;heima&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员前端讲师&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan@itcast.cn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lastName&quot;</span><span class="token operator">:</span><span class="token string">&quot;张&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>批量删除：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token constant">POST</span> <span class="token operator">/</span>_bulk</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;delete&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;heima&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;delete&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;heima&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6 总结</span></a></h2><p>文档操作有哪些？</p><ul><li>创建文档：<code>POST /{索引库名}/_doc/文档id { json文档 }</code></li><li>查询文档：<code>GET /{索引库名}/_doc/文档id</code></li><li>删除文档：<code>DELETE /{索引库名}/_doc/文档id</code></li><li>修改文档： <ul><li>全量修改：<code>PUT /{索引库名}/_doc/文档id { json文档 }</code></li><li>局部修改：<code>POST /{索引库名}/\`\`_update\`\`/文档id { &quot;doc&quot;: {字段}}</code></li></ul></li></ul>`,62)]))}const q=n(r,[["render",d]]),m=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day08_Elasticsearch/3-Elasticsearch.html","title":"文档操作","lang":"en-US","frontmatter":{"title":"文档操作","date":"2025/03/06"},"headers":[{"level":2,"title":"1 新增文档","slug":"_1-新增文档","link":"#_1-新增文档","children":[]},{"level":2,"title":"2 查询文档","slug":"_2-查询文档","link":"#_2-查询文档","children":[]},{"level":2,"title":"3 删除文档","slug":"_3-删除文档","link":"#_3-删除文档","children":[]},{"level":2,"title":"4 修改文档","slug":"_4-修改文档","link":"#_4-修改文档","children":[{"level":3,"title":"4.1 全量修改","slug":"_4-1-全量修改","link":"#_4-1-全量修改","children":[]},{"level":3,"title":"4.2 局部修改","slug":"_4-2-局部修改","link":"#_4-2-局部修改","children":[]}]},{"level":2,"title":"5 批处理","slug":"_5-批处理","link":"#_5-批处理","children":[]},{"level":2,"title":"6 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day08_Elasticsearch/3-Elasticsearch.md","git":{"createdTime":1741251281000,"updatedTime":1750752221000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{q as comp,m as data};
