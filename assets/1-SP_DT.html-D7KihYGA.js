import{_ as l,c as i,b as n,o as a}from"./app-D-Gd2pB2.js";const s="/assets/image-20250312112144267-SLxIUmdk.png",t="/assets/image-20250312113336510-B0GHfHbA.png",p="/assets/image-20250312113807831-DRv3wVeT.png",r="/assets/image-20250312113859869-BRqZDW-V.png",h="/assets/image-20250312113950080-BdFJBSKH.png",c="/assets/image-20250312120621993-DQGr8ikS.png",o={};function _(d,e){return a(),i("div",null,e[0]||(e[0]=[n('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/美女玻璃杯黄玉瑶-4k壁纸-3840x2400-1.jpg" alt="美女玻璃杯黄玉瑶 4k壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 服务保护方案</p><p>2 Sentinel</p><p>3 请求限流</p><p>4 线程隔离</p><p>5 服务熔断</p></div><p>在微服务远程调用的过程中，还存在几个问题需要解决。</p><p>首先是<strong>业务健壮性</strong>问题：</p><p>例如在之前的查询购物车列表业务中，购物车服务需要查询最新的商品信息，与购物车数据做对比，提醒用户。大家设想一下，如果商品服务查询时发生故障，查询购物车列表在调用商品服 务时，是不是也会异常？从而导致购物车查询失败。但从业务角度来说，为了提升用户体验，即便是商品查询失败，购物车列表也应该正确展示出来，哪怕是不包含最新的商品信息。</p><p>还有<strong>级联</strong> <strong>失败</strong> 问题：</p><p>还是查询购物车的业务，假如商品服务业务并发较高，占用过多Tomcat连接。可能会导致商品服务的所有接口响应时间增加，延迟变高，甚至是长时间阻塞直至查询失败。</p><p>此时查询购物车业务需要查询并等待商品查询结果，从而导致查询购物车列表业务的响应时间也变长，甚至也阻塞直至无法访问。而此时如果查询购物车的请求较多，可能导致购物车服务的Tomcat连接占用较多，所有接口的响应时间都会增加，整个服务性能很差， 甚至不可用。</p><p><img src="'+s+'" alt="image-20250312112144267"></p><p>依次类推，整个微服务群中与购物车服务、商品服务等有调用关系的服务可能都会出现问题，最终导致整个集群不可用。</p><p><img src="'+t+'" alt="image-20250312113336510"></p><p>这就是<strong>级联 ** <strong>失败</strong> 问题，或者叫</strong>雪崩**问题。</p><p>还有跨服务的事务问题：</p><p>比如昨天讲到过的下单业务，下单的过程中需要调用多个微服务：</p><ul><li>商品服务：扣减库存</li><li>订单服务：保存订单</li><li>购物车服务：清理购物车</li></ul><p>这些业务全部都是数据库的写操作，我们必须确保所有操作的同时成功或失败。但是这些操作在不同微服务，也就是不同的Tomcat，这样的情况如何确保事务特性呢？</p><p>这些问题都会在今天找到答案。</p><p>今天的内容会分成几部分：</p><ul><li>微服务保护 <ul><li>服务保护方案</li><li>请求限流</li><li>隔离和熔断</li></ul></li><li>分布式事务 <ul><li>初识分布式事务</li><li>Seata</li></ul></li></ul><p>通过今天的学习，你将能掌握下面的能力：</p><ul><li>知道雪崩问题产生原因及常见解决方案</li><li>能使用Sentinel实现服务保护</li><li>理解分布式事务产生的原因</li><li>能使用Seata解决分布式事务问题</li><li>理解AT模式基本原理</li></ul><p>保证服务运行的健壮性，避免级联失败导致的雪崩问题，就属于微服务保护。这章我们就一起来学习一下微服务保护的常见方案以及对应的技术。</p><h2 id="_1-服务保护方案" tabindex="-1"><a class="header-anchor" href="#_1-服务保护方案"><span>1 服务保护方案</span></a></h2><p>微服务保护的方案有很多，比如：</p><ul><li>请求限流</li><li>线程隔离</li><li>服务熔断</li></ul><p>这些方案或多或少都会导致服务的体验上略有下降，比如请求限流，降低了并发上限；线程隔离，降低了可用资源数量；服务熔断，降低了服务的完整度，部分服务变的不可用或弱可用。因此这些方案都属于服务<strong>降级</strong>的方案。但通过这些方案，服务的健壮性得到了提升，</p><p>接下来，我们就逐一了解这些方案的原理。</p><h3 id="_1-1-请求限流" tabindex="-1"><a class="header-anchor" href="#_1-1-请求限流"><span>1.1 请求限流</span></a></h3><p>服务故障最重要原因，就是并发太高！解决了这个问题，就能避免大部分故障。当然，接口的并发不是一直很高，而是突发的。因此请求限流，就是<strong>限制或控制</strong>接口访问的并发流量，避免服务因流量激增而出现故障。</p><p>请求限流往往会有一个限流器，数量高低起伏的并发请求曲线，经过限流器就变的非常平稳。这就像是水电站的大坝，起到蓄水的作用，可以通过开关控制水流出的大小，让下游水流始终维持在一个平稳的量。</p><p><img src="'+p+'" alt="image-20250312113807831"></p><h3 id="_1-2-线程隔离" tabindex="-1"><a class="header-anchor" href="#_1-2-线程隔离"><span>1.2 线程隔离</span></a></h3><p>当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。线程隔离正是解决这个问题的好办法。</p><p>线程隔离的思想来自轮船的舱壁模式：</p><p><img src="'+r+'" alt="image-20250312113859869"></p><p>轮船的船舱会被隔板分割为N个相互隔离的密闭舱，假如轮船触礁进水，只有损坏的部分密闭舱会进水，而其他舱由于相互隔离，并不会进水。这样就把进水控制在部分船体，避免了整个船舱进水而沉没。</p><p>为了避免某个接口故障或压力过大导致整个服务不可用，我们可以限定每个接口可以使用的资源范围，也就是将其“隔离”起来。</p><p><img src="'+h+'" alt="image-20250312113950080"></p><p>如图所示，我们给查询购物车业务限定可用线程数量上限为20，这样即便查询购物车的请求因为查询商品服务而出现故障，也不会导致服务器的线程资源被耗尽，不会影响到其它接口。</p><h3 id="_1-3-服务熔断" tabindex="-1"><a class="header-anchor" href="#_1-3-服务熔断"><span>1.3 服务熔断</span></a></h3><p>线程隔离虽然避免了雪崩问题，但故障服务（商品服务）依然会拖慢购物车服务（服务调用方）的接口响应速度。而且商品查询的故障依然会导致查询购物车功能出现故障，购物车业务也变的不可用了。</p><p>所以，我们要做两件事情：</p><ul><li><strong>编写服务降级逻辑</strong>：就是服务调用失败后的处理逻辑，根据业务场景，可以抛出异常，也可以返回友好提示或默认数据。</li><li><strong>异常统计和熔断</strong>：统计服务提供方的异常比例，当比例过高表明该接口会影响到其它服务，应该拒绝调用该接口，而是直接走降级逻辑。</li></ul><p><img src="'+c+'" alt="image-20250312120621993"></p><h2 id="_2-sentinel" tabindex="-1"><a class="header-anchor" href="#_2-sentinel"><span>2 Sentinel</span></a></h2><h3 id="_2-1-介绍和安装" tabindex="-1"><a class="header-anchor" href="#_2-1-介绍和安装"><span>2.1 介绍和安装</span></a></h3><h3 id="_2-2-微服务整合" tabindex="-1"><a class="header-anchor" href="#_2-2-微服务整合"><span>2.2 微服务整合</span></a></h3><h2 id="_3-请求限流" tabindex="-1"><a class="header-anchor" href="#_3-请求限流"><span>3 请求限流</span></a></h2><h2 id="_4-线程隔离" tabindex="-1"><a class="header-anchor" href="#_4-线程隔离"><span>4 线程隔离</span></a></h2><h3 id="_4-1-openfeign-整合-sentinel" tabindex="-1"><a class="header-anchor" href="#_4-1-openfeign-整合-sentinel"><span>4.1 OpenFeign 整合 Sentinel</span></a></h3><h3 id="_4-2-配置线程隔离" tabindex="-1"><a class="header-anchor" href="#_4-2-配置线程隔离"><span>4.2 配置线程隔离</span></a></h3><h2 id="_5-服务熔断" tabindex="-1"><a class="header-anchor" href="#_5-服务熔断"><span>5 服务熔断</span></a></h2><h3 id="_5-1-编写降级逻辑" tabindex="-1"><a class="header-anchor" href="#_5-1-编写降级逻辑"><span>5.1 编写降级逻辑</span></a></h3><h3 id="_5-2-服务熔断" tabindex="-1"><a class="header-anchor" href="#_5-2-服务熔断"><span>5.2 服务熔断</span></a></h3>',54)]))}const m=l(o,[["render",_],["__file","1-SP_DT.html.vue"]]),u=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day05_SP_DT/1-SP_DT.html","title":"微服务保护","lang":"en-US","frontmatter":{"title":"微服务保护","date":"2025/03/06"},"headers":[{"level":2,"title":"1 服务保护方案","slug":"_1-服务保护方案","link":"#_1-服务保护方案","children":[{"level":3,"title":"1.1 请求限流","slug":"_1-1-请求限流","link":"#_1-1-请求限流","children":[]},{"level":3,"title":"1.2 线程隔离","slug":"_1-2-线程隔离","link":"#_1-2-线程隔离","children":[]},{"level":3,"title":"1.3 服务熔断","slug":"_1-3-服务熔断","link":"#_1-3-服务熔断","children":[]}]},{"level":2,"title":"2 Sentinel","slug":"_2-sentinel","link":"#_2-sentinel","children":[{"level":3,"title":"2.1 介绍和安装","slug":"_2-1-介绍和安装","link":"#_2-1-介绍和安装","children":[]},{"level":3,"title":"2.2 微服务整合","slug":"_2-2-微服务整合","link":"#_2-2-微服务整合","children":[]}]},{"level":2,"title":"3 请求限流","slug":"_3-请求限流","link":"#_3-请求限流","children":[]},{"level":2,"title":"4 线程隔离","slug":"_4-线程隔离","link":"#_4-线程隔离","children":[{"level":3,"title":"4.1 OpenFeign 整合 Sentinel","slug":"_4-1-openfeign-整合-sentinel","link":"#_4-1-openfeign-整合-sentinel","children":[]},{"level":3,"title":"4.2 配置线程隔离","slug":"_4-2-配置线程隔离","link":"#_4-2-配置线程隔离","children":[]}]},{"level":2,"title":"5 服务熔断","slug":"_5-服务熔断","link":"#_5-服务熔断","children":[{"level":3,"title":"5.1 编写降级逻辑","slug":"_5-1-编写降级逻辑","link":"#_5-1-编写降级逻辑","children":[]},{"level":3,"title":"5.2 服务熔断","slug":"_5-2-服务熔断","link":"#_5-2-服务熔断","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day05_SP_DT/1-SP_DT.md","git":{"createdTime":1741251281000,"updatedTime":1741753242000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{m as comp,u as data};
