import{_ as a,c as t,b as n,o as p}from"./app-B_5tQx1u.js";const l="/assets/image-20220828153148951-lTP9aEfd.png",e="/assets/image-20220828163612183-BhdKHUxJ.png",m="/assets/image-20220828171716277-irJ-sy9t.png",i="/assets/image-20221009163152277-2cBT1THR.png",c="/assets/image-20221009165735723-B3vPfyoV.png",o="/assets/image-20221009173426713-ltRVgLVR.png",r={};function h(g,s){return p(),t("div",null,s[0]||(s[0]=[n('<p><img src="https://bizhi1.com/wp-content/uploads/2024/08/ghibli-inspired-forest-desktop-wallpaper-4k-small.jpg" alt="吉卜力风格森林桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul><li>虚拟存储器</li><li>高速缓存存储器</li></ul></div><blockquote><p>多级存储体系：成本，容量，速度折中的结果</p><p>虚拟存储器：解决主存容量不足问题，在主存和辅存之间增加软硬件设备，让主存和辅存构成一个整体</p><p>Cache存储器：由硬件实现，解决CPU与内存部件的速度差</p><p>存储体系性能参数：</p><ol><li>平均价格</li><li>命中率</li><li>平均访问周期</li></ol></blockquote><h2 id="虚拟存储器" tabindex="-1"><a class="header-anchor" href="#虚拟存储器"><span><strong>虚拟存储器</strong></span></a></h2><p>（解决空间不足问题）</p><p>虚拟存储器：自动实现部分装入和部分替换功能，从逻辑上为用户提供一个比物理存储容量大的存储空间。虚拟存储区的容量与物理主存大小无关，受限于计算机地址结构和可用磁盘容量</p><p><em>虚拟存储器通过设置地址映像表机构来实现逻辑地址与物理地址的转换与定位</em></p><ul><li><p><strong>段式管理</strong></p><blockquote><p><em>将程序划分单独的段，该段的逻辑地址以起点为0进行编址，当由辅存载入主存时基址加上段内逻辑地址形成在主存中物理地址</em></p><p>段表：记录程序段与基址的映射关系</p><p>优点：使大程序模块化，使其程序空间与主存容量无关，以段为单位实现存储保护</p><p>缺点：段表内容过大，增加辅助硬件开销，降低查表速度，存在碎片空间</p></blockquote></li><li><p><strong>页式管理</strong></p><blockquote><p><em>把存储空间和程序空间划分等大固定的页，按页顺序编号，主存单元地址 = 页内地址+页号 组成</em></p><p>优点：空间利用率高于段式管理，地址转换速度高于段式</p></blockquote></li><li><p><strong>段页式管理</strong></p><blockquote><p><em>将程序按段分块，在将段分页(页长相等)</em></p><p>逻辑地址：<img src="'+l+'" alt="images/4-Architecture/image-20220828153148951.png"></p><p>段表记录段号，页表长度，页表实际存放块号（页表起始地址），</p><ul><li>内存划分：按页式存储管理方案</li><li>内存分配：以页为单位进行分配</li></ul></blockquote></li></ul><p><strong>页式虚拟存储器映像和转变</strong>（解决实页冲突）</p><ul><li><p>页表法（全相联映像）</p><blockquote><p>仅当一个任务要求同时调入主存页数的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><msub><mi>n</mi><mi>v</mi></msub></msup></mrow><annotation encoding="application/x-tex">2^{n_v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>时才会发生页面冲突</p></blockquote></li><li><p>目录表法</p><blockquote><p>查找时使用一对多进行匹配查询是否载入主存</p></blockquote></li></ul><p><strong>页面替换算法</strong></p><ul><li><p>随机算法（RAND) 命中率最低</p></li><li><p>先进先出（FIFO)</p><blockquote><p>每次选择淘汰的页面是最早进入内存的页面</p></blockquote></li><li><p>近期最少使用算法（LRU)</p><blockquote><p>每次淘汰页面是最近最久未使用的页面，<strong>访问字段记录上次被访问时间</strong>，使用逆推判断时间最早的内存块</p></blockquote></li><li><p>优化替换算法(OPT)</p><blockquote><p><strong>每次选择最长时间内不再被访问的页面，</strong> 缺页率 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>缺页中断次数</mtext><mtext>页面访问次数</mtext></mfrac></mrow><annotation encoding="application/x-tex">\\frac{缺页中断次数}{页面访问次数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">页面访问次数</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">缺页中断次数</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><hr><p>需要知道进程访问页面的顺序，操作系统无法预知进程访问的页面序列，<strong>无法实现</strong></p></blockquote></li></ul><hr><p><strong>虚拟存储器工作流程</strong></p><p><img src="'+e+'" alt="images/4-Architecture/image-20220828163612183.png"></p><ol><li>将多用户虚拟地址转换为主存地址</li><li>判断虚页此时是否在主存中</li><li>虚地址转换为辅存地址</li><li>查外页表判断虚页是否载入辅存，没有则程序执行异常</li><li>告诉IO处理机到辅存中调页载入主存</li></ol><hr><p><strong>页面失效处理（内存抖动）</strong></p><ul><li>后援寄存器（把发生页面失效时现场指令记录下来，等到重新调页后在回复运行）</li><li>预判技术（判断所需操作条件是否都在主存中）</li><li>替换算法</li></ul><p><strong>提高虚拟存储器等效访问速度方法</strong></p><ul><li>块表（使用硬件快页表访问速度，相当于中间缓存）</li><li>散列查找</li></ul><p><strong>影响主存命中率和CPU效率因素</strong></p><ol><li><strong>页面大小</strong>（页地址在同一个页中，页面越大命中率高，不在同一页中，命中率较小）</li><li>**页面调度算法</li></ol><h2 id="高速缓冲存储器" tabindex="-1"><a class="header-anchor" href="#高速缓冲存储器"><span><strong>高速缓冲存储器</strong></span></a></h2><p>（解决CPU与主存速度差异问题）</p><p><em>弥补主存速度不足，在CPU与主存之间设置一个高速，小容量的存储部件，速度接近于CPU，容量记为主存</em></p><p>高速缓存（Cache）用来存放当前最活跃的程序和数据，其特点是:容量一般在几千字节到几兆字节之间，速度一般比主存块五到十倍，其内容是主存局部域的副本，对程序员来说是透明的</p><p><img src="'+m+'" alt="images/4-Architecture/image-20220828171716277.png"></p><p><strong>Cache地址映像与变换</strong></p><p>地址长度(位数) = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mtext>，其中</mtext><mi>N</mi><mtext>为容量，</mtext><mo stretchy="false">(</mo><mtext>单位</mtext><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log_2 N，其中N为容量，(单位 B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord cjk_fallback">，其中</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord cjk_fallback">为容量，</span><span class="mopen">(</span><span class="mord cjk_fallback">单位</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span></p><p>主存的块内地址与Cache块内地址相等</p><ul><li><p>全相联映像和变换</p><blockquote><p>块冲突低最低，空间利用率最高，映像表（块表）容量过大，转换速度慢，适合容量小的Cache</p><p><img src="'+i+'" alt="images/4-Architecture/image-20221009163152277.png"></p><ul><li>块号S与Cache行号相等时命中</li><li>块表容量=Cache行号 * 主存块号位数</li></ul></blockquote></li><li><p>直接映像和变换 （主存块只能映射到指定Cache行中）</p><blockquote><p>节省所需硬件，块冲突高，直接映射方式一般用于大容量的cache中</p><p><img src="'+c+'" alt="images/4-Architecture/image-20221009165735723.png"></p><ul><li>主存块号 j，与Cache行号<code>i</code>映射关系为 i = j mod <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span> 为Cache块数，s-m为主存标记位长度</li><li>块表长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span> ， 块表容量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2^m \\times (s-m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></li></ul></blockquote></li><li><p>组相联映像和变换 (将cache <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span>行分成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">2^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span> 组，每组有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>m</mi><mo>−</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{m-d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>行)</p><blockquote><p>减少块冲突概率，提高Cache空间利用率，<strong>地址转变比全相联映像快</strong></p><p><img src="'+o+'" alt="images/4-Architecture/image-20221009173426713.png"></p><ul><li>主存块号<code>j</code>与Cache组号<code>q</code>映射关系为 q = j mod <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">2^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span> ，</li></ul></blockquote></li></ul><p><strong>Cache存储器的透明性及性能分析</strong></p><p><em>解决CPU与主存数据变化不一直问题</em></p><ul><li><p>写回法</p><blockquote><p>CPU进行写操作时，数据只写入Cache，仅当需要替换时，才写回主存</p><p>适用于单处理器机器（节约成本）</p></blockquote></li><li><p>直达法</p><blockquote><p>双写策略，当CPU写入Cache的同时也写入主存，直接替换</p></blockquote></li><li><p>播写法</p><blockquote><p>多核CPU环境下，CPU将数据写入Cache时，将写的信息传播到所有记录此数据的Cache部件，将其设置为失效，以便其他CPU读取时候从主存中获取最新更改的数据</p></blockquote></li></ul><p><strong>三级存储体系</strong></p><ul><li><p>物理地址Cache</p><blockquote><p>将主存物理地址通过MMU转为Cache地址才能访问Cache，将增大Cache访问时间</p></blockquote></li><li><p>虚地址Cache</p><blockquote><p>Cache-&gt;主存-&gt;辅存 构成</p></blockquote></li><li><p>全Cache</p></li></ul>',37)]))}const d=a(r,[["render",h]]),k=JSON.parse('{"path":"/docs/Computer/Computer/3_Architecture/4-Architecture.html","title":"存储体系","lang":"en-US","frontmatter":{"title":"存储体系","date":"2025/07/04"},"headers":[{"level":2,"title":"虚拟存储器","slug":"虚拟存储器","link":"#虚拟存储器","children":[]},{"level":2,"title":"高速缓冲存储器","slug":"高速缓冲存储器","link":"#高速缓冲存储器","children":[]}],"filePathRelative":"docs/Computer/Computer/3_Architecture/4-Architecture.md","git":{"createdTime":1751621258000,"updatedTime":1751621258000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{d as comp,k as data};
