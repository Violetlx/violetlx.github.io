import{_ as e,c as o,b as i,a as s,d as t,e as p,r as l,o as r}from"./app-CezBFXHK.js";const c="/assets/image-20250624160131344-DNHVvUNB.png",u="/assets/image-20250624160143128-BBAE52Hr.png",g="/assets/image-20250624160236230-C9LQUg6A.png",d="/assets/image-20250624160225161-CXcMNlaG.png",m="/assets/image-20250624160208210-BTrLG692.png",h={},k={href:"https://www.elastic.co/guide/en/elasticsearch/client/java-api/7.12/java-compound-queries.html",target:"_blank",rel:"noopener noreferrer"};function v(q,n){const a=l("ExternalLinkIcon");return r(),o("div",null,[n[1]||(n[1]=i('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/kitten-3840x2160-adorable-minimalist-cute-charming.jpg" alt="小猫 可爱的 极简主义者 可爱的 迷人 纯色背景"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 实现搜索接口</p><p>2 过滤条件聚合</p><p>3 竞价排名</p></div><p>Elasticsearch的基本语法我们已经学完，足以应对大多数搜索业务需求了。接下来大家就可以基于学习的知识实现商品搜索的业务了。</p><p>在昨天的作业中要求大家拆分一个独立的微服务：<code>search-service</code>，在这个微服务中实现搜索数据的导入、商品数据库数据与elasticsearch索引库数据的同步。</p><p>接下来的搜索功能也要在<code>search-service</code>服务中实现。</p><h2 id="_1-实现搜索接口" tabindex="-1"><a class="header-anchor" href="#_1-实现搜索接口"><span>1 实现搜索接口</span></a></h2><p>在黑马商城的搜索页面，输入关键字，点击搜索时，会发现前端会发起查询商品的请求：</p><p><img src="'+c+'" alt="image-20250624160131344"></p><p>请求的接口信息如下：</p><ul><li><strong>请求方式</strong>：<code>GET</code></li><li><strong>请求路径</strong>：<code>/search/list</code></li><li><strong>请求参数</strong>： <ul><li><strong>key</strong>：搜索关键字</li><li><strong>pageNo</strong>：页码</li><li><strong>pageSize</strong>：每页大小</li><li><strong>sortBy</strong>：排序字段</li><li><strong>isAsc</strong>：是否升序</li><li><strong>category</strong>：分类</li><li><strong>brand</strong>：品牌</li><li><strong>minPrice</strong>：价格最小值</li><li><strong>maxPrice</strong>：价格最大值</li></ul></li></ul><p>请求参数可以参考原本<code>item-service</code>中<code>com.hmall.item.controller.SearchController</code>类中的基于数据库查询的接口：</p><p><img src="'+u+'" alt="image-20250624160143128"></p><h2 id="_2-过滤条件聚合" tabindex="-1"><a class="header-anchor" href="#_2-过滤条件聚合"><span>2 过滤条件聚合</span></a></h2><p>搜索页面的过滤项目前是写死的：</p><p><img src="'+g+'" alt="image-20250624160236230"></p><p>但是大家思考一下，随着搜索条件的变化，过滤条件展示的过滤项是不是应该跟着变化。</p><p>例如搜索<code>电视</code>，那么搜索结果中展示的肯定只有电视，而此时过滤条件中的<strong>分类</strong>就不能还出现手机、拉杆箱等内容。过滤条件的<strong>品牌</strong>中就不能出现与电视无关的品牌。而是应该展示搜索结果中存在的分类和品牌。</p><p>那么问题来，我们怎么知道搜索结果中存在哪些分类和品牌呢？</p><p>大家应该能想到，就是利用聚合，而且是带有限定条件的聚合。用户搜索的条件是什么，我们在对分类、品牌聚合时的条件也就是什么，这样就能统计出搜索结果中包含的分类、品牌了。</p><p>事实上，搜索时，前端已经发出了请求，尝试搜索栏中除价格以外的过滤项：</p><p><img src="'+d+'" alt="image-20250624160225161"></p><p>由于采用的是POST请求，所以参数在请求体中：</p><p><img src="'+m+`" alt="image-20250624160208210"></p><p>接口信息如下：</p><ul><li><strong>请求方式</strong>：<code>POST</code></li><li><strong>请求路径</strong>：<code>/search/filters</code></li><li><strong>请求参数</strong>： <ul><li><strong>key</strong>：搜索关键字</li><li><strong>pageNo</strong>：页码</li><li><strong>pageSize</strong>：每页大小</li><li><strong>sortBy</strong>：排序字段</li><li><strong>isAsc</strong>：是否升序</li><li><strong>category</strong>：分类</li><li><strong>brand</strong>：品牌</li><li><strong>minPrice</strong>：价格最小值</li><li><strong>maxPrice</strong>：价格最大值</li></ul></li></ul><p>可见参数与搜索参数一致，不过这里大家可以忽略分页和排序参数。</p><p>返回值参考这个格式：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;手机&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;曲面电视&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;拉杆箱&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;休闲鞋&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;休闲鞋&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;硬盘&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;真皮包&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;希捷&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小米&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;oppo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;新秀丽&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;锤子&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-竞价排名" tabindex="-1"><a class="header-anchor" href="#_3-竞价排名"><span>3 竞价排名</span></a></h2><p>elasticsearch的默认排序规则是按照相关性打分排序，而这个打分是可以通过API来控制的。详情可以参考复合查询中的算分函数查询（1.3.1小节）</p><p>对应的JavaAPI可以参考文档：</p>`,31)),s("p",null,[s("a",k,[n[0]||(n[0]=t("https://www.elastic.co/guide/en/elasticsearch/client/java-api/7.12/java-compound-queries.html")),p(a)])]),n[2]||(n[2]=s("p",null,[t("在商品的数据库表中，已经设计了"),s("code",null,"isAD"),t("字段来标记广告商品，请利用"),s("code",null,"function_score"),t("查询在原本搜索的结果基础上，让这些"),s("code",null,"isAD"),t("字段值为"),s("code",null,"true"),t("的商品排名到最前面。")],-1))])}const x=e(h,[["render",v]]),b=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day09_Elasticsearch02/4-Elasticsearch02.html","title":"作业","lang":"en-US","frontmatter":{"title":"作业","date":"2025/03/06"},"headers":[{"level":2,"title":"1 实现搜索接口","slug":"_1-实现搜索接口","link":"#_1-实现搜索接口","children":[]},{"level":2,"title":"2 过滤条件聚合","slug":"_2-过滤条件聚合","link":"#_2-过滤条件聚合","children":[]},{"level":2,"title":"3 竞价排名","slug":"_3-竞价排名","link":"#_3-竞价排名","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day09_Elasticsearch02/4-Elasticsearch02.md","git":{"createdTime":1741251281000,"updatedTime":1750752221000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{x as comp,b as data};
