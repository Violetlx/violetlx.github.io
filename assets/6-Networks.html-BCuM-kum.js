import{_ as i,c as t,b as p,o as s}from"./app-DlQzn5rm.js";const o="/assets/image-20230318210116496-Dueb9Oet.png",e="/assets/image-20230318224243794-D8PKahmO.png",r="/assets/image-20230318233652357-BPip8C_Y.png",n="/assets/image-20230319003222791-DuD7InN1.png",g="/assets/image-20230318204231636-Bojd64P0.png",a="/assets/image-20230318205212161-BuvFoxot.png",c={};function m(P,l){return s(),t("div",null,l[0]||(l[0]=[p('<p><img src="https://bizhi1.com/wp-content/uploads/2025/02/asuke-hypebeast-graffiti-pc-wallpaper-4k.jpg" alt="ASUKE HYPEBEAST 涂鸦 PC 壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul><li>TCP协议与UDP协议</li><li>UDP：无连接传输控制协议</li></ul></div><ul><li><p>主机之间进程通信</p></li><li><p>复用和分用（端口）</p><blockquote><p>复用：应用层进程复用同一个传输层进行通讯</p><p>分用：传输层从网络层收到数据后指明交付的进程</p><p>端口号：16bit存储: 0~65536</p><ol><li><p>服务端口号（固定）</p><blockquote><p>0~1023：系统应用使用的端口</p><ul><li>FTP：21</li><li>TELNET：23</li><li>SMTP：25</li><li>DNS：53</li><li>TFTP：69</li><li>HTTP：80</li><li>SNMP：161</li></ul><p>1024~49151：开放式应用端口号</p></blockquote></li><li><p>客户端口号 (49152~65535)</p><blockquote><p>客户端通信时候操作系统随机分配</p></blockquote></li><li><p>套接字（Socket）主机IP+端口号，<strong>允许同一个port绑定多个进程，但不能绑定同一个IP</strong></p></li></ol></blockquote></li><li><p>报文差错检测（TCP可靠传输）</p></li></ul><h2 id="tcp协议与udp协议" tabindex="-1"><a class="header-anchor" href="#tcp协议与udp协议"><span><strong>TCP协议与UDP协议</strong></span></a></h2><p>TCP：面向传输控制的协议（不提供广播和多播服务，时延长，传输可靠，适用于大文件传输）</p><ol><li><p>面向连接（虚拟电路）</p></li><li><p>点对点连接通信</p></li><li><p>提供可靠数据交付（可靠有序，不丢不重）</p></li><li><p>全双工通信（发送接收缓存）</p></li><li><p>面向字节流</p></li><li><p>TCP报文格式</p><p><img src="'+o+'" alt="images/6-Networks/image-20230318210116496.png"></p><ul><li><strong>seq序号：TCP报文分片标识</strong></li><li><strong>ack确认号：期望接收下一TCP报文标识（确认号N-1之前TCP报文都正确接收）</strong></li><li>数据偏移：记录TCP数据指针位置</li><li>控制位： <ol><li><strong>紧急位URG</strong>：紧急数据（发送方应用，不用在缓存中排队）</li><li><strong>确认位ACK</strong>：连接成功后TCP报文标识</li><li>推送位PSH：推送报文（交付方立即将TCP报文交付给应用层）</li><li>RST：TCP链接差错，必须释放连接在重新链接</li><li><strong>同步位SYN</strong>：标识TCP报文为连接请求或连接接收报文</li><li>**终止位FIN：**释放TCP链接</li></ol></li><li>接收窗口：允许接收方缓存TCP数据量（由发送方决定）</li><li>紧急指针：当URG=1时，标记TCP报文中紧急数据</li><li>选项：包含当前时间戳，报文最大长度，窗口扩大等信息</li></ul></li><li><p><strong>TCP连接管理</strong></p><p><strong>TCP发起连接</strong></p><ul><li><p>C/S服务方式：主动发起连接建立的应用为客户端，被动等待连接为服务器</p></li><li><p><img src="'+e+'" alt="images/6-Networks/image-20230318224243794.png"></p><ol><li><p>客户端发送请求报文（控制位<strong>SYN=1，确认位ACK=0</strong>，确认序号seq=x随机）</p></li><li><p>服务器为此次<strong>TCP连接分配接收缓存</strong>，并向客户端返回TCP确认报文（<strong>SYN=1，ACK=1</strong>，seq=y随机，<strong>ack=x+1</strong>）</p></li><li><p>客户端为此次<strong>TCP连接分配接收缓存</strong>（<strong>SYN=0，ACK=1，seq=x+1，ack=y+1</strong>）<strong>并携带数据</strong></p></li></ol></li></ul><p><em>SYN洪泛攻击：攻击者向服务器发送大量SYN连接请求而不确认，导致服务器重复发送ACK给攻击者，以致于服务器资源浪费宕机。SYN Cookie：对TCP三次握手协议进行更改，在服务器收到SYN包时不进行分配缓存，根据SYN包计算出cookie值响应客户端</em></p><hr><p><strong>TCP释放连接</strong>（客户端，服务器都能主动释放连接）</p><ul><li><img src="'+r+'" alt="images/6-Networks/image-20230318233652357.png"></li></ul><ol><li>客户端发送连接释放报文段（<strong>ACK=0，FIN=1，seq=u</strong>）</li><li>服务端回送一个确认报文段**（ACK=1，seq=v，ack=u+1）客户端到服务器方向连接被释放，服务器不接受来自客户端任何请求**</li><li>服务端发送链接释放报文**（FIN=1，ACK=1，seq=w，ack=u+1）服务器释放服务器到客户端连接**</li><li>客户端回送确认报文段（ACK=1，seq=u+1,ack=w+1)，等待计时器接收后释放连接（间隔时间内防止回收确认报文段丢失，判断依据是服务器是否重发第3步报文）</li></ol></li><li><p><strong>TCP可靠传输</strong></p><ul><li>校验（伪首部）</li><li>seq序号</li><li>ack确认</li><li>重传（TCP在规定时间内未接收到ack确认报文，则进行重传，RTTs平均加权往返时间，<strong>ack冗余确认</strong>）</li></ul></li><li><p><strong>TCP流量控制</strong>（滑动窗口流量控制,通链路层帧传输）</p></li><li><p><strong>TCP拥塞控制</strong>（资源需求总和&gt;可用资源，协调过多的数据发送到网络中）</p><p><img src="'+n+'" alt="images/6-Networks/image-20230319003222791.png"></p><ol><li>慢开始（逐步增加窗口大小）</li><li>拥塞判断（发生网络拥塞时记录窗口值，并将调整窗口为1）</li><li>重新执行1步骤，直到窗口到达上一次拥塞值时缓慢增加</li></ol></li></ol><h2 id="udp-无连接传输控制协议" tabindex="-1"><a class="header-anchor" href="#udp-无连接传输控制协议"><span><strong>UDP：无连接传输控制协议</strong></span></a></h2><p>（不可靠，时延小，适用于小文件传输）</p><ol><li><p>UDP无连接交互，减少开销和发送数据之间时延</p></li><li><p>不保证可靠交互</p></li><li><p>面向报文传输，适合数据量较少的应用通信（传输层对应用层的报文不做拆分处理，直到网络层进行拆分）</p></li><li><p>无网络拥塞控制</p></li><li><p>UDP首部开销小</p><p><img src="'+g+'" alt="images/6-Networks/image-20230318204231636.png"></p><p><img src="'+a+'" alt="images/6-Networks/image-20230318205212161.png"></p><p>UDP校验和：（信息摘要校验）</p><ol><li>发送端填上伪首部（源IP+目的IP+UDP协议+UPD长度+全0填充）</li></ol></li><li><p>UPD补0填充</p></li><li><p>UPD数据报和伪码求和取反得到校验和，将校验和填入UDP首部</p></li></ol>',9)]))}const C=i(c,[["render",m]]),T=JSON.parse('{"path":"/docs/Computer/Computer/2_Networks/6-Networks.html","title":"传输层","lang":"en-US","frontmatter":{"title":"传输层","date":"2025/07/04"},"headers":[{"level":2,"title":"TCP协议与UDP协议","slug":"tcp协议与udp协议","link":"#tcp协议与udp协议","children":[]},{"level":2,"title":"UDP：无连接传输控制协议","slug":"udp-无连接传输控制协议","link":"#udp-无连接传输控制协议","children":[]}],"filePathRelative":"docs/Computer/Computer/2_Networks/6-Networks.md","git":{"createdTime":1751621258000,"updatedTime":1751621258000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{C as comp,T as data};
