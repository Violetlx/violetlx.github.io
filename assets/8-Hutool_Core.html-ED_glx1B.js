import{_ as l,c,b as t,a,d as n,e,o,r as i}from"./app-fUCssiQP.js";const u={},r={href:"https://github.com/looly/hulu",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/looly/hulu",target:"_blank",rel:"noopener noreferrer"},d={href:"https://apidoc.gitee.com/loolly/hutool/cn/hutool/core/util/ClassUtil.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/evangel_z/article/details/7624503",target:"_blank",rel:"noopener noreferrer"};function v(b,s){const p=i("ExternalLinkIcon");return o(),c("div",null,[s[13]||(s[13]=t('<p><img src="https://bizhi1.com/wp-content/uploads/2024/06/mountain-sunrise-solitude-desktop-wallpaper-small.jpg" alt="山日出孤独桌面壁纸"></p><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 概述</p><p>② 字符串工具-StrUtil</p><p>③ 16进制工具-HexUtil</p><p>④ Escape工具-EscapeUtil</p><p>⑤ Hash算法-HashUtil</p><p>⑥ URL工具-URLUtil</p><p>⑦ XML工具-XmlUtil</p><p>⑧ 对象工具-ObjectUtil</p><p>⑨ 反射工具-ReflectUtil</p><p>⑩ 泛型类型工具-TypeUtil</p><p>⑪ 分页工具-PageUtil</p><p>⑫ 剪贴板工具-ClipboardUtil</p><p>⑬ 类工具-ClassUtil</p><p>⑭ 枚举工具-EnumUtil</p><p>⑮ 命令行工具-RuntimeUtil</p><p>⑯ 数字工具-NumberUtil</p><p>⑰ 数组工具-ArrayUtil</p><p>⑱ 随机工具-RandomUtil</p><p>⑲ 唯一ID工具-IdUtil</p><p>⑳ 压缩工具-ZipUtil</p><p>㉑ 引用工具-ReferenceUtil</p><p>㉒ 正则工具-ReUtil</p><p>㉓ 身份证工具-IdcardUtil</p><p>㉔ 信息脱敏工具-DesensitizedUtil</p><p>㉕ 社会信用代码工具-CreditCodeUtil</p><p>㉖ SPI加载工具-ServiceLoaderUtil</p><p>㉗ 字符编码工具-CharseUtil</p><p>㉘ 类加载工具-ClassLoaderUtil</p></div><h2 id="_13-类工具-classutil" tabindex="-1"><a class="header-anchor" href="#_13-类工具-classutil"><span>⑬ 类工具-ClassUtil</span></a></h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1 介绍</span></a></h3>',5)),a("p",null,[s[1]||(s[1]=n("这个工具主要是封装了一些反射的方法，使调用更加方便。而这个类中最有用的方法是 ")),s[2]||(s[2]=a("code",null,"scanPackage",-1)),s[3]||(s[3]=n(" 方法，这个方法会扫描 classpath 下所有类，这个再 Spring 中是特性之一，主要为 ")),a("a",r,[s[0]||(s[0]=n("Hulu")),e(p)]),s[4]||(s[4]=n(" 框架中类扫描的一个基础。下面介绍这个类中的方法。"))]),s[14]||(s[14]=t(`<h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2 使用</span></a></h3><p><strong>① getShortClassName</strong></p><p>获取完整类名的段格式如：<code>cn.hutool.core.util.StrUtil</code> -&gt; <code>c.h.c.u.StrUtil</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 getShortClassName</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取完整类名的短格式如：cn.hutool.core.util.StrUtil -&gt; c.h.c.u.StrUtil</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token string">&quot;com.hutool.core.tool.Main12&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> shortClassName <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getShortClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--shortClassName==&gt;&quot;</span><span class="token operator">+</span>shortClassName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Main12</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> shortName <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getShortClassName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--shortName==&gt;&quot;</span><span class="token operator">+</span>shortName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--shortClassName==&gt;c.h.c.t.Main12 </span></span>
<span class="line">        <span class="token comment">//test1--shortName==&gt;c.h.c.t.Main12</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② isAllAssignableFrom</strong></p><p>比较判断 types1 和 types2 两组类，如果 types1 中所有的类都与 types2 对应位置的类相同，或者是其父类或接口，则返回 true</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 isAllAssignableFrom</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//判断是否所有元素都是指定类型的父类或接口</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> isAllAssignableFrom <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">isAllAssignableFrom</span><span class="token punctuation">(</span>classes1<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--isAllAssignableFrom==&gt;&quot;</span><span class="token operator">+</span>isAllAssignableFrom<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> isAllAssignableFrom1 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">isAllAssignableFrom</span><span class="token punctuation">(</span>classes2<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--isAllAssignableFrom1==&gt;&quot;</span><span class="token operator">+</span>isAllAssignableFrom1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--isAllAssignableFrom==&gt;false</span></span>
<span class="line">        <span class="token comment">//test2--isAllAssignableFrom1==&gt;true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ isPrimitiveWrapper</strong></p><p>是否为包装类型</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3 isPrimitiveWrapper</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//判断是否为原始类型或原始类型包装类</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> isPrimitiveWrapper <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">isPrimitiveWrapper</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--isPrimitiveWrapper==&gt;&quot;</span><span class="token operator">+</span>isPrimitiveWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> isPrimitiveWrapper1 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">isPrimitiveWrapper</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--isPrimitiveWrapper1==&gt;&quot;</span><span class="token operator">+</span>isPrimitiveWrapper1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--isPrimitiveWrapper==&gt;false</span></span>
<span class="line">        <span class="token comment">//test3--isPrimitiveWrapper1==&gt;true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ isBasicType</strong></p><p>是否为基本类型（包括包装类和原始类）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 4 isBasicType</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//判断是否为原始类型或原始类型包装类</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> basicType <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">isBasicType</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--basicType==&gt;&quot;</span><span class="token operator">+</span>basicType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> basicType1 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">isBasicType</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--basicType1==&gt;&quot;</span><span class="token operator">+</span>basicType1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> basicType2 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">isBasicType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--basicType2==&gt;&quot;</span><span class="token operator">+</span>basicType2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test4--basicType==&gt;true</span></span>
<span class="line">        <span class="token comment">//test4--basicType1==&gt;true</span></span>
<span class="line">        <span class="token comment">//test4--basicType2==&gt;true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑤ getPackage</strong></p><p>获得给定类所在包的名称，例如： <code>cn.hutool.util.ClassUtil</code> -&gt; <code>cn.hutool.util</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 5 getPackage</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取包名</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> aPackage <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--aPackage==&gt;&quot;</span><span class="token operator">+</span>aPackage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> bPackage <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--bPackage==&gt;&quot;</span><span class="token operator">+</span>bPackage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test5--aPackage==&gt;java.lang</span></span>
<span class="line">        <span class="token comment">//test5--bPackage==&gt;java.lang</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑥ scanPackage 方法</strong></p>`,17)),a("p",null,[s[6]||(s[6]=n("此方法唯一的参数是包的名称，返回结果为此包及以下子包下所有的类。方法使用很简单，但是过程复杂一些，包扫描首先会调用 getClassPaths 方法获得 ClassPath，然后扫描 ClassPath ，如果是目录，扫描目录下的类文件，或者 jar 文件。如果是 jar 包，则直接从 jar 包中获取类名。这个方法的作用显而易见，就是要找出所有的类，在 Spring 中用于依赖注入，Hutool 在 ")),a("a",k,[s[5]||(s[5]=n("Hulu")),e(p)]),s[7]||(s[7]=n(" 中则用于找到Action类。当然，你也可以传一个")),s[8]||(s[8]=a("code",null,"ClassFilter",-1)),s[9]||(s[9]=n("对象，用于过滤不需要的类。"))]),s[15]||(s[15]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 6 scanPackage</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//扫描指定包下的所有类</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> classes <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">scanPackage</span><span class="token punctuation">(</span><span class="token string">&quot;cn.hutool.core.util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test6--aClass==&gt;&quot;</span><span class="token operator">+</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test6--aClass==&gt;class cn.hutool.core.util.EnumUtil</span></span>
<span class="line">        <span class="token comment">//test6--aClass==&gt;class cn.hutool.core.util.CreditCodeUtil</span></span>
<span class="line">        <span class="token comment">//test6--aClass==&gt;class cn.hutool.core.util.ModifierUtil$ModifierType</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑦ getClassPaths 方法</strong></p><p>此方法是获得当前线程的 ClassPath ，核心是 <code>Thread.currentThread().getContextClassLoader().getResources</code> 的调用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 7 getClassPaths</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取类路径</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> classPaths <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getClassPaths</span><span class="token punctuation">(</span><span class="token string">&quot;cn.hutool.core.util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> classPath <span class="token operator">:</span> classPaths<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test7--classPath==&gt;&quot;</span><span class="token operator">+</span>classPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test7--classPath==&gt;file:/E:/maven/repository/repository/cn/hutool/hutool-all/5.8.25/hutool-all-5.8.25.jar!/cn/hutool/core/util</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑧ getJavaClassPaths 方法</strong></p><p>此方法用于获得 Java 的系统变量定义的 ClassPath。</p><p>​</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 8 getJavaClassPaths</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取Java类路径</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> javaClassPaths <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getJavaClassPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> javaClassPath <span class="token operator">:</span> javaClassPaths<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test8--javaClassPath==&gt;&quot;</span><span class="token operator">+</span>javaClassPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test8--javaClassPath==&gt;E:\\Study\\JavaSkill\\Hutool\\target\\classes</span></span>
<span class="line">        <span class="token comment">//test8--javaClassPath==&gt;E:\\maven\\repository\\repository\\org\\springframework\\boot\\spring-boot-starter\\3.3.1\\spring-boot-starter-3.3.1.jar</span></span>
<span class="line">        <span class="token comment">//test8--javaClassPath==&gt;E:\\maven\\repository\\repository\\org\\springframework\\boot\\spring-boot\\3.3.1\\spring-boot-3.3.1.jar</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><p><strong>⑨ getClassLoader 和 getContextClassLoader 方法</strong></p><p>后者只是获得当前线程的 ClassLoader ，前者在获取失败的时候获取 ClassUtil 这个类的 ClassLoader 。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 9  getClassLoader 和 getContextClassLoader 方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test9--classLoader==&gt;&quot;</span><span class="token operator">+</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> contextClassLoader <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test9--contextClassLoader==&gt;&quot;</span><span class="token operator">+</span>contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test9--classLoader==&gt;jdk.internal.loader.ClassLoaders$AppClassLoader@2b193f2d</span></span>
<span class="line">        <span class="token comment">//test9--contextClassLoader==&gt;jdk.internal.loader.ClassLoaders$AppClassLoader@2b193f2d</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑩ getDefaultValue</strong></p><p>获取指定类型的默认值，默认值规则为：</p><ol><li>如果为原始类型，返回 0 （boolean 类型返回 false）</li><li>非原始类型返回 null</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 10 getDefaultValue</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取默认值</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Object</span> defaultValue <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test10--defaultValue==&gt;&quot;</span><span class="token operator">+</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Object</span> defaultValue1 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test10--defaultValue1==&gt;&quot;</span><span class="token operator">+</span>defaultValue1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Object</span> defaultValue2 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test10--defaultValue2==&gt;&quot;</span><span class="token operator">+</span>defaultValue2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Object</span> defaultValue3 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test10--defaultValue3==&gt;&quot;</span><span class="token operator">+</span>defaultValue3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Object</span> defaultValue4 <span class="token operator">=</span> <span class="token class-name">ClassUtil</span><span class="token punctuation">.</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test10--defaultValue4==&gt;&quot;</span><span class="token operator">+</span>defaultValue3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test10--defaultValue==&gt;null</span></span>
<span class="line">        <span class="token comment">//test10--defaultValue1==&gt;null</span></span>
<span class="line">        <span class="token comment">//test10--defaultValue2==&gt;0</span></span>
<span class="line">        <span class="token comment">//test10--defaultValue3==&gt;false</span></span>
<span class="line">        <span class="token comment">//test10--defaultValue4==&gt;false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑪ 其他</strong></p><p>更多详细的方法描述见：</p>`,18)),a("p",null,[a("a",d,[s[10]||(s[10]=n("https://apidoc.gitee.com/loolly/hutool/cn/hutool/core/util/ClassUtil.html")),e(p)])]),s[16]||(s[16]=t(`<h2 id="_14-枚举工具-enumutil" tabindex="-1"><a class="header-anchor" href="#_14-枚举工具-enumutil"><span>⑭ 枚举工具-EnumUtil</span></a></h2><h3 id="_1-介绍-1" tabindex="-1"><a class="header-anchor" href="#_1-介绍-1"><span>1 介绍</span></a></h3><p>枚举（enum）算一种 语法糖，是指一个经过排序的、被打包成一个单一实体的项列表。一个枚举的实例可以使用枚举项列表中任意单一项的值。枚举在各个语言当中都有广泛的应用，通常用来表示诸如颜色、方式、类别、状态等等数目有限、形式离散、表达又极为明确的量。Java 从 JDK5 开始，引入了对枚举的支持。</p><p><code>EnumUtil</code> 用于对未知枚举类型进行操作。</p><h3 id="_2-方法" tabindex="-1"><a class="header-anchor" href="#_2-方法"><span>2 方法</span></a></h3><p>首先我们定义一个枚举对象：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//定义枚举</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TestEnum</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">TEST1</span><span class="token punctuation">(</span><span class="token string">&quot;type1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEST2</span><span class="token punctuation">(</span><span class="token string">&quot;type2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEST3</span><span class="token punctuation">(</span><span class="token string">&quot;type3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">TestEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>① getNames</strong></p><p>获取枚举类中所有枚举对象的 name 列表。例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getNames</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：[TEST1, TEST2, TEST3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 getNames</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取枚举的所有名称，返回数组</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getNames</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--names==&gt;&quot;</span><span class="token operator">+</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--names==&gt;[TEST1, TEST2, TEST3]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② getFieldValues</strong></p><p>获的枚举类中个枚举对象下指定字段的值，例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> types <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getFieldValues</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：[type1,type2,type3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 getFieldValues</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取枚举的所有字段值，返回数组</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getFieldValues</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--type==&gt;&quot;</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--fieldValues==&gt;[type1, type2, type3]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ getBy</strong></p><p>根据传入 Lambda 和值 获得对应枚举。例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">TestEnum</span> testEnum <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getBy</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token operator">::</span><span class="token function">ordinal</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：TEST2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3 getBy</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//根据字段值获取枚举 根据传入 Lambda 和值 获得对应枚举。</span></span>
<span class="line">        <span class="token class-name">TestEnum</span> testEnum <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getBy</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token operator">::</span><span class="token function">ordinal</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--testEnum==&gt;&quot;</span><span class="token operator">+</span>testEnum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--testEnum==&gt;TEST1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ getFieldBy</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getFieldBy</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span><span class="token class-name">Enum</span><span class="token operator">::</span><span class="token function">ordinal</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：&quot;type2&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 4 getFieldBy</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//根据字段值获取枚举 根据传入 Lambda 和值 获得对应枚举。</span></span>
<span class="line">        <span class="token class-name">TestEnum</span> testEnum <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getBy</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span><span class="token string">&quot;type1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--testEnum==&gt;&quot;</span><span class="token operator">+</span>testEnum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test4--testEnum==&gt;TEST1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑤ getEnumMap</strong></p><p>获取枚举字符串值和枚举对象的 Map 对应，使用 LinkedHashMap 保证有序，结果中间为枚举名，值为枚举对象。例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">TestEnum</span><span class="token punctuation">&gt;</span></span> enumMap <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getEnumMap</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">enumMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;TEST1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：TestEnum.TEST1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 5 getEnumMap</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取枚举的所有枚举对象，返回Map</span></span>
<span class="line">        <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TestEnum</span><span class="token punctuation">&gt;</span></span> enumMap <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getEnumMap</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--enumMap==&gt;&quot;</span><span class="token operator">+</span>enumMap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test5--enumMap==&gt;{TEST1=TEST1, TEST2=TEST2, TEST3=TEST3}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑥ getNameFieldMap</strong></p><p>获得枚举名对应指定字段的 Map，键为枚举名，值为字段值。例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> enumMap <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getNameFieldMap</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">enumMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;TEST1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：type1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 6 getNameFieldMap</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取枚举的所有名称和字段值，返回Map</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">=</span> <span class="token class-name">EnumUtil</span><span class="token punctuation">.</span><span class="token function">getNameFieldMap</span><span class="token punctuation">(</span><span class="token class-name">TestEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test6--type==&gt;&quot;</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test6--type==&gt;{TEST1=type1, TEST2=type2, TEST3=type3}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-命令行工具-runtimeutil" tabindex="-1"><a class="header-anchor" href="#_15-命令行工具-runtimeutil"><span>⑮ 命令行工具-RuntimeUtil</span></a></h2><h3 id="_1-介绍-2" tabindex="-1"><a class="header-anchor" href="#_1-介绍-2"><span>1 介绍</span></a></h3><p>在 Java 世界中，如果想与其他语言打交道，处理调用接口，或者 JNI，就是通过本地命令方式调用了。Hutool 封装了 JDK 的 Process 类，用于执行命令行命令（在 Windows 下是 cmd，在 Linux 下是 Shell 命令）。</p><h3 id="_2-方法-1" tabindex="-1"><a class="header-anchor" href="#_2-方法-1"><span>2 方法</span></a></h3><p><strong>① 基础方法</strong></p><ul><li>exec 执行命令行命令，返回 Process 对象，Process 可以读取执行命令后的返回内容的流</li></ul><p><strong>② 快捷方法</strong></p><ul><li>execForStr 执行系统命令，返回字符串</li><li>execForLines 执行系统命令，返回行列表</li></ul><h3 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用"><span>3 使用</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">RuntimeUtil</span><span class="token punctuation">.</span><span class="token function">execForStr</span><span class="token punctuation">(</span><span class="token string">&quot;ipconfig&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行这个命令后，在 Windows 下可以获取网卡信息。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 命令行工具-RuntimeUtil</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> command <span class="token operator">=</span> <span class="token string">&quot;cmd /c dir&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">RuntimeUtil</span><span class="token punctuation">.</span><span class="token function">execForStr</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--result==&gt;&quot;</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token class-name">RuntimeUtil</span><span class="token punctuation">.</span><span class="token function">execForLines</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--stringList==&gt;&quot;</span><span class="token operator">+</span>stringList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">RuntimeUtil</span><span class="token punctuation">.</span><span class="token function">execForStr</span><span class="token punctuation">(</span><span class="token string">&quot;ipconfig&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--str==&gt;&quot;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-数字工具-numberutil" tabindex="-1"><a class="header-anchor" href="#_16-数字工具-numberutil"><span>⑯ 数字工具-NumberUtil</span></a></h2><h3 id="_1-由来" tabindex="-1"><a class="header-anchor" href="#_1-由来"><span>1 由来</span></a></h3><p>数学工具针对数学运算做工具性封装</p><h3 id="_2-使用-1" tabindex="-1"><a class="header-anchor" href="#_2-使用-1"><span>2 使用</span></a></h3><p><strong>① 加减乘除</strong></p><ul><li><code>NumberUtil.add</code> 针对数字类型做加法</li><li><code>NumberUtil.sub</code> 针对数字类型做减法</li><li><code>NumberUtil.mul</code> 针对数字类型做乘法</li><li><code>NumberUtil.div</code> 针对数字类型做除法，并提供重载方法用于规定除不尽的情况下保留小数位数和舍弃方式。</li></ul><p>以上四种运算都会将 double 转为 BigDecimal 后计算，解决float和double类型无法进行精确计算的问题。这些方法常用于商业计算。</p><p><strong>② 保留小数</strong></p><p>保留小数的方法主要有两种：</p><ul><li><p><code>NumberUtil.round</code> 方法主要封装 BigDecimal 中的方法来保留小数，返回 BigDecimal，这个方法更加灵活，可以选择四舍五入或者全部舍弃等模式。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">double</span> te1<span class="token operator">=</span><span class="token number">123456.123456</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> te2<span class="token operator">=</span><span class="token number">123456.128456</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>te1<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:123456.1235</span></span>
<span class="line"><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>te2<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:123456.1285</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>NumberUtil.roundStr 方法主要封装 String.format 方法，舍弃方式采用四舍五入。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">double</span> te1<span class="token operator">=</span><span class="token number">123456.123456</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> te2<span class="token operator">=</span><span class="token number">123456.128456</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">roundStr</span><span class="token punctuation">(</span>te1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:123456.12</span></span>
<span class="line"><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">roundStr</span><span class="token punctuation">(</span>te2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:123456.13                                                                             </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>③ decimalFormat</strong></p><p>针对 <code>DecimalFormat.format</code> 进行简单封装。按照固定格式对 double 或 long 类型的数字做格式化操作。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">long</span> c<span class="token operator">=</span><span class="token number">299792458</span><span class="token punctuation">;</span><span class="token comment">//光速</span></span>
<span class="line"><span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">NumberUtil</span><span class="token punctuation">.</span><span class="token function">decimalFormat</span><span class="token punctuation">(</span><span class="token string">&quot;,###&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//299,792,458</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>格式中主要以 # 和 0 两种占位符号来指定数字长度。0 表示如果位数不足则以 0 填充，# 表示只要有可能就把数字拉上这个位置。</p><ul><li>0 -&gt; 取一位整数</li><li>0.00 -&gt; 取一位整数和两位小数</li><li>00.000 -&gt; 取两位整数和三位小数</li><li># -&gt; 取所有整数部分</li><li>#.##% -&gt; 以百分比方式计数，并取两位小数</li><li>#.#####E0 -&gt; 显示为科学计数法，并取五位小数</li><li>,### -&gt; 每三位以逗号进行分隔，例如：299,792,458</li><li>光速大小为每秒,###米 -&gt; 将格式嵌入文本</li></ul>`,57)),a("p",null,[s[12]||(s[12]=n("关于格式的更多说明，请参阅：")),a("a",m,[s[11]||(s[11]=n("Java DecimalFormat的主要功能及使用方法")),e(p)])]),s[17]||(s[17]=t("<p><strong>④ 校验数字</strong></p><ul><li><code>NumberUtil.isNumber</code> 是否为数字</li><li>NumberUtil.isInteger 是否为整数</li><li>NumberUtil.isDouble 是否为浮点数</li><li>NumberUtil.isPrimes 是否为质数</li></ul><p><strong>⑤ 随机数</strong></p><ul><li>NumberUtil.generateRandomNumber 生成不重复随机数，根据给定的最小数字和最大数字，以及随机数的个数，产生指定的不重复的数组。</li><li>NumberUtil.generateBySet 生成不重复随机数，根据给定的最小数字和最大数字，以及随机数的个数，产生指定的不重复的数组。</li></ul><p><strong>⑥ 整数列表</strong></p><p>NumberUtil.range 方法根据范围和步进，生成一个有序整数列表。NumberUtil.appendRange 将给定范围内的整数添加到已有集合中</p><p><strong>⑦ 其它</strong></p><ul><li><code>NumberUtil.factorial</code> 阶乘</li><li><code>NumberUtil.sqrt</code> 平方根</li><li><code>NumberUtil.divisor</code> 最大公约数</li><li><code>NumberUtil.multiple</code> 最小公倍数</li><li><code>NumberUtil.getBinaryStr</code> 获得数字对应的二进制字符串</li><li><code>NumberUtil.binaryToInt</code> 二进制转int</li><li><code>NumberUtil.binaryToLong</code> 二进制转long</li><li><code>NumberUtil.compare</code> 比较两个值的大小</li><li><code>NumberUtil.toStr</code> 数字转字符串，并自动去除尾小数点儿后多余的0</li></ul>",8))])}const h=l(u,[["render",v],["__file","8-Hutool_Core.html.vue"]]),y=JSON.parse('{"path":"/docs/Java/Hutool/2_Hutool_Core/8-Hutool_Core.html","title":"Hutool-Core核心（八）","lang":"en-US","frontmatter":{"title":"Hutool-Core核心（八）","date":"2024/12/29"},"headers":[{"level":2,"title":"工具类","slug":"工具类","link":"#工具类","children":[]},{"level":2,"title":"⑬ 类工具-ClassUtil","slug":"_13-类工具-classutil","link":"#_13-类工具-classutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍","link":"#_1-介绍","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用","link":"#_2-使用","children":[]}]},{"level":2,"title":"⑭ 枚举工具-EnumUtil","slug":"_14-枚举工具-enumutil","link":"#_14-枚举工具-enumutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-1","link":"#_1-介绍-1","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法","link":"#_2-方法","children":[]}]},{"level":2,"title":"⑮ 命令行工具-RuntimeUtil","slug":"_15-命令行工具-runtimeutil","link":"#_15-命令行工具-runtimeutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-2","link":"#_1-介绍-2","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法-1","link":"#_2-方法-1","children":[]},{"level":3,"title":"3 使用","slug":"_3-使用","link":"#_3-使用","children":[]}]},{"level":2,"title":"⑯ 数字工具-NumberUtil","slug":"_16-数字工具-numberutil","link":"#_16-数字工具-numberutil","children":[{"level":3,"title":"1 由来","slug":"_1-由来","link":"#_1-由来","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用-1","link":"#_2-使用-1","children":[]}]}],"filePathRelative":"docs/Java/Hutool/2_Hutool_Core/8-Hutool_Core.md","git":{"createdTime":1735805958000,"updatedTime":1735805958000,"contributors":[{"name":"lixuan","username":"lixuan","email":"2789968443@qq.com","commits":1,"url":"https://github.com/lixuan"}]}}');export{h as comp,y as data};
