import{_ as p,c as t,b as s,a,d as e,e as i,r as c,o}from"./app-BY1XJ_0O.js";const r="/assets/image-20210821091437975-BoDhCaek.png",d="/assets/image-20210821091621308-Dpn8lf_G.png",u="/assets/image-20210821091638140-DO-UGYPz.png",k="/assets/image-20210821091835406-0Zo98CaM.png",m="/assets/image-20210821091904332-BB-HMb2Z.png",v="/assets/image-20210821092657918-DEILnfd6.png",h={},b={href:"https://www.lua.org/",target:"_blank",rel:"noopener noreferrer"};function g(_,n){const l=c("ExternalLinkIcon");return o(),t("div",null,[n[2]||(n[2]=s('<p><img src="https://bizhi1.com/wp-content/uploads/2024/08/charizard-unleashing-fire-desktop-wallpaper-small.jpg" alt="喷火龙 释放火焰 桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 初识Lua</p><p>② 变量和循环</p><p>③ 条件控制、函数</p></div><h2 id="_1-初识lua" tabindex="-1"><a class="header-anchor" href="#_1-初识lua"><span>① 初识Lua</span></a></h2>',3)),a("p",null,[n[1]||(n[1]=e("Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。官网：")),a("a",b,[n[0]||(n[0]=e("https://www.lua.org/")),i(l)])]),n[3]||(n[3]=s('<p><img src="'+r+'" alt="image-20210821091437975"></p><p>Lua经常嵌入到C语言开发的程序中，例如游戏开发、游戏插件等。</p><p>Nginx本身也是C语言开发，因此也允许基于Lua做拓展。</p><p><strong>HelloWorld</strong></p><p>CentOS7默认已经安装了Lua语言环境，所以可以直接运行Lua代码。</p><p>1）在Linux虚拟机的任意目录下，新建一个hello.lua文件</p><p><img src="'+d+`" alt="image-20210821091621308"></p><p>2）添加下面的内容</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3）运行</p><p><img src="`+u+'" alt="image-20210821091638140"></p><h2 id="_2-变量和循环" tabindex="-1"><a class="header-anchor" href="#_2-变量和循环"><span>② 变量和循环</span></a></h2><p>学习任何语言必然离不开变量，而变量的声明必须先知道数据的类型。</p><h3 id="_2-1-lua的数据类型" tabindex="-1"><a class="header-anchor" href="#_2-1-lua的数据类型"><span>2.1.Lua的数据类型</span></a></h3><p>Lua中支持的常见数据类型包括：</p><p><img src="'+k+'" alt="image-20210821091835406"></p><p>另外，Lua提供了type()函数来判断一个变量的数据类型：</p><p><img src="'+m+`" alt="image-20210821091904332"></p><h3 id="_2-2-声明变量" tabindex="-1"><a class="header-anchor" href="#_2-2-声明变量"><span>2.2.声明变量</span></a></h3><p>Lua声明变量的时候无需指定数据类型，而是用local来声明变量为局部变量：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 声明字符串，可以用单引号或双引号，</span></span>
<span class="line"><span class="token keyword">local</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span></span>
<span class="line"><span class="token comment">-- 字符串拼接可以使用 ..</span></span>
<span class="line"><span class="token keyword">local</span> str2 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token operator">..</span> <span class="token string">&#39;world&#39;</span></span>
<span class="line"><span class="token comment">-- 声明数字</span></span>
<span class="line"><span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token number">21</span></span>
<span class="line"><span class="token comment">-- 声明布尔类型</span></span>
<span class="line"><span class="token keyword">local</span> flag <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lua中的table类型既可以作为数组，又可以作为Java中的map来使用。数组就是特殊的table，key是数组角标而已：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 声明数组 ，key为角标的 table</span></span>
<span class="line"><span class="token keyword">local</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lua&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">-- 声明table，类似java的map</span></span>
<span class="line"><span class="token keyword">local</span> map <span class="token operator">=</span>  <span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lua中的数组角标是从1开始，访问的时候与Java中类似：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 访问数组，lua数组的角标从1开始</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Lua中的table可以用key来访问：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 访问table</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-循环" tabindex="-1"><a class="header-anchor" href="#_2-3-循环"><span>2.3.循环</span></a></h3><p>对于table，我们可以利用for循环来遍历。不过数组和普通table遍历略有差异。</p><p>遍历数组：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 声明数组 key为索引的 table</span></span>
<span class="line"><span class="token keyword">local</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lua&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">-- 遍历数组</span></span>
<span class="line"><span class="token keyword">for</span> index<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历普通table</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 声明map，也就是table</span></span>
<span class="line"><span class="token keyword">local</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">-- 遍历table</span></span>
<span class="line"><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-条件控制、函数" tabindex="-1"><a class="header-anchor" href="#_3-条件控制、函数"><span>③ 条件控制、函数</span></a></h2><p>Lua中的条件控制和函数声明与Java类似。</p><h3 id="_3-1-函数" tabindex="-1"><a class="header-anchor" href="#_3-1-函数"><span>3.1.函数</span></a></h3><p>定义函数的语法：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">function</span> 函数名<span class="token punctuation">(</span> argument1<span class="token punctuation">,</span> argument2<span class="token punctuation">...</span><span class="token punctuation">,</span> argumentn<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 函数体</span></span>
<span class="line">    <span class="token keyword">return</span> 返回值</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，定义一个函数，用来打印数组：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-条件控制" tabindex="-1"><a class="header-anchor" href="#_3-2-条件控制"><span>3.2.条件控制</span></a></h3><p>类似Java的条件控制，例如if、else语法：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">then</span></span>
<span class="line">   <span class="token comment">--[ 布尔表达式为 true 时执行该语句块 --]</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">   <span class="token comment">--[ 布尔表达式为 false 时执行该语句块 --]</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与java不同，布尔表达式中的逻辑运算是基于英文单词：</p><p><img src="`+v+`" alt="image-20210821092657918"></p><h3 id="_3-3-案例" tabindex="-1"><a class="header-anchor" href="#_3-3-案例"><span>3.3.案例</span></a></h3><p>需求：自定义一个函数，可以打印table，当参数为nil时，打印错误信息</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> arr <span class="token keyword">then</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;数组不能为空！&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48))])}const y=p(h,[["render",g]]),f=JSON.parse('{"path":"/docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/2_Redis_Advanced_Multilevel/3-Redis_Advanced_Multilevel.html","title":"Lua语法入门","lang":"en-US","frontmatter":{"title":"Lua语法入门","date":"2025/06/19"},"headers":[{"level":2,"title":"① 初识Lua","slug":"_1-初识lua","link":"#_1-初识lua","children":[]},{"level":2,"title":"② 变量和循环","slug":"_2-变量和循环","link":"#_2-变量和循环","children":[{"level":3,"title":"2.1.Lua的数据类型","slug":"_2-1-lua的数据类型","link":"#_2-1-lua的数据类型","children":[]},{"level":3,"title":"2.2.声明变量","slug":"_2-2-声明变量","link":"#_2-2-声明变量","children":[]},{"level":3,"title":"2.3.循环","slug":"_2-3-循环","link":"#_2-3-循环","children":[]}]},{"level":2,"title":"③ 条件控制、函数","slug":"_3-条件控制、函数","link":"#_3-条件控制、函数","children":[{"level":3,"title":"3.1.函数","slug":"_3-1-函数","link":"#_3-1-函数","children":[]},{"level":3,"title":"3.2.条件控制","slug":"_3-2-条件控制","link":"#_3-2-条件控制","children":[]},{"level":3,"title":"3.3.案例","slug":"_3-3-案例","link":"#_3-3-案例","children":[]}]}],"filePathRelative":"docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/2_Redis_Advanced_Multilevel/3-Redis_Advanced_Multilevel.md","git":{"createdTime":1750319780000,"updatedTime":1750319780000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{y as comp,f as data};
