import{_ as l,c as t,b as n,a,d as e,e as p,r as o,o as r}from"./app-B0LQx5G-.js";const c="/assets/image-20250114170502158-BfJNDceS.png",d="/assets/image-20250114174752472-DbKzaKn0.png",u="/assets/image-20250114174842049-CTEA2uaD.png",m="/assets/image-20250114174910452-BkztxGGv.png",g="/assets/image-20250114174935757-lUvOA47c.png",h="/assets/image-20250114175128738-4_Us4RTb.png",v="/assets/image-20250115094413893-CM0hOiBP.png",k="/assets/image-20250116102954053-DXmrfTH-.png",b="/assets/image-20250116103240649-CyBIfruy.png",_={},x={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"};function R(f,s){const i=o("ExternalLinkIcon");return r(),t("div",null,[s[2]||(s[2]=n('<p><img src="https://bizhi1.com/wp-content/uploads/2025/01/anime-school-girl-with-guitar-falling-from-the-building-zo-3840x2160-1.jpg" alt="拿着吉他的动漫女学生从楼上坠落"></p><h2 id="初识-redis" tabindex="-1"><a class="header-anchor" href="#初识-redis"><span>初识 Redis</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 认识 NoSQL</p><p>② 认识 Redis</p><p>③ 安装 Redis</p></div><p>Redis 是一种键值型的 NoSql 数据库，这里有两个关键字：</p><ul><li>键值型</li><li>NoSql</li></ul><p>其中<strong>键值型</strong>，是指 Redis 中存储的数据都是以 key、value 的形式多种多样，可以是字符串、数值、甚至 json：</p><p><img src="'+c+'" alt="image-20250114170502158"></p><p>而 NoSql 则是相对于传统关系型数据库而言，有很大差异的一种数据库。</p><h2 id="_1-认识-nosql" tabindex="-1"><a class="header-anchor" href="#_1-认识-nosql"><span>① 认识 NoSQL</span></a></h2><p><strong>NoSql</strong> 可以翻译做 <code>Not Only Sql</code> （不仅仅是 SQL），或者是 No Sql（非 sql 的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为<strong>非关系型数据库</strong>。</p><h3 id="i结构化与非结构化" tabindex="-1"><a class="header-anchor" href="#i结构化与非结构化"><span>Ⅰ结构化与非结构化</span></a></h3><p>传统关系型数据库是结构化数据，没一张表都有严格的约束信息：字段名、字段数据类型、字段约束等等信息，插入的数据必须遵守这些约束：</p><p><img src="'+d+'" alt="image-20250114174752472"></p><p>而 NoSql 则对数据库格式没有严格约束，往往形式松散，自由。</p><ul><li><p>可以实键值型</p><p><img src="'+u+'" alt="image-20250114174842049"></p></li><li><p>可以是文档型</p><p><img src="'+m+'" alt="image-20250114174910452"></p></li><li><p>甚至是图格式</p><p><img src="'+g+'" alt="image-20250114174935757"></p></li></ul><h3 id="ii-关联和非关联" tabindex="-1"><a class="header-anchor" href="#ii-关联和非关联"><span>Ⅱ 关联和非关联</span></a></h3><p>传统数据库的表与表之间往往存在关联，例如外键：</p><p><img src="'+h+`" alt="image-20250114175128738"></p><p>而非关系型数据库不存在关联关系，维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  orders<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">       item<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">           id<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;荣耀6&quot;</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">4999</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">       item<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">           id<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;小米11&quot;</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">3999</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处要维护<strong>张三</strong>的订单与商品<strong>荣耀</strong>和<strong>小米11</strong>的关系，不得不冗余的将这两个商品保存在张三的订单文档中，不够优雅。还是建议用业务来维护关联关系。</p><h3 id="iii-查询方式" tabindex="-1"><a class="header-anchor" href="#iii-查询方式"><span>Ⅲ 查询方式</span></a></h3><p>传统关系型数据库会基于 Sql 语句做查询，语法有统一标准；</p><p>而不同的非关系数据库查询语法差异极大，五花八门各种各样。</p><p><img src="`+v+'" alt="image-20250115094413893"></p><h3 id="iv-事务" tabindex="-1"><a class="header-anchor" href="#iv-事务"><span>Ⅳ 事务</span></a></h3><p>传统关系型数据库能满足事务 ACID 的原则。</p><p><img src="'+k+'" alt="image-20250116102954053"></p><p>而非关系型数据库往往不支持事务，或者蹦年严格保证 ACID 的特性，只能实现基本的一致性。</p><h3 id="v-总结" tabindex="-1"><a class="header-anchor" href="#v-总结"><span>Ⅴ 总结</span></a></h3><p>除了上述四点以外，在存储方式、扩展性、查询性能上关系型与非关系型也都有着显著差异，总结如下：</p><p><img src="'+b+'" alt="image-20250116103240649"></p><ul><li>存储方式 <ul><li>非关系型数据库基于磁盘进行存储，会有大量的磁盘 IO，对性能有一定影响</li><li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存读写速度会非常快，性能自然会好一些</li></ul></li><li>扩展性 <ul><li>关系型数据库集群模式一般时主从，主从数据一直，起到数据备份的作用，称为垂直扩展</li><li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题，称为水平扩展</li><li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h2 id="_2-认识-redis" tabindex="-1"><a class="header-anchor" href="#_2-认识-redis"><span>② 认识 Redis</span></a></h2><p>Redis诞生于2009年全称是<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p><strong>特征：</strong></p><ul><li>键值（key-value）型，value 支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO 多路复用、良好的编码）</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><p><strong>作者：</strong> Antirez</p>',38)),a("p",null,[s[1]||(s[1]=e("Redis的官方网站地址：")),a("a",x,[s[0]||(s[0]=e("https://redis.io/")),p(i)])]),s[3]||(s[3]=n(`<h2 id="_3-安装-redis" tabindex="-1"><a class="header-anchor" href="#_3-安装-redis"><span>③ 安装 Redis</span></a></h2><p>大多数企业都是基于 Linux 服务器来部署项目，而且 Redis 官方也没有提供 Windows 版本的安装包。</p><p>此处选择的 Linux 版本为 CentOS 7.</p><h3 id="i-依赖库" tabindex="-1"><a class="header-anchor" href="#i-依赖库"><span>Ⅰ 依赖库</span></a></h3><p>Redis 是基于 C 语言编写的，因此首先需要安装 Redis 所需要的 gcc 依赖</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc tcl</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="ii-安装方式" tabindex="-1"><a class="header-anchor" href="#ii-安装方式"><span>Ⅱ 安装方式</span></a></h3><ol><li>Docker</li><li>Linux</li><li>Windows 安装包</li></ol>`,8))])}const S=l(_,[["render",R]]),N=JSON.parse('{"path":"/docs/Middleware/Redis/Redis_Heima/1_Redis_Entry/1-Redis_Entry.html","title":"初识Redis","lang":"en-US","frontmatter":{"title":"初识Redis","date":"2025/01/14"},"headers":[{"level":2,"title":"初识 Redis","slug":"初识-redis","link":"#初识-redis","children":[]},{"level":2,"title":"① 认识 NoSQL","slug":"_1-认识-nosql","link":"#_1-认识-nosql","children":[{"level":3,"title":"Ⅰ结构化与非结构化","slug":"i结构化与非结构化","link":"#i结构化与非结构化","children":[]},{"level":3,"title":"Ⅱ 关联和非关联","slug":"ii-关联和非关联","link":"#ii-关联和非关联","children":[]},{"level":3,"title":"Ⅲ 查询方式","slug":"iii-查询方式","link":"#iii-查询方式","children":[]},{"level":3,"title":"Ⅳ 事务","slug":"iv-事务","link":"#iv-事务","children":[]},{"level":3,"title":"Ⅴ 总结","slug":"v-总结","link":"#v-总结","children":[]}]},{"level":2,"title":"② 认识 Redis","slug":"_2-认识-redis","link":"#_2-认识-redis","children":[]},{"level":2,"title":"③ 安装 Redis","slug":"_3-安装-redis","link":"#_3-安装-redis","children":[{"level":3,"title":"Ⅰ 依赖库","slug":"i-依赖库","link":"#i-依赖库","children":[]},{"level":3,"title":"Ⅱ 安装方式","slug":"ii-安装方式","link":"#ii-安装方式","children":[]}]}],"filePathRelative":"docs/Middleware/Redis/Redis_Heima/1_Redis_Entry/1-Redis_Entry.md","git":{"createdTime":1737440609000,"updatedTime":1741156920000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":3}]}}');export{S as comp,N as data};
