import{_ as t,c as p,b as a,a as n,d as l,e as i,r as c,o}from"./app-B_5tQx1u.js";const r="/assets/image-20250624102442251-BTU__Ifz.png",d="/assets/image-20250624102511110-DYVk4z2z.png",u="/assets/image-20250624102538699-C-FX-nPw.png",m="/assets/image-20250624102556013-CWVhRXBf.png",k="/assets/image-20250624102612255-BU1zGxMZ.png",g="/assets/image-20250624102633896-BjNi5J9Q.png",v="/assets/image-20250624102916529-BBEQ_l9J.png",h="/assets/image-20250624102943749-CNNMp-66.png",b="/assets/image-20250624103006501-2epyY-fL.png",_="/assets/image-20250624103019755-JjrzCEOt.png",y="/assets/image-20250624103045051-CwQcslnH.png",x="/assets/image-20250624103456270-_Ig6Uczd.png",T="/assets/image-20250624103507351-FgGxNJzQ.png",f="/assets/image-20250624103545346-JhhA21XM.png",A="/assets/image-20250624103554003-1aUtW-uZ.png",S="/assets/image-20250624104658205-BxNd5PjI.png",C="/assets/image-20250624104943519-88u9fjOP.png",M="/assets/image-20250624105000704-CMIcUGqT.png",I="/assets/image-20250624105025145-B6i3DLHW.png",w="/assets/image-20250624105057449-Ch05Dpqg.png",q="/assets/image-20250624105134604-De4R1bmf.png",X="/assets/image-20250624105208036-B8j5fVFq.png",D={},j={href:"https://seata.io/zh-cn/docs/overview/what-is-seata.html",target:"_blank",rel:"noopener noreferrer"};function R(P,s){const e=c("ExternalLinkIcon");return o(),p("div",null,[s[1]||(s[1]=a('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/气质高清美女白色裙子黄玉瑶-4k壁纸-3840x2400-1.jpg" alt="气质高清美女白色裙子黄玉瑶 4k壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 认识 Seata</p><p>2 部署 TC 服务</p><p>3 微服务集成 Seata</p><p>4 XA 模式</p><p>5 AT 模式</p></div><p>首先我们看看项目中的下单业务整体流程：</p><p><img src="'+r+'" alt="image-20250624102442251"></p><p>由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务：</p><ul><li>交易服务：下单事务</li><li>购物车服务：清理购物车事务</li><li>库存服务：扣减库存事务</li></ul><p>整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为<strong>分支事务</strong>。多个有关联的分支事务一起就组成了<strong>全局事务</strong>。我们必须保证整个全局事务同时成功或失败。</p><p>我们知道每一个分支事务就是传统的<strong>单体事务</strong>，都可以满足ACID特性，但全局事务跨越多个服务、多个数据库，是否还能满足呢？</p><p>我们来做一个测试，先进入购物车页面：</p><p><img src="'+d+'" alt="image-20250624102511110"></p><p>目前有4个购物车，然结算下单，进入订单结算页面：</p><p><img src="'+u+'" alt="image-20250624102538699"></p><p>然后将购物车中某个商品的库存修改为<code>0</code>：</p><p><img src="'+m+'" alt="image-20250624102556013"></p><p>然后，提交订单，最终因库存不足导致下单失败：</p><p><img src="'+k+'" alt="image-20250624102612255"></p><p>然后我们去查看购物车列表，发现购物车数据依然被清空了，并未回滚：</p><p><img src="'+g+'" alt="image-20250624102633896"></p><p>事务并未遵循ACID的原则，归其原因就是参与事务的多个子业务在不同的微服务，跨越了不同的数据库。虽然每个单独的业务都能在本地遵循ACID，但是它们互相之间没有感知，不知道有人失败了，无法保证最终结果的统一，也就无法遵循ACID的事务特性了。</p><p>这就是分布式事务问题，出现以下情况之一就可能产生分布式事务问题：</p><ul><li>业务跨多个服务实现</li><li>业务跨多个数据源实现</li></ul><p>接下来这一章我们就一起来研究下如何解决分布式事务问题。</p><h2 id="_1-认识-seata" tabindex="-1"><a class="header-anchor" href="#_1-认识-seata"><span>1 认识 Seata</span></a></h2><p>解决分布式事务的方案有很多，但实现起来都比较复杂，因此我们一般会使用开源的框架来解决分布式事务问题。在众多的开源分布式事务框架中，功能最完善、使用最多的就是阿里巴巴在2019年开源的Seata了。</p>',24)),n("p",null,[n("a",j,[s[0]||(s[0]=l("https://seata.io/zh-cn/docs/overview/what-is-seata.html")),i(e)])]),s[2]||(s[2]=a('<p>其实分布式事务产生的一个重要原因，就是参与事务的多个分支事务互相无感知，不知道彼此的执行状态。因此解决分布式事务的思想非常简单：</p><p>就是找一个统一的<strong>事务协调者</strong>，与多个分支事务通信，检测每个分支事务的执行状态，保证全局事务下的每一个分支事务同时成功或失败即可。大多数的分布式事务框架都是基于这个理论来实现的。</p><p>Seata也不例外，在Seata的事务管理中有三个重要的角色：</p><ul><li><strong>TC (Transaction Coordinator) -</strong> **事务协调者：**维护全局和分支事务的状态，协调全局事务提交或回滚。</li><li><strong>TM (Transaction Manager) -</strong> **事务管理器：**定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li><strong>RM (Resource Manager) -</strong> **资源管理器：**管理分支事务，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><p>Seata的工作架构如图所示：</p><p><img src="'+v+'" alt="image-20250624102916529"></p><p>其中，<strong>TM</strong>和<strong>RM</strong>可以理解为Seata的客户端部分，引入到参与事务的微服务依赖中即可。将来<strong>TM</strong>和<strong>RM</strong>就会协助微服务，实现本地分支事务与<strong>TC</strong>之间交互，实现事务的提交或回滚。</p><p>而<strong>TC</strong>服务则是事务协调中心，是一个独立的微服务，需要单独部署。</p><h2 id="_2-部署-tc-服务" tabindex="-1"><a class="header-anchor" href="#_2-部署-tc-服务"><span>2 部署 TC 服务</span></a></h2><h3 id="_2-1-准备数据库表" tabindex="-1"><a class="header-anchor" href="#_2-1-准备数据库表"><span>2.1 准备数据库表</span></a></h3><p>Seata支持多种存储模式，但考虑到持久化的需要，我们一般选择基于数据库存储。执行课前资料提供的<code>《seata-tc.sql》</code>，导入数据库表：</p><p><img src="'+h+'" alt="image-20250624102943749"></p><h3 id="_2-2-准备配置文件" tabindex="-1"><a class="header-anchor" href="#_2-2-准备配置文件"><span>2.2 准备配置文件</span></a></h3><p>课前资料准备了一个seata目录，其中包含了seata运行时所需要的配置文件：</p><p><img src="'+b+'" alt="image-20250624103006501"></p><p>其中包含中文注释，大家可以自行阅读。</p><p>我们将整个seata文件夹拷贝到虚拟机的<code>/root</code>目录：</p><p><img src="'+_+`" alt="image-20250624103019755"></p><h3 id="_2-3-docker-部署" tabindex="-1"><a class="header-anchor" href="#_2-3-docker-部署"><span>2.3 Docker 部署</span></a></h3><p>需要注意，要确保nacos、mysql都在hm-net网络中。如果某个容器不再hm-net网络，可以参考下面的命令将某容器加入指定网络：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> network connect <span class="token punctuation">[</span>网络名<span class="token punctuation">]</span> <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在虚拟机的<code>/root</code>目录执行下面的命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> seata <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-p</span> <span class="token number">8099</span>:8099 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-p</span> <span class="token number">7099</span>:7099 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">SEATA_IP</span><span class="token operator">=</span><span class="token number">192.168</span>.150.101 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-v</span> ./seata:/seata-server/resources <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--network</span> hm-net <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line">seataio/seata-server:1.5.2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果镜像下载困难，也可以把课前资料提供的镜像上传到虚拟机并加载：</p><p><img src="`+y+`" alt="image-20250624103045051"></p><h2 id="_3-微服务集成-seata" tabindex="-1"><a class="header-anchor" href="#_3-微服务集成-seata"><span>3 微服务集成 Seata</span></a></h2><p>参与分布式事务的每一个微服务都需要集成Seata，我们以<code>trade-service</code>为例。</p><h3 id="_3-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-引入依赖"><span>3.1 引入依赖</span></a></h3><p>为了方便各个微服务集成seata，我们需要把seata配置共享到nacos，因此<code>trade-service</code>模块不仅仅要引入seata依赖，还要引入nacos依赖:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!--统一配置管理--&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!--读取bootstrap文件--&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!--seata--&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-改造配置" tabindex="-1"><a class="header-anchor" href="#_3-2-改造配置"><span>3.2 改造配置</span></a></h3><p>首先在nacos上添加一个共享的seata配置，命名为<code>shared-seata.yaml</code>：</p><p><img src="`+x+`" alt="image-20250624103456270"></p><p>内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">seata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">registry</span><span class="token punctuation">:</span> <span class="token comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos <span class="token comment"># 注册中心类型 nacos</span></span>
<span class="line">    <span class="token key atrule">nacos</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos地址</span></span>
<span class="line">      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span> <span class="token comment"># namespace，默认为空</span></span>
<span class="line">      <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP <span class="token comment"># 分组，默认是DEFAULT_GROUP</span></span>
<span class="line">      <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server <span class="token comment"># seata服务名称</span></span>
<span class="line">      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos</span>
<span class="line">      <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos</span>
<span class="line">  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> hmall <span class="token comment"># 事务组名称</span></span>
<span class="line">  <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span> <span class="token comment"># 事务组与tc集群的映射关系</span></span>
<span class="line">      <span class="token key atrule">hmall</span><span class="token punctuation">:</span> <span class="token string">&quot;default&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，改造<code>trade-service</code>模块，添加<code>bootstrap.yaml</code>：</p><p><img src="`+T+`" alt="image-20250624103507351"></p><p>内容如下:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">application</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> trade<span class="token punctuation">-</span>service <span class="token comment"># 服务名称</span></span>
<span class="line">  <span class="token key atrule">profiles</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev</span>
<span class="line">  <span class="token key atrule">cloud</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">nacos</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.150.101 <span class="token comment"># nacos地址</span></span>
<span class="line">      <span class="token key atrule">config</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 文件后缀名</span></span>
<span class="line">        <span class="token key atrule">shared-configs</span><span class="token punctuation">:</span> <span class="token comment"># 共享配置</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>jdbc.yaml <span class="token comment"># 共享mybatis配置</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>log.yaml <span class="token comment"># 共享日志配置</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>swagger.yaml <span class="token comment"># 共享日志配置</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>seata.yaml <span class="token comment"># 共享seata配置</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里加载了共享的seata配置。</p><p>然后改造application.yaml文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8085</span></span>
<span class="line"><span class="token key atrule">feign</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">okhttp</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启OKHttp连接池支持</span></span>
<span class="line">  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启Feign对Sentinel的整合</span></span>
<span class="line"><span class="token key atrule">hm</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">swagger</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">title</span><span class="token punctuation">:</span> 交易服务接口文档</span>
<span class="line">    <span class="token key atrule">package</span><span class="token punctuation">:</span> com.hmall.trade.controller</span>
<span class="line">  <span class="token key atrule">db</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">database</span><span class="token punctuation">:</span> hm<span class="token punctuation">-</span>trade</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考上述办法分别改造<code>hm-cart</code>和<code>hm-item</code>两个微服务模块。</p><h3 id="_3-3-添加数据库表" tabindex="-1"><a class="header-anchor" href="#_3-3-添加数据库表"><span>3.3 添加数据库表</span></a></h3><p>seata的客户端在解决分布式事务的时候需要记录一些中间数据，保存在数据库中。因此我们要先准备一个这样的表。</p><p>将课前资料的seata-at.sql分别文件导入hm-trade、hm-cart、hm-item三个数据库中：</p><p><img src="`+f+'" alt="image-20250624103545346"></p><p>结果：</p><p><img src="'+A+'" alt="image-20250624103554003"></p><p>OK，至此为止，微服务整合的工作就完成了。可以参考上述方式对<code>hm-item</code>和<code>hm-cart</code>模块完成整合改造。</p><h3 id="_3-4-测试" tabindex="-1"><a class="header-anchor" href="#_3-4-测试"><span>3.4 测试</span></a></h3><p>接下来就是测试的分布式事务的时候了。</p><p>我们找到<code>trade-service</code>模块下的<code>com.hmall.trade.service.impl.OrderServiceImpl</code>类中的<code>createOrder</code>方法，也就是下单业务方法。</p><p>将其上的<code>@Transactional</code>注解改为Seata提供的<code>@GlobalTransactional</code>：</p><p><img src="'+S+'" alt="image-20250624104658205"></p><p><code>@GlobalTransactional</code>注解就是在标记事务的起点，将来TM就会基于这个方法判断全局事务范围，初始化全局事务。</p><p>我们重启<code>trade-service</code>、<code>item-service</code>、<code>cart-service</code>三个服务。再次测试，发现分布式事务的问题解决了！</p><p>那么，Seata是如何解决分布式事务的呢？</p><h2 id="_4-xa-模式" tabindex="-1"><a class="header-anchor" href="#_4-xa-模式"><span>4 XA 模式</span></a></h2><p>Seata支持四种不同的分布式事务解决方案：</p><ul><li><strong>XA</strong></li><li><strong>TCC</strong></li><li><strong>AT</strong></li><li><strong>SAGA</strong></li></ul><p>这里我们以<code>XA</code>模式和<code>AT</code>模式来给大家讲解其实现原理。</p><p><code>XA</code> 规范 是<code> X/Open</code> 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的<code>TM</code>与局部的<code>RM</code>之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p><h3 id="_4-1-两阶段提交" tabindex="-1"><a class="header-anchor" href="#_4-1-两阶段提交"><span>4.1 两阶段提交</span></a></h3><p>A是规范，目前主流数据库都实现了这种规范，实现的原理都是基于两阶段提交。</p><p>正常情况：</p><p><img src="'+C+'" alt="image-20250624104943519"></p><p>异常情况：</p><p><img src="'+M+'" alt="image-20250624105000704"></p><p>一阶段：</p><ul><li>事务协调者通知每个事务参与者执行本地事务</li><li>本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁</li></ul><p>二阶段：</p><ul><li>事务协调者基于一阶段的报告来判断下一步操作</li><li>如果一阶段都成功，则通知所有事务参与者，提交事务</li><li>如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务</li></ul><h3 id="_4-2-seata-的-xa-模型" tabindex="-1"><a class="header-anchor" href="#_4-2-seata-的-xa-模型"><span>4.2 Seata 的 XA 模型</span></a></h3><p>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：</p><p><img src="'+I+`" alt="image-20250624105025145"></p><p><code>RM</code>一阶段的工作：</p><ol><li>注册分支事务到<code>TC</code></li><li>执行分支业务sql但不提交</li><li>报告执行状态到<code>TC</code></li></ol><p><code>TC</code>二阶段的工作：</p><ol><li><code>TC</code>检测各分支事务执行状态</li><li>如果都成功，通知所有RM提交事务</li><li>如果有失败，通知所有RM回滚事务</li></ol><p><code>RM</code>二阶段的工作：</p><ul><li>接收<code>TC</code>指令，提交或回滚事务</li></ul><h3 id="_4-3-优缺点" tabindex="-1"><a class="header-anchor" href="#_4-3-优缺点"><span>4.3 优缺点</span></a></h3><p><code>XA</code>模式的优点是什么？</p><ul><li>事务的强一致性，满足ACID原则</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul><p><code>XA</code>模式的缺点是什么？</p><ul><li>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li><li>依赖关系型数据库实现事务</li></ul><h3 id="_4-4-实现步骤" tabindex="-1"><a class="header-anchor" href="#_4-4-实现步骤"><span>4.4 实现步骤</span></a></h3><p>首先，我们要在配置文件中指定要采用的分布式事务模式。我们可以在Nacos中的共享shared-seata.yaml配置文件中设置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">seata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">data-source-proxy-mode</span><span class="token punctuation">:</span> XA</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，我们要利用<code>@GlobalTransactional</code>标记分布式事务的入口方法：</p><p><img src="`+w+'" alt="image-20250624105057449"></p><h2 id="_5-at-模式" tabindex="-1"><a class="header-anchor" href="#_5-at-模式"><span>5 AT 模式</span></a></h2><p><code>AT</code>模式同样是分阶段提交的事务模型，不过缺弥补了<code>XA</code>模型中资源锁定周期过长的缺陷。</p><h3 id="_5-1-seata-的-at-模型" tabindex="-1"><a class="header-anchor" href="#_5-1-seata-的-at-模型"><span>5.1 Seata 的 AT 模型</span></a></h3><p>基本流程图：</p><p><img src="'+q+`" alt="image-20250624105134604"></p><p>阶段一<code>RM</code>的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时<code>RM</code>的工作：</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时<code>RM</code>的工作：</p><ul><li>根据undo-log恢复数据到更新前</li></ul><h3 id="_5-2-流程梳理" tabindex="-1"><a class="header-anchor" href="#_5-2-流程梳理"><span>5.2 流程梳理</span></a></h3><p>我们用一个真实的业务来梳理下AT模式的原理。</p><p>比如，现在有一个数据库表，记录用户余额：</p><table><thead><tr><th style="text-align:left;"><strong>id</strong></th><th style="text-align:left;"><strong>money</strong></th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">100</td></tr></tbody></table><p>其中一个分支业务要执行的SQL为：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"> <span class="token keyword">update</span> tb_account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">10</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>AT模式下，当前分支事务执行流程如下：</p><p><strong>一阶段</strong>：</p><ol><li><code>TM</code>发起并注册全局事务到<code>TC</code></li><li><code>TM</code>调用分支事务</li><li>分支事务准备执行业务SQL</li><li><code>RM</code>拦截业务SQL，根据where条件查询原始数据，形成快照。</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;money&quot;</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>RM</code>执行业务SQL，提交本地事务，释放数据库锁。此时 money = 90</li><li><code>RM</code>报告本地事务状态给<code>TC</code></li></ol><p><strong>二阶段</strong>：</p><ol><li><code>TM</code>通知<code>TC</code>事务结束</li><li><code>TC</code>检查分支事务状态 <ol><li>如果都成功，则立即删除快照</li><li>如果有分支事务失败，需要回滚。读取快照数据（{&quot;id&quot;: 1, &quot;money&quot;: 100}），将快照恢复到数据库。此时数据库再次恢复为100</li></ol></li></ol><p>流程图：</p><p><img src="`+X+'" alt="image-20250624105208036"></p><h3 id="_5-3-at-与-xa-的区别" tabindex="-1"><a class="header-anchor" href="#_5-3-at-与-xa-的区别"><span>5.3 AT 与 XA 的区别</span></a></h3><p>简述<code>AT</code>模式与<code>XA</code>模式最大的区别是什么？</p><ul><li><code>XA</code>模式一阶段不提交事务，锁定资源；<code>AT</code>模式一阶段直接提交，不锁定资源。</li><li><code>XA</code>模式依赖数据库机制实现回滚；<code>AT</code>模式利用数据快照实现数据回滚。</li><li><code>XA</code>模式强一致；<code>AT</code>模式最终一致</li></ul><p>可见，AT模式使用起来更加简单，无业务侵入，性能更好。因此企业90%的分布式事务都可以用AT模式来解决。</p>',122))])}const N=t(D,[["render",R]]),z=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day05_SP_DT/2-SP_DT.html","title":"分布式事务","lang":"en-US","frontmatter":{"title":"分布式事务","date":"2025/03/06"},"headers":[{"level":2,"title":"1 认识 Seata","slug":"_1-认识-seata","link":"#_1-认识-seata","children":[]},{"level":2,"title":"2 部署 TC 服务","slug":"_2-部署-tc-服务","link":"#_2-部署-tc-服务","children":[{"level":3,"title":"2.1 准备数据库表","slug":"_2-1-准备数据库表","link":"#_2-1-准备数据库表","children":[]},{"level":3,"title":"2.2 准备配置文件","slug":"_2-2-准备配置文件","link":"#_2-2-准备配置文件","children":[]},{"level":3,"title":"2.3 Docker 部署","slug":"_2-3-docker-部署","link":"#_2-3-docker-部署","children":[]}]},{"level":2,"title":"3 微服务集成 Seata","slug":"_3-微服务集成-seata","link":"#_3-微服务集成-seata","children":[{"level":3,"title":"3.1 引入依赖","slug":"_3-1-引入依赖","link":"#_3-1-引入依赖","children":[]},{"level":3,"title":"3.2 改造配置","slug":"_3-2-改造配置","link":"#_3-2-改造配置","children":[]},{"level":3,"title":"3.3 添加数据库表","slug":"_3-3-添加数据库表","link":"#_3-3-添加数据库表","children":[]},{"level":3,"title":"3.4 测试","slug":"_3-4-测试","link":"#_3-4-测试","children":[]}]},{"level":2,"title":"4 XA 模式","slug":"_4-xa-模式","link":"#_4-xa-模式","children":[{"level":3,"title":"4.1 两阶段提交","slug":"_4-1-两阶段提交","link":"#_4-1-两阶段提交","children":[]},{"level":3,"title":"4.2 Seata 的 XA 模型","slug":"_4-2-seata-的-xa-模型","link":"#_4-2-seata-的-xa-模型","children":[]},{"level":3,"title":"4.3 优缺点","slug":"_4-3-优缺点","link":"#_4-3-优缺点","children":[]},{"level":3,"title":"4.4 实现步骤","slug":"_4-4-实现步骤","link":"#_4-4-实现步骤","children":[]}]},{"level":2,"title":"5 AT 模式","slug":"_5-at-模式","link":"#_5-at-模式","children":[{"level":3,"title":"5.1 Seata 的 AT 模型","slug":"_5-1-seata-的-at-模型","link":"#_5-1-seata-的-at-模型","children":[]},{"level":3,"title":"5.2 流程梳理","slug":"_5-2-流程梳理","link":"#_5-2-流程梳理","children":[]},{"level":3,"title":"5.3 AT 与 XA 的区别","slug":"_5-3-at-与-xa-的区别","link":"#_5-3-at-与-xa-的区别","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day05_SP_DT/2-SP_DT.md","git":{"createdTime":1741251281000,"updatedTime":1750752221000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":3}]}}');export{N as comp,z as data};
