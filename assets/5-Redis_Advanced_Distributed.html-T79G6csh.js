import{_ as t,c as r,b as a,a as n,d as e,e as d,r as c,o as m}from"./app-C7pp65Rl.js";const o="/assets/image-20210725155747294-DjbrmtdD.png",u="/assets/image-20210725152052501-C8jwnLiw.png",g="/assets/image-20210725155820320-CZgWvuLs.png",h="/assets/image-20210725155850200-RZJtGleI.png",_="/assets/image-20210725160138290-CJMXJk1-.png",i="/assets/image-20210725160448139-KLk3-Cyp.png",v="/assets/image-20210725161007099-DRkTfy5B.png",k="/assets/image-20210725161241793-DuKjTDfH.png",b="/assets/image-20210725161401925-DUk4Ipkw.png",f="/assets/image-20210725161506241-BV8mwLk-.png",x="/assets/image-20210725161540841-DYHfdsFb.png",y="/assets/image-20210725161637152-CpMhwTFw.png",R="/assets/image-20210725161731738-B5sSJ2gc.png",w="/assets/image-20210725161817642-Bwm_WEZp.png",D="/assets/image-20210725162030478-DzcJMyZR.png",j="/assets/image-20210725162101228-DbbJFtZr.png",C="/assets/image-20210725162145497-DzdcfFdq.png",T="/assets/image-20210725162224058-C28uk-mY.png",p="/assets/image-20210727161152065-BOdsO-Qq.png",B="/assets/image-20210725162319490-CzjE1LH_.png",I="/assets/image-20210725162408979-CUPNcvse.png",J="/assets/image-20210727160803386-CFRlZjZk.png",A="/assets/image-20210725162441407-DCnLtCG6.png",L="/assets/image-20210727160037766-DthJXWr9.png",M={},N={href:"http://xn--Redis-2o3nn90k.md",target:"_blank",rel:"noopener noreferrer"};function Z(q,s){const l=c("ExternalLinkIcon");return m(),r("div",null,[s[3]||(s[3]=a('<p><img src="https://bizhi1.com/wp-content/uploads/2024/08/mitsuri-kanroji-demon-slayer-happy-desktop-wallpaper-4k-small.jpg" alt="MITSURI KANROJI 鬼灭之刃 快乐 桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 搭建分片集群</p><p>② 散列插槽</p><p>③ 集群伸缩</p><p>④ 故障转移</p><p>⑤ RedisTemplate访问分片集群</p></div><h2 id="_1-搭建分片集群" tabindex="-1"><a class="header-anchor" href="#_1-搭建分片集群"><span>① 搭建分片集群</span></a></h2><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li><p>海量数据存储问题</p></li><li><p>高并发写的问题</p></li></ul><p>使用分片集群可以解决上述问题，如图:</p><p><img src="'+o+'" alt="image-20210725155747294"></p><p>分片集群特征：</p><ul><li><p>集群中有多个master，每个master保存不同数据</p></li><li><p>每个master都可以有多个slave节点</p></li><li><p>master之间通过ping监测彼此健康状态</p></li><li><p>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p></li></ul>',9)),n("p",null,[s[1]||(s[1]=e("具体搭建流程参考课前资料《")),n("a",N,[s[0]||(s[0]=e("Redis集群.md")),d(l)]),s[2]||(s[2]=e("》："))]),s[4]||(s[4]=a('<p><img src="'+u+'" alt="image-20210725155806288"></p><h2 id="_2-散列插槽" tabindex="-1"><a class="header-anchor" href="#_2-散列插槽"><span>② 散列插槽</span></a></h2><h3 id="_2-1-插槽原理" tabindex="-1"><a class="header-anchor" href="#_2-1-插槽原理"><span>2.1.插槽原理</span></a></h3><p>Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，查看集群信息时就能看到：</p><p><img src="'+g+'" alt="image-20210725155820320"></p><p>数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：</p><ul><li>key中包含&quot;{}&quot;，且“{}”中至少包含1个字符，“{}”中的部分是有效部分</li><li>key中不包含“{}”，整个key都是有效部分</li></ul><p>例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对16384取余，得到的结果就是slot值。</p><p><img src="'+h+'" alt="image-20210725155850200"></p><p>如图，在7001这个节点执行set a 1时，对a做hash运算，对16384取余，得到的结果是15495，因此要存储到103节点。</p><p>到了7003后，执行<code>get num</code>时，对num做hash运算，对16384取余，得到的结果是2765，因此需要切换到7001节点</p><h3 id="_2-2-小结" tabindex="-1"><a class="header-anchor" href="#_2-2-小结"><span>2.2.小结</span></a></h3><p>Redis如何判断某个key应该在哪个实例？</p><ul><li>将16384个插槽分配到不同的实例</li><li>根据key的有效部分计算哈希值，对16384取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>这一类数据使用相同的有效部分，例如key都以{typeId}为前缀</li></ul><h2 id="_3-集群伸缩" tabindex="-1"><a class="header-anchor" href="#_3-集群伸缩"><span>③ 集群伸缩</span></a></h2><p>redis-cli --cluster提供了很多操作集群的命令，可以通过下面方式查看：</p><p><img src="'+_+'" alt="image-20210725160138290"></p><p>比如，添加节点的命令：</p><p><img src="'+i+`" alt="image-20210725160448139"></p><h3 id="_3-1-需求分析" tabindex="-1"><a class="header-anchor" href="#_3-1-需求分析"><span>3.1.需求分析</span></a></h3><p>需求：向集群中添加一个新的master节点，并向其中存储 num = 10</p><ul><li>启动一个新的redis实例，端口为7004</li><li>添加7004到之前的集群，并作为一个master节点</li><li>给7004节点分配插槽，使得num这个key可以存储到7004实例</li></ul><p>这里需要两个新的功能：</p><ul><li>添加一个节点到集群中</li><li>将部分插槽分配到新插槽</li></ul><h3 id="_3-2-创建新的redis实例" tabindex="-1"><a class="header-anchor" href="#_3-2-创建新的redis实例"><span>3.2.创建新的redis实例</span></a></h3><p>创建一个文件夹：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> <span class="token number">7004</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>拷贝配置文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cp</span> redis.conf /7004</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改配置文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> /s/6379/7004/g <span class="token number">7004</span>/redis.conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-server <span class="token number">7004</span>/redis.conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-3-添加新节点到redis" tabindex="-1"><a class="header-anchor" href="#_3-3-添加新节点到redis"><span>3.3.添加新节点到redis</span></a></h3><p>添加节点的语法如下：</p><p><img src="`+i+`" alt="image-20210725160448139"></p><p>执行命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-cli <span class="token parameter variable">--cluster</span> add-node  <span class="token number">192.168</span>.150.101:7004 <span class="token number">192.168</span>.150.101:7001</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过命令查看集群状态：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span> cluster nodes</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如图，7004加入了集群，并且默认是一个master节点：</p><p><img src="`+v+'" alt="image-20210725161007099"></p><p>但是，可以看到7004节点的插槽数量为0，因此没有任何数据可以存储到7004上</p><h3 id="_3-4-转移插槽" tabindex="-1"><a class="header-anchor" href="#_3-4-转移插槽"><span>3.4.转移插槽</span></a></h3><p>我们要将num存储到7004节点，因此需要先看看num的插槽是多少：</p><p><img src="'+k+'" alt="image-20210725161241793"></p><p>如上图所示，num的插槽为2765.</p><p>我们可以将0~3000的插槽从7001转移到7004，命令格式如下：</p><p><img src="'+b+'" alt="image-20210725161401925"></p><p>具体命令如下：</p><p>建立连接：</p><p><img src="'+f+'" alt="image-20210725161506241"></p><p>得到下面的反馈：</p><p><img src="'+x+'" alt="image-20210725161540841"></p><p>询问要移动多少个插槽，我们计划是3000个：</p><p>新的问题来了：</p><p><img src="'+y+'" alt="image-20210725161637152"></p><p>那个node来接收这些插槽？？</p><p>显然是7004，那么7004节点的id是多少呢？</p><p><img src="'+R+'" alt="image-20210725161731738"></p><p>复制这个id，然后拷贝到刚才的控制台后：</p><p><img src="'+w+'" alt="image-20210725161817642"></p><p>这里询问，你的插槽是从哪里移动过来的？</p><ul><li>all：代表全部，也就是三个节点各转移一部分</li><li>具体的id：目标节点的id</li><li>done：没有了</li></ul><p>这里我们要从7001获取，因此填写7001的id：</p><p><img src="'+D+'" alt="image-20210725162030478"></p><p>填完后，点击done，这样插槽转移就准备好了：</p><p><img src="'+j+'" alt="image-20210725162101228"></p><p>确认要转移吗？输入yes：</p><p>然后，通过命令查看结果：</p><p><img src="'+C+'" alt="image-20210725162145497"></p><p>可以看到：</p><p><img src="'+T+'" alt="image-20210725162224058"></p><p>目的达成。</p><h2 id="_4-故障转移" tabindex="-1"><a class="header-anchor" href="#_4-故障转移"><span>④ 故障转移</span></a></h2><p>集群初识状态是这样的：</p><p><img src="'+p+`" alt="image-20210727161152065"></p><p>其中7001、7002、7003都是master，我们计划让7002宕机。</p><h3 id="_4-1-自动故障转移" tabindex="-1"><a class="header-anchor" href="#_4-1-自动故障转移"><span>4.1.自动故障转移</span></a></h3><p>当集群中有一个master宕机会发生什么呢？</p><p>直接停止一个redis实例，例如7002：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-cli <span class="token parameter variable">-p</span> <span class="token number">7002</span> <span class="token function">shutdown</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>1）首先是该实例与其它实例失去连接</p><p>2）然后是疑似宕机：</p><p><img src="`+B+'" alt="image-20210725162319490"></p><p>3）最后是确定下线，自动提升一个slave为新的master：</p><p><img src="'+I+'" alt="image-20210725162408979"></p><p>4）当7002再次启动，就会变为一个slave节点了：</p><p><img src="'+J+'" alt="image-20210727160803386"></p><h3 id="_4-2-手动故障转移" tabindex="-1"><a class="header-anchor" href="#_4-2-手动故障转移"><span>4.2.手动故障转移</span></a></h3><p>利用cluster failover命令可以手动让集群中的某个master宕机，切换到执行cluster failover命令的这个slave节点，实现无感知的数据迁移。其流程如下：</p><p><img src="'+A+'" alt="image-20210725162441407"></p><p>这种failover命令可以指定三种模式：</p><ul><li>缺省：默认的流程，如图1~6歩</li><li>force：省略了对offset的一致性校验</li><li>takeover：直接执行第5歩，忽略数据一致性、忽略master状态和其它master的意见</li></ul><p><strong>案例需求</strong>：在7002这个slave节点执行手动故障转移，重新夺回master地位</p><p>步骤如下：</p><p>1）利用redis-cli连接7002这个节点</p><p>2）执行cluster failover命令</p><p>如图：</p><p><img src="'+L+'" alt="image-20210727160037766"></p><p>效果：</p><p><img src="'+p+`" alt="image-20210727161152065"></p><h2 id="_5-redistemplate访问分片集群" tabindex="-1"><a class="header-anchor" href="#_5-redistemplate访问分片集群"><span>⑤ RedisTemplate访问分片集群</span></a></h2><p>RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p><p>1）引入redis的starter依赖</p><p>2）配置分片集群地址</p><p>3）配置读写分离</p><p>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">cluster</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">nodes</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7001</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7002</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7003</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8001</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8002</span></span>
<span class="line">        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8003</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,111))])}const F=t(M,[["render",Z]]),H=JSON.parse('{"path":"/docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/1_Redis_Advanced_Distributed/5-Redis_Advanced_Distributed.html","title":"Redis分片集群","lang":"en-US","frontmatter":{"title":"Redis分片集群","date":"2025/06/19"},"headers":[{"level":2,"title":"① 搭建分片集群","slug":"_1-搭建分片集群","link":"#_1-搭建分片集群","children":[]},{"level":2,"title":"② 散列插槽","slug":"_2-散列插槽","link":"#_2-散列插槽","children":[{"level":3,"title":"2.1.插槽原理","slug":"_2-1-插槽原理","link":"#_2-1-插槽原理","children":[]},{"level":3,"title":"2.2.小结","slug":"_2-2-小结","link":"#_2-2-小结","children":[]}]},{"level":2,"title":"③ 集群伸缩","slug":"_3-集群伸缩","link":"#_3-集群伸缩","children":[{"level":3,"title":"3.1.需求分析","slug":"_3-1-需求分析","link":"#_3-1-需求分析","children":[]},{"level":3,"title":"3.2.创建新的redis实例","slug":"_3-2-创建新的redis实例","link":"#_3-2-创建新的redis实例","children":[]},{"level":3,"title":"3.3.添加新节点到redis","slug":"_3-3-添加新节点到redis","link":"#_3-3-添加新节点到redis","children":[]},{"level":3,"title":"3.4.转移插槽","slug":"_3-4-转移插槽","link":"#_3-4-转移插槽","children":[]}]},{"level":2,"title":"④ 故障转移","slug":"_4-故障转移","link":"#_4-故障转移","children":[{"level":3,"title":"4.1.自动故障转移","slug":"_4-1-自动故障转移","link":"#_4-1-自动故障转移","children":[]},{"level":3,"title":"4.2.手动故障转移","slug":"_4-2-手动故障转移","link":"#_4-2-手动故障转移","children":[]}]},{"level":2,"title":"⑤ RedisTemplate访问分片集群","slug":"_5-redistemplate访问分片集群","link":"#_5-redistemplate访问分片集群","children":[]}],"filePathRelative":"docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/1_Redis_Advanced_Distributed/5-Redis_Advanced_Distributed.md","git":{"createdTime":1750319780000,"updatedTime":1750319780000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{F as comp,H as data};
