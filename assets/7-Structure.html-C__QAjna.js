import{_ as a,c as n,b as t,o as p}from"./app-B_5tQx1u.js";const e="/assets/image-20210925144232258-2552155-CsFbJKOO.png",l="/assets/image-20210925145100623-2552662-BPetK41K.png",i="/assets/image-20210925150249804-2553373-DSkkF61U.png",c="/assets/image-20210925151402729-2554044-DVXD8G8v.png",m="/assets/image-20210925151704396-2554229-BWihI80S.png",o="/assets/image-20210925152022347-2554424-rLWifjsI.png",r="/assets/image-20210925152106736-2554467-BPIxeuVG.png",u="/assets/image-20210925154041922-2555643-DLq3aR91.png",g="/assets/image-20210925155024699-2556227-DA3kXu4d.png",h="/assets/image-20210925154824646-2556106-20JNzLvP.png",d="/assets/image-20210925160541698-2557143-CfeIaFku.png",v="/assets/image-20210925161514328-2557716-BhgzqtWU.png",k="/assets/image-20210925164346230-2559429-BtqhL2d0.png",b="/assets/image-20210925170120469-2560482-BbpbrX4G.png",y="/assets/image-20210925173827354-DJDQHC6P.png",w="/assets/image-20210925215714239-BJLTBAkT.png",x={};function f(_,s){return p(),n("div",null,s[0]||(s[0]=[t('<p><img src="https://artfiles.alphacoders.com/121/thumb-1920-121178.jpg" alt="Download Fantasy Woman Art"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul><li>图的定义</li><li>图的抽象数据类型与存储结构</li><li>图的遍历</li><li>最短路径</li><li>拓扑排序</li></ul></div><h2 id="图的定义" tabindex="-1"><a class="header-anchor" href="#图的定义"><span>图的定义</span></a></h2><p><strong>定义</strong>:图(graph)是由顶点的有穷非空集合和顶点之间的边集合组成 G(V,E)其中G表示图,V是图G的顶点,E是图G中边缘集合</p><blockquote><p>不存在非空图 <em>强调顶点集合V有穷非空</em></p></blockquote><p><img src="'+e+'" alt="image-20210925144232258"></p><p>无向边:使用无序偶对表示 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">v_i,v_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>) 无序对 (A,D) = (D,A)</p><p>有向边:使用有序偶对表示&lt;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">v_i,v_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>&gt; 等价于j结点连向j结点</p><ul><li><p><strong>无向图中,如果任意两个顶点之间存在边,则该图称为无向完全图,含有n个顶点则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\\frac{n\\times(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>条边</strong></p></li><li><p><strong>有向完全图: n<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\times(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">×</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>边</strong></p></li><li><p><strong>加权图</strong>:</p><p><img src="'+l+'" alt="images/7-Structure/image-20210925145100623-2552662.png"></p></li></ul><p><strong>图的顶点与边关系</strong></p><blockquote><p>顶点V的度是和v相关的边数</p><p>路径长度是路径上的边或弧的数目</p><p>开始顶点与最后结束顶点一致的路径为回路/环</p></blockquote><p><strong>连通图</strong></p><blockquote><p>无向图中顶点v到顶点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>v</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">v^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4369em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.4369em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span>存在路径,则v和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>v</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">v^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4369em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.4369em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span>相通,如果对于任意两个顶点都是相通的,则G称为连通图</p></blockquote><h2 id="图的抽象数据类型与存储结构" tabindex="-1"><a class="header-anchor" href="#图的抽象数据类型与存储结构"><span>图的抽象数据类型与存储结构</span></a></h2><p><img src="'+i+'" alt="images/7-Structure/image-20210925150249804-2553373.png"></p><p><strong>存储结构</strong></p><ul><li><p>邻接矩阵</p><p><em>采用二维数组存储图</em></p><p><img src="'+c+'" alt="images/7-Structure/image-20210925151402729-2554044.png"></p><p><strong>无向图的领接矩阵是一个对称矩阵</strong></p><p><img src="'+m+'" alt="images/7-Structure/image-20210925151704396-2554229.png"></p><p><img src="'+o+'" alt="images/7-Structure/image-20210925152022347-2554424.png"></p><p><img src="'+r+`" alt="images/7-Structure/image-20210925152106736-2554467.png"></p><p>邻接矩阵逻辑代码</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line">参数定义</span>
<span class="line">  VertexType vexs <span class="token punctuation">[</span><span class="token punctuation">]</span> 顶点表</span>
<span class="line">  EdgeType are <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 领接矩阵</span>
<span class="line">  <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span> numEdges  当前顶点数和边数</span>
<span class="line"><span class="token keyword">for</span> vexs 获得顶点</span>
<span class="line">  <span class="token keyword">for</span> numVertexes <span class="token operator">-&gt;</span>i</span>
<span class="line">    <span class="token keyword">for</span> numVertexei<span class="token operator">-&gt;</span>j</span>
<span class="line">      new are<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>邻接矩阵耗费空间大</em></p><p><strong>邻接表</strong></p><p>采用数组与链表结合存储方式</p><blockquote><p><em>图G的顶点使用一个一维数组存储,每个数据元素存储指向第一个领接点的指针,便于查找顶点的边信息</em></p><p><em>每个顶点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">v_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的所有邻接点构成一个线性表</em></p><p><img src="`+u+'" alt="images/7-Structure/image-20210925154041922-2555643.png"></p><p>图网存储结构</p><p><img src="'+g+'" alt="images/7-Structure/image-20210925155024699-2556227.png"></p></blockquote><p>有向图使用逆邻接表存储</p><blockquote><p><strong>每个顶点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>都建立一个链表为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>弧头表</strong> (入度表)</p><p><img src="'+h+`" alt="images/7-Structure/image-20210925154824646-2556106.png"></p></blockquote><p>邻接表逻辑代码</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>  <span class="token comment">// 相邻节点下标</span></span>
<span class="line"> EdgeType weight<span class="token punctuation">;</span> <span class="token comment">//存储权值</span></span>
<span class="line"> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span>EdgeNode<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VertexNode</span> <span class="token comment">// 顶点表结点</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  VertexType data<span class="token punctuation">;</span> <span class="token comment">//顶点数据 </span></span>
<span class="line">  EdgeNode <span class="token operator">*</span>firstedge<span class="token punctuation">;</span><span class="token comment">//边表指针</span></span>
<span class="line"><span class="token punctuation">}</span>VertexNode<span class="token punctuation">,</span>AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="images/7-Structure/image-20210925160541698-2557143.png"></p><p><em>邻接表对于有向图无法直接获取入度,必须遍历整个图才能获取</em></p><p><strong>十字链表</strong></p><blockquote><p>定义顶点表结构</p><table><thead><tr><th style="text-align:center;">data</th><th style="text-align:center;">firstin</th><th style="text-align:center;">firstout</th></tr></thead></table><p>定义边表结点结构表</p><table><thead><tr><th>tailvex</th><th>headvex</th><th>headlink</th><th>taillink</th></tr></thead></table><blockquote><p>firstin 表示入边表头指针</p><p>firstout 表示出边表头指针</p><p>tailvex 弧起点在顶点表下标</p><p>headvex 弧终点订单表下标</p><p>headlink入边表域指针域</p></blockquote><p><img src="'+v+'" alt="images/7-Structure/image-20210925161514328-2557716.png"></p></blockquote><p>邻接多重表</p><p>边集数组</p></li></ul><h2 id="图的遍历" tabindex="-1"><a class="header-anchor" href="#图的遍历"><span>图的遍历</span></a></h2><p><strong>深度优先遍历(Depth_First_Search) 类似于树的先序遍历</strong></p><blockquote><p>从图G任意V结点出发,然后从V的未被访问的邻结点上出发深度遍历图,直到图中所有和V相关路径通路的结点都被访问到(向固定方向走,没路返回上一个结点选择)</p><p><img src="'+k+`" alt="images/7-Structure/image-20210925164346230-2559429.png"></p><p><strong>以邻接矩阵为存储结构DFS遍历</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> visited<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">int</span> j<span class="token punctuation">;</span></span>
<span class="line"> <span class="token function">printf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出顶点序号 构成输出序列</span></span>
<span class="line"> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">     <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// arsc[i][j] ==1 表示存在边 </span></span>
<span class="line">         <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以邻接表为存储结构DFS遍历</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> visited<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>ALGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"> EdgeNode <span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token punctuation">;</span></span>
<span class="line"> <span class="token function">printf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"> p<span class="token operator">=</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>link<span class="token punctuation">;</span> <span class="token comment">// 取vi邻接表代表的指针</span></span>
<span class="line"> <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  j<span class="token operator">=</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">;</span> <span class="token comment">// j为邻接表序号(下标)</span></span>
<span class="line">     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> </span>
<span class="line">     <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>广度优先遍历 BFS(类似于树的层序遍历)</strong></p><p><img src="`+b+'" alt="images/7-Structure/image-20210925170120469-2560482.png"></p><blockquote></blockquote><p><strong>最小生成树</strong></p><ul><li><p><strong>普里姆算法</strong></p><p>以顶点为主导 取图上任意顶点N,遍历与N相邻结点获取最小权值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,将N与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值存入集合,下次查询以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>开始遍历相邻顶点获取最小权值</p><p><img src="'+y+'" alt="images/7-Structure/image-20210925173827354.png"></p></li><li><p><strong>克鲁斯卡尔算法</strong></p><blockquote><p>以边为主导地址,始终选择当前可用最小边权的边,选出图上权值最小的边,存入集合,第二次获取第二小的边存入集合</p></blockquote></li></ul><h2 id="最短路径" tabindex="-1"><a class="header-anchor" href="#最短路径"><span>最短路径</span></a></h2><ul><li><p><strong>迪杰斯特拉算法</strong></p><ul><li><blockquote><p>以起点为中心向外层扩展,直到终点为止,存在集合S与集合U,S记录求出最短路径顶点,U记录还未求出最短路径顶点</p><p><em>初始时，S中只有起点s；U中是除s之外的顶点，并且U中顶点的路径是&quot;起点s到该顶点的路径&quot;。然后，从U中找出路径最短的顶点，并将其加入到S中；接着，更新U中的顶点和顶点对应的路径。 然后，再从U中找出路径最短的顶点，并将其加入到S中；接着，更新U中的顶点和顶点对应的路径。 ... 重复该操作，直到遍历完所有顶点</em></p></blockquote></li></ul></li><li><p><strong>弗洛伊德算法</strong></p></li></ul><h2 id="拓扑排序" tabindex="-1"><a class="header-anchor" href="#拓扑排序"><span>拓扑排序</span></a></h2><p><strong>在一个表示工程的有向图中,用顶点表示活动,用弧表示活动之间优先关系,这样的图表示的活动网,称为AOV网(不存在环路的图)</strong></p><p><img src="'+w+'" alt="image-20210925215714239"></p><p>拓扑序列(图中顶点存在顺序排列)</p>',31)]))}const M=a(x,[["render",f]]),S=JSON.parse('{"path":"/docs/Computer/Computer/5_Structure/7-Structure.html","title":"图","lang":"en-US","frontmatter":{"title":"图","date":"2025/07/04"},"headers":[{"level":2,"title":"图的定义","slug":"图的定义","link":"#图的定义","children":[]},{"level":2,"title":"图的抽象数据类型与存储结构","slug":"图的抽象数据类型与存储结构","link":"#图的抽象数据类型与存储结构","children":[]},{"level":2,"title":"图的遍历","slug":"图的遍历","link":"#图的遍历","children":[]},{"level":2,"title":"最短路径","slug":"最短路径","link":"#最短路径","children":[]},{"level":2,"title":"拓扑排序","slug":"拓扑排序","link":"#拓扑排序","children":[]}],"filePathRelative":"docs/Computer/Computer/5_Structure/7-Structure.md","git":{"createdTime":1751621258000,"updatedTime":1751621258000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{M as comp,S as data};
