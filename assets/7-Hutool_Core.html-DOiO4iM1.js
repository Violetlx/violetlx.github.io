import{_ as e,c as l,b as s,a,d as t,e as c,r as o,o as i}from"./app-DJjQCWUF.js";const u={},d={href:"https://www.ibm.com/developerworks/cn/xml/x-javaxpathapi.html",target:"_blank",rel:"noopener noreferrer"};function r(k,n){const p=o("ExternalLinkIcon");return i(),l("div",null,[n[2]||(n[2]=s('<p><img src="https://bizhi1.com/wp-content/uploads/2024/08/silhouette-starry-sky-desktop-wallpaper-small.jpg" alt="星空桌面壁纸"></p><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 概述</p><p>② 字符串工具-StrUtil</p><p>③ 16进制工具-HexUtil</p><p>④ Escape工具-EscapeUtil</p><p>⑤ Hash算法-HashUtil</p><p>⑥ URL工具-URLUtil</p><p>⑦ XML工具-XmlUtil</p><p>⑧ 对象工具-ObjectUtil</p><p>⑨ 反射工具-ReflectUtil</p><p>⑩ 泛型类型工具-TypeUtil</p><p>⑪ 分页工具-PageUtil</p><p>⑫ 剪贴板工具-ClipboardUtil</p><p>⑬ 类工具-ClassUtil</p><p>⑭ 枚举工具-EnumUtil</p><p>⑮ 命令行工具-RuntimeUtil</p><p>⑯ 数字工具-NumberUtil</p><p>⑰ 数组工具-ArrayUtil</p><p>⑱ 随机工具-RandomUtil</p><p>⑲ 唯一ID工具-IdUtil</p><p>⑳ 压缩工具-ZipUtil</p><p>㉑ 引用工具-ReferenceUtil</p><p>㉒ 正则工具-ReUtil</p><p>㉓ 身份证工具-IdcardUtil</p><p>㉔ 信息脱敏工具-DesensitizedUtil</p><p>㉕ 社会信用代码工具-CreditCodeUtil</p><p>㉖ SPI加载工具-ServiceLoaderUtil</p><p>㉗ 字符编码工具-CharseUtil</p><p>㉘ 类加载工具-ClassLoaderUtil</p></div><h2 id="_7-xml工具-xmlutil" tabindex="-1"><a class="header-anchor" href="#_7-xml工具-xmlutil"><span>⑦ XML工具-XmlUtil</span></a></h2><h3 id="_1-由来" tabindex="-1"><a class="header-anchor" href="#_1-由来"><span>1 由来</span></a></h3><p>在日常编码中，我们接触的最多的除了 JSON 外，就是 XML 格式了，一般而言，我们首先想到的是引入 <code>Dom4j</code> 包，却不知 JDK 已经封装有 XML 解析和构建工具：w3c dom 。但是由于这个 API 操作比较比较繁琐，因此 Hutool 中提供了 XmlUtil 简化 XML 的创建、读和写的过程。</p><h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2 使用</span></a></h3><p><strong>① 读取 XML</strong></p><p>读取 XML 分为两个方法：</p><ul><li><code>XmlUtil.readXML</code> 读取 XML 文件</li><li><code>XmlUtil.parseXml</code> 解析 XML 字符串为 Document 对象</li></ul><p><strong>② 写 XML</strong></p><ul><li><code>XmlUtil.toStr</code> 将 XML 文档换为 String</li><li><code>XmlUtil.toFile</code> 将 XML 文档写入到文件</li></ul><p><strong>③ 创建 XML</strong></p><ul><li>XmlUtil.createXml 创建 XML 文档，创建的 XML 默认是 utf8 编码，修改编码的过程是在 toStr 和 toFile 方法里，即 XML 在转为文本的时候才定义编码。</li></ul><p><strong>④ XML 操作</strong></p><p>通过以下工具方法，可以完成基本的结点读取操作。</p><ul><li><code>XmlUtil.cleanInvalid</code> 去除XML文本中的无效字符</li><li><code>XmlUtil.getElements</code> 根据节点名获得子节点列表</li><li><code>XmlUtil.getElement</code> 根据节点名获得第一个子节点</li><li><code>XmlUtil.elementText</code> 根据节点名获得第一个子节点的文本值</li><li><code>XmlUtil.transElements</code> 将NodeList转换为Element列表</li></ul><p><strong>⑤ XML 与对象转换</strong></p><ul><li><code>writeObjectAsXml</code> 将可序列化的对象转换为 XML 写入文件，已经存在的文件将被覆盖。</li><li><code>readObjectFromXml</code> 从 XML 中读取对象。</li></ul><blockquote><p>注意，这两个方法严重依赖 JDK 的 <code>XMLEncoder</code> 和 <code>XMLDecoder</code> ，生成和解析必须成对存在（遵循固定格式），普通的 XML 转 Bean 会报错。</p></blockquote><p><strong>⑥ Xpath 操作</strong></p>',21)),a("p",null,[n[1]||(n[1]=t("Xpath 的更多介绍请看文章：")),a("a",d,[n[0]||(n[0]=t("https://www.ibm.com/developerworks/cn/xml/x-javaxpathapi.html")),c(p)])]),n[3]||(n[3]=s(`<ul><li><code>createXPath</code> 创建Xpath</li><li>getByXPath 通过XPath 方式读取 XML 结点等信息</li></ul><p>例子：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returnsms</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returnstatus</span><span class="token punctuation">&gt;</span></span>Success（成功）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returnstatus</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">&gt;</span></span>ok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remainpoint</span><span class="token punctuation">&gt;</span></span>1490<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remainpoint</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>taskID</span><span class="token punctuation">&gt;</span></span>885<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>taskID</span><span class="token punctuation">&gt;</span></span>  </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>successCounts</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>successCounts</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returnsms</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Document</span> docResult<span class="token operator">=</span><span class="token class-name">XmlUtil</span><span class="token punctuation">.</span><span class="token function">readXML</span><span class="token punctuation">(</span>xmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果为“ok”</span></span>
<span class="line"><span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token class-name">XmlUtil</span><span class="token punctuation">.</span><span class="token function">getByXPath</span><span class="token punctuation">(</span><span class="token string">&quot;//returnsms/message&quot;</span><span class="token punctuation">,</span> docResult<span class="token punctuation">,</span> <span class="token class-name">XPathConstants</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结"><span>3 总结</span></a></h3><p>XmlUtil 只是 w3c dom 的简单工具化封装，减少操作 dom 的难度，如果项目对 XML 依赖比较大，依旧推荐 Dom4j 框架。</p><h2 id="_8-对象工具-objectutil" tabindex="-1"><a class="header-anchor" href="#_8-对象工具-objectutil"><span>⑧ 对象工具-ObjectUtil</span></a></h2><h3 id="_1-由来-1" tabindex="-1"><a class="header-anchor" href="#_1-由来-1"><span>1 由来</span></a></h3><p>在我们的日常使用中，有些方法是针对 Object 通用的，这些方法不区分何种对象，针对这些方法，Hutool 封装为 <code>ObjectUtil</code> 。</p><h3 id="_2-方法" tabindex="-1"><a class="header-anchor" href="#_2-方法"><span>2 方法</span></a></h3><p><strong>① 默认值</strong></p><p>借助于 Lambda 表达式，ObjectUtil 可以完成判断给定的值是否为 null ，不为 null 执行特定逻辑的功能。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token class-name">String</span> dateStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 此处判断如果dateStr为null，则调用\`Instant.now()\`，不为null则执行\`DateUtil.parse\`</span></span>
<span class="line"><span class="token class-name">Instant</span> result1 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> <span class="token class-name">DatePattern</span><span class="token punctuation">.</span><span class="token constant">NORM_DATETIME_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 默认值</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">String</span> dateStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 此处判断如果dateStr为null，则调用\`Instant.now()\`，不为null则执行\`DateUtil.parse\`</span></span>
<span class="line">        <span class="token class-name">Instant</span> result1 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> <span class="token class-name">DatePattern</span><span class="token punctuation">.</span><span class="token constant">NORM_DATETIME_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--result1==&gt;&quot;</span><span class="token operator">+</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--result1==&gt;2024-12-28T08:53:35.248301200Z</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② ObjectUtil.eaqual</strong></p><p>比较两个对象是否相等，相等需满足以下条件之一：</p><ol><li><code>obj1 == null &amp;&amp; obj2 == null</code></li><li><code>obj1.equals(obj2)</code></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Object</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Object</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// true</span></span>
<span class="line"><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 ObjectUtil.eaqual</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;str1&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;str2&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;str1&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 比较两个对象是否相等，如果两个对象为null，则返回true</span></span>
<span class="line">        <span class="token keyword">boolean</span> result1 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--result1==&gt;&quot;</span><span class="token operator">+</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 比较两个对象是否相等，如果两个对象为null，则返回false</span></span>
<span class="line">        <span class="token keyword">boolean</span> result2 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--result2==&gt;&quot;</span><span class="token operator">+</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--result1==&gt;false</span></span>
<span class="line">        <span class="token comment">//test2--result2==&gt;true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ ObjectUtil.length</strong></p><p>计算对象长度，如果是字符串调用其 length 方法，集合类调用其 size 方法，数组调用其 length 属性，其他可遍历对象遍历计算长度。</p><p>支持的类型包括：</p><ul><li><code>CharSequence</code></li><li><code>Collection</code></li><li><code>Map</code></li><li><code>Iterator</code></li><li><code>Enumeration</code></li><li><code>Array</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5</span></span>
<span class="line"><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3</span></span>
<span class="line">length <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3 ObjectUtil.length</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 5</span></span>
<span class="line">        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--length==&gt;&quot;</span><span class="token operator">+</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3</span></span>
<span class="line">        length <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--length==&gt;&quot;</span><span class="token operator">+</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--length==&gt;5</span></span>
<span class="line">        <span class="token comment">//test3--length==&gt;3</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ ObjectUtil.contains</strong></p><p>对象中是否包含元素</p><p>支持的对象类型包括：</p><ul><li><code>String</code></li><li><code>Collection</code></li><li><code>Map</code></li><li><code>Iterator</code></li><li><code>Enumeration</code></li><li><code>Array</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">boolean</span> contains <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 4 ObjectUtil.contains</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// true</span></span>
<span class="line">        <span class="token keyword">boolean</span> contains <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--contains==&gt;&quot;</span><span class="token operator">+</span>contains<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> contains1 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--contains1==&gt;&quot;</span><span class="token operator">+</span>contains1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test4--contains==&gt;true</span></span>
<span class="line">        <span class="token comment">//test4--contains1==&gt;false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑤ 判断是否为 null</strong></p><ul><li><code>ObjectUtil.isNull</code></li><li><code>ObjectUtil.isNotNull</code></li></ul><blockquote><p>注意：此方法不能判断对象中字段为空的情况，如果需要检查 Bean 对象中字段是否全空，请使用 <code>BeanUtil.isEmpty</code> 。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 5 判断是否为 null</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;str2&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// true</span></span>
<span class="line">        <span class="token keyword">boolean</span> result1 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--result1==&gt;&quot;</span><span class="token operator">+</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// false</span></span>
<span class="line">        <span class="token keyword">boolean</span> result2 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--result2==&gt;&quot;</span><span class="token operator">+</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> notEmpty <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--notEmpty==&gt;&quot;</span><span class="token operator">+</span>notEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> notEmpty1 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test5--notEmpty1==&gt;&quot;</span><span class="token operator">+</span>notEmpty1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test5--result1==&gt;true</span></span>
<span class="line">        <span class="token comment">//test5--result2==&gt;false</span></span>
<span class="line">        <span class="token comment">//test5--notEmpty==&gt;false</span></span>
<span class="line">        <span class="token comment">//test5--notEmpty1==&gt;true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑥ 克隆</strong></p><ul><li><code>ObjectUtil.clone</code> 克隆对象，如果对象实现 Cloneable 接口，调用其 clone 方法，如果实现 Serializable 接口，执行深度克隆，否则返回 null 。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Class</span> <span class="token class-name">Obj</span> <span class="token keyword">extends</span> <span class="token class-name">CloneSupport</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Obj</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Obj</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Obj</span> obj2 <span class="token operator">=</span> <span class="token class-name">ObjctUtil</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// OK</span></span>
<span class="line">obj2<span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ObjectUtil.cloneIfPossible</code> 返回克隆后的对象，如果克隆失败，返回原对象</li><li><code>ObjectUtil.cloneByStream</code> 序列化后拷贝流的方式克隆，对象必须实现 Serializable 接口</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 6 克隆</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test6--student==&gt;&quot;</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Student</span> clone <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test6--clone==&gt;&quot;</span><span class="token operator">+</span>clone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// OK</span></span>
<span class="line">        clone<span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 返回克隆后的对象，如果克隆失败，返回原对象</span></span>
<span class="line">        <span class="token class-name">Student</span> cloneIfPossible <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">cloneIfPossible</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test6--cloneIfPossible==&gt;&quot;</span><span class="token operator">+</span>cloneIfPossible<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 序列化后拷贝流的方式克隆，对象必须实现Serializable接口</span></span>
<span class="line">        <span class="token class-name">Student</span> cloneByStream <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">cloneByStream</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test6--cloneByStream==&gt;&quot;</span><span class="token operator">+</span>cloneByStream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test6--student==&gt;Student(name=张三, age=18)</span></span>
<span class="line">        <span class="token comment">//test6--clone==&gt;Student(name=张三, age=18)</span></span>
<span class="line">        <span class="token comment">//张三在学习！</span></span>
<span class="line">        <span class="token comment">//test6--cloneIfPossible==&gt;Student(name=张三, age=18)</span></span>
<span class="line">        <span class="token comment">//test6--cloneByStream==&gt;Student(name=张三, age=18)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑦ 序列化和反序列化</strong></p><ul><li><code>serialize</code> 序列化，调用 JDK 序列化</li><li><code>deserialize</code> 反序列化，调用 JDK</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 7 序列化和反序列化</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test7--student==&gt;&quot;</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 序列化</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test7--bytes==&gt;&quot;</span><span class="token operator">+</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 反序列化</span></span>
<span class="line">        <span class="token class-name">Student</span> deserialize <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test7--deserialize==&gt;&quot;</span><span class="token operator">+</span>deserialize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test7--student==&gt;Student(name=张三, age=18)</span></span>
<span class="line">        <span class="token comment">//test7--bytes==&gt;[B@61a52fbd</span></span>
<span class="line">        <span class="token comment">//test7--deserialize==&gt;Student(name=张三, age=18)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑧ 判断基本类型</strong></p><p><code>ObjectUtil.isBasicType</code> 判断是否为基本类型，包括包装类型和原始类型。</p><p>包括类型：</p><ul><li><code>Boolean</code></li><li><code>Byte</code></li><li><code>Character</code></li><li><code>Double</code></li><li><code>Float</code></li><li><code>Integer</code></li><li><code>Long</code></li><li><code>Short</code></li></ul><p>原始类型：</p><ul><li><code>boolean</code></li><li><code>byte</code></li><li><code>char</code></li><li><code>double</code></li><li><code>float</code></li><li><code>int</code></li><li><code>long</code></li><li><code>short</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">boolean</span> basicType <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isBasicType</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 8 判断基本类型</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// true</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token keyword">boolean</span> basicType <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isBasicType</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--basicType==&gt;&quot;</span><span class="token operator">+</span>basicType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// false</span></span>
<span class="line">        <span class="token keyword">boolean</span> basicType1 <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isBasicType</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--basicType1==&gt;&quot;</span><span class="token operator">+</span>basicType1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--basicType==&gt;true</span></span>
<span class="line">        <span class="token comment">//test1--basicType1==&gt;false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-反射工具-reflectutil" tabindex="-1"><a class="header-anchor" href="#_9-反射工具-reflectutil"><span>⑨ 反射工具-ReflectUtil</span></a></h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1 介绍</span></a></h3><p>Java 的反射机制，可以让语言变得更加灵活，对对象的操作也更加<code>动态</code>，因此在某些情况下，反射可以做到事半功倍的效果。Hutool 针对 Java 的反射机制做了工具化封装，封装包括：</p><ol><li>获取构造方法</li><li>获取字段</li><li>获取字段值</li><li>获取方法</li><li>执行方法（对象方法和静态方法）</li></ol><h3 id="_2-使用-1" tabindex="-1"><a class="header-anchor" href="#_2-使用-1"><span>2 使用</span></a></h3><p><strong>① 获取某个类的所有方法</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token class-name">ExamInfoDict</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 获取某个类的所有方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--method==&gt;&quot;</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;setA</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;getA</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;finalize</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;wait</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;wait</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;wait</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;equals</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;toString</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;hashCode</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;getClass</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;clone</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;notify</span></span>
<span class="line">        <span class="token comment">//test1--method==&gt;notifyAll</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② 获取某个类的指定方法</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">ExamInfoDict</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;getId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 获取某个类的指定方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;setA&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--method==&gt;&quot;</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--method==&gt;setA</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ 构造对象</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">ExamInfoDict</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3 构造对象</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TestClass</span> testClass <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        testClass<span class="token punctuation">.</span><span class="token function">setA</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--testClass.getA()==&gt;&quot;</span><span class="token operator">+</span>testClass<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--testClass.getA()==&gt;10</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ 执行方法</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> a<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">TestClass</span> testClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testClass<span class="token punctuation">,</span> <span class="token string">&quot;setA&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 4 反射工具</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TestClass</span> testClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>testClass<span class="token punctuation">,</span> <span class="token string">&quot;setA&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> a <span class="token operator">=</span> testClass<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--a==&gt;&quot;</span><span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--a==&gt;10</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-泛型类型工具-typeutil" tabindex="-1"><a class="header-anchor" href="#_10-泛型类型工具-typeutil"><span>⑩ 泛型类型工具-TypeUtil</span></a></h2><h3 id="_1-介绍-1" tabindex="-1"><a class="header-anchor" href="#_1-介绍-1"><span>1 介绍</span></a></h3><p>针对 <code>java.lang.reflect.Type</code> 的工具类封装，最主要功能包括：</p><ol><li>获取方法的参数和反沪指类型（包括 Type 和 Class）</li><li>获取泛型参数类型（包括对象的泛型参数或集合元素的泛型类型）</li></ol><h3 id="_2-方法-1" tabindex="-1"><a class="header-anchor" href="#_2-方法-1"><span>2 方法</span></a></h3><p>首先我们定义一个类：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">intTest</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>① getClass</strong></p><p>获得 Type 对应的原始类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 getClass</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取type对应的原始类</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--clazz==&gt;&quot;</span><span class="token operator">+</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--clazz==&gt;class com.hutool.core.tool.TestClass</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② getParamType</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;intTest&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getParamType</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果：Integer.class</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取方法参数的泛型类型</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 getParamType</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取方法参数类型</span></span>
<span class="line">        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;intTest&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getParamType</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--type==&gt;&quot;</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--type==&gt;class java.lang.Integer</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ getReturnType</strong></p><p>获取方法的返回值类型</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;getList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果：java.util.List&lt;java.lang.String&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3 getReturnType</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取方法返回类型</span></span>
<span class="line">        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;intTest&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--type==&gt;&quot;</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--type==&gt;class java.lang.Integer</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ getTypeArgument</strong></p><p>获取泛型类子类中泛型的填充类型</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;getList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Type</span> type2 <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getTypeArgument</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果：String.class</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 4 getTypeArgument</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//获取泛型类子类中泛型的填充类型</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取泛型类型</span></span>
<span class="line">        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;getList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Type</span> type2 <span class="token operator">=</span> <span class="token class-name">TypeUtil</span><span class="token punctuation">.</span><span class="token function">getTypeArgument</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 结果：String.class</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4--type==&gt;&quot;</span><span class="token operator">+</span>type2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test4--type==&gt;class java.lang.String</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-分页工具-pageutil" tabindex="-1"><a class="header-anchor" href="#_11-分页工具-pageutil"><span>⑪ 分页工具-PageUtil</span></a></h2><h3 id="_1-由来-2" tabindex="-1"><a class="header-anchor" href="#_1-由来-2"><span>1 由来</span></a></h3><p>分页工具类并不是数据库分页的封装，而是分页方式的转换。在我们手动分页的时候，常常用页码+每页个数的方式，但是有些数据库需要使用开始位置和结束位置来表示。很多时候这种转换容易出错（边界问题），于是封装了 PageUtil 工具类。</p><h3 id="_2-兼容性" tabindex="-1"><a class="header-anchor" href="#_2-兼容性"><span>2 兼容性</span></a></h3><ol><li>版本 &lt; 5.2.5 初始页码为 1</li><li>版本 &gt;= 5.2.5 初始页码为 0</li></ol><h3 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用"><span>3 使用</span></a></h3><p><strong>① transToStartEnd</strong></p><p>将页数和每页条数目转换为开始位置和结束位置。此方法用于包括结束位置的分页方法。</p><p>例如：</p><ul><li>页码：0，每页10-&gt;[0,10]</li><li>页码：1，每页10-&gt;[10,20]</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> startEnd1 <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">transToStartEnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[0, 10]</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> startEnd2 <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">transToStartEnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[10, 20]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>方法中，页码从 0 开始，位置从 0 开始</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1 transToStartEnd</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//将页数和每页条数目转换为开始位置和结束位置。此方法用于包括结束位置的分页方法。</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//[0, 10]</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> startEnd1 <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">transToStartEnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--startEnd1==&gt;&quot;</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>startEnd1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//[10, 20]</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> startEnd2 <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">transToStartEnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--startEnd2==&gt;&quot;</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>startEnd2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--startEnd1==&gt;[0, 10]</span></span>
<span class="line">        <span class="token comment">//test1--startEnd2==&gt;[10, 20]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② totalPage</strong></p><p>根据总数和每页个数计算总页数</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> totalPage <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">totalPage</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2 totalPage</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//计算总页数</span></span>
<span class="line">        <span class="token keyword">int</span> totalPage <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">totalPage</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--totalPage==&gt;&quot;</span><span class="token operator">+</span>totalPage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--totalPage==&gt;10</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ 分页彩虹算法</strong></p><p>在页面上显示下一页，常常需要显示到 N 页和后 N 页，<code>PageUtil.rainbow</code> 作用于此。</p><p>例如我们当前页面为第5页，共有20页，只显示6个页码，显示的分页列表为：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">上一页 <span class="token number">3</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> 下一页</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//参数意义分别为：当前页、总页数、每屏展示的页数</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rainbow <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">rainbow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：[3, 4, 5, 6, 7, 8]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3 分页彩虹算法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//分页彩虹算法</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rainbow <span class="token operator">=</span> <span class="token class-name">PageUtil</span><span class="token punctuation">.</span><span class="token function">rainbow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--rainbow==&gt;&quot;</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>rainbow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--rainbow==&gt;[3, 4, 5, 6, 7, 8]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-剪贴板工具-clipboardutil" tabindex="-1"><a class="header-anchor" href="#_12-剪贴板工具-clipboardutil"><span>⑫ 剪贴板工具-ClipboardUtil</span></a></h2><h3 id="_1-介绍-2" tabindex="-1"><a class="header-anchor" href="#_1-介绍-2"><span>1 介绍</span></a></h3><p>Hutool 在3.2.0+ 中新增了 <code>ClipboardUtil</code> 这个类用于简化操作剪贴板（当然使用场景被局限）。</p><h3 id="_2-使用-2" tabindex="-1"><a class="header-anchor" href="#_2-使用-2"><span>2 使用</span></a></h3><p><code>ClipboardUtil</code> 封装了几个常用的静态方法</p><p><strong>① 通用方法</strong></p><ul><li><code>getClipboard</code> 获取系统剪贴板</li><li><code>set</code> 设置内容到剪贴板</li><li><code>get</code> 获取剪贴板内容</li></ul><p><strong>② 针对文本</strong></p><ul><li><code>setStr</code> 设置文本到剪贴板</li><li><code>getStr</code> 从剪贴板获取文本</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 针对文本</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 先右键复制内容到剪贴板再测试</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取剪贴板内容</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">ClipboardUtil</span><span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--str==&gt;&quot;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//设置剪贴板内容</span></span>
<span class="line">        <span class="token class-name">ClipboardUtil</span><span class="token punctuation">.</span><span class="token function">setStr</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//获取剪贴板内容</span></span>
<span class="line">        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">ClipboardUtil</span><span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--str1==&gt;&quot;</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--str==&gt;hello world</span></span>
<span class="line">        <span class="token comment">//test2--str1==&gt;hello world</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 针对 Image 对象（图片）</p><ul><li><code>setImage</code> 设置图片到剪贴板</li><li><code>getImage</code> 从剪贴板获取图片</li></ul>`,127))])}const v=e(u,[["render",r],["__file","7-Hutool_Core.html.vue"]]),b=JSON.parse('{"path":"/docs/Java/Hutool/2_Hutool_Core/7-Hutool_Core.html","title":"Hutool-Core核心（七）","lang":"en-US","frontmatter":{"title":"Hutool-Core核心（七）","date":"2024/12/25"},"headers":[{"level":2,"title":"工具类","slug":"工具类","link":"#工具类","children":[]},{"level":2,"title":"⑦ XML工具-XmlUtil","slug":"_7-xml工具-xmlutil","link":"#_7-xml工具-xmlutil","children":[{"level":3,"title":"1 由来","slug":"_1-由来","link":"#_1-由来","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用","link":"#_2-使用","children":[]},{"level":3,"title":"3 总结","slug":"_3-总结","link":"#_3-总结","children":[]}]},{"level":2,"title":"⑧ 对象工具-ObjectUtil","slug":"_8-对象工具-objectutil","link":"#_8-对象工具-objectutil","children":[{"level":3,"title":"1 由来","slug":"_1-由来-1","link":"#_1-由来-1","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法","link":"#_2-方法","children":[]}]},{"level":2,"title":"⑨ 反射工具-ReflectUtil","slug":"_9-反射工具-reflectutil","link":"#_9-反射工具-reflectutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍","link":"#_1-介绍","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用-1","link":"#_2-使用-1","children":[]}]},{"level":2,"title":"⑩ 泛型类型工具-TypeUtil","slug":"_10-泛型类型工具-typeutil","link":"#_10-泛型类型工具-typeutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-1","link":"#_1-介绍-1","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法-1","link":"#_2-方法-1","children":[]}]},{"level":2,"title":"⑪ 分页工具-PageUtil","slug":"_11-分页工具-pageutil","link":"#_11-分页工具-pageutil","children":[{"level":3,"title":"1 由来","slug":"_1-由来-2","link":"#_1-由来-2","children":[]},{"level":3,"title":"2 兼容性","slug":"_2-兼容性","link":"#_2-兼容性","children":[]},{"level":3,"title":"3 使用","slug":"_3-使用","link":"#_3-使用","children":[]}]},{"level":2,"title":"⑫ 剪贴板工具-ClipboardUtil","slug":"_12-剪贴板工具-clipboardutil","link":"#_12-剪贴板工具-clipboardutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-2","link":"#_1-介绍-2","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用-2","link":"#_2-使用-2","children":[]}]}],"filePathRelative":"docs/Java/Hutool/2_Hutool_Core/7-Hutool_Core.md","git":{"createdTime":1735284834000,"updatedTime":1735805958000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":3}]}}');export{v as comp,b as data};
