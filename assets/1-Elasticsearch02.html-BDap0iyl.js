import{_ as l,c as o,b as e,a as n,d as a,e as t,r as i,o as c}from"./app-CNHi2u4I.js";const r="/assets/image-20250624152829846-BQTj5QOy.png",u="/assets/image-20250624152901826-DyMEaFMI.png",d="/assets/image-20250624152935480-BcIzBsSY.png",k="/assets/image-20250624152951827-LbthQu3g.png",m="/assets/image-20250624153057117-D6RM-4FU.png",v="/assets/image-20250624153213448-DjDqrKSD.png",g="/assets/image-20250624153236986-D5erYRH4.png",b="/assets/image-20250624153334135-C7i8YfQb.png",h="/assets/image-20250624153345435-1k1-k3DH.png",q="/assets/image-20250624153408139-DQrTBO9g.png",y="/assets/image-20250624153453663-BG7RJUsD.png",_="/assets/image-20250624154957327-BHfuaeVS.png",f="/assets/image-20250624155034427-Zu_-ZhKG.png",w="/assets/image-20250624155133341-EJXMO8gO.png",j="/assets/image-20250624155155973-Dq4ZoxJq.png",x={},E={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/full-text-queries.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/term-level-queries.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/compound-queries.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/sort-search-results.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html",target:"_blank",rel:"noopener noreferrer"};function J(M,s){const p=i("ExternalLinkIcon");return c(),o("div",null,[s[13]||(s[13]=e('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/kitten-3840x2160-adorable-sweet-minimalist-charming.jpg" alt="小猫 可爱的 甜的 极简主义者 可爱的 迷人的"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 快速入门</p><p>2 叶子查询</p><p>3 复合查询</p><p>4 排序</p><p>5 分页</p><p>6 高亮</p><p>7 总结</p></div><p>在昨天的学习中，我们已经导入了大量数据到elasticsearch中，实现了商品数据的存储。不过查询商品数据时依然采用的是根据id查询，而非模糊搜索。</p>',3)),n("p",null,[s[1]||(s[1]=a("所以今天，我们来研究下elasticsearch的数据搜索功能。Elasticsearch提供了基于JSON的DSL（")),n("a",E,[s[0]||(s[0]=a("Domain Specific Language")),t(p)]),s[2]||(s[2]=a("）语句来定义查询条件，其JavaAPI就是在组织DSL条件。"))]),s[14]||(s[14]=e(`<p>因此，我们先学习DSL的查询语法，然后再基于DSL来对照学习JavaAPI，就会事半功倍。</p><p>Elasticsearch的查询可以分为两大类：</p><ul><li><strong>叶子查询（Leaf</strong> <strong>query</strong> <strong>clauses）</strong>：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。</li><li><strong>复合查询（Compound</strong> <strong>query</strong> <strong>clauses）</strong>：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式。</li></ul><h2 id="_1-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-快速入门"><span>1 快速入门</span></a></h2><p>我们依然在Kibana的DevTools中学习查询的DSL语法。首先来看查询的语法结构：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;查询类型&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// .. 查询条件</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><code>GET /{索引库名}/_search</code>：其中的<code>_search</code>是固定路径，不能修改</li></ul><p>例如，我们以最简单的无条件查询为例，无条件查询的类型是：match_all，因此其查询语句如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /items/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于match_all无条件，所以条件位置不写即可。</p><p>执行结果如下：</p><p><img src="`+r+'" alt="image-20250624152829846"></p><p>你会发现虽然是match_all，但是响应结果中并不会包含索引库中的所有文档，而是仅有10条。这是因为处于安全考虑，elasticsearch设置了默认的查询页数。</p><h2 id="_2-叶子查询" tabindex="-1"><a class="header-anchor" href="#_2-叶子查询"><span>2 叶子查询</span></a></h2><p>叶子查询的类型也可以做进一步细分，详情大家可以查看官方文档：</p>',16)),n("p",null,[n("a",T,[s[3]||(s[3]=a("https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html")),t(p)])]),s[15]||(s[15]=e('<p>如图：</p><p><img src="'+u+'" alt="image-20250624152901826"></p><p>这里列举一些常见的，例如：</p><ul><li><strong>全文检索查询（Full Text Queries）</strong>：利用分词器对用户输入搜索条件先分词，得到词条，然后再利用倒排索引搜索词条。例如： <ul><li><code>match</code>：</li><li><code>multi_match</code></li></ul></li><li><strong>精确查询（Term-level queries）</strong>：不对用户输入搜索条件分词，根据字段内容精确值匹配。但只能查找keyword、数值、日期、boolean类型的字段。例如： <ul><li><code>ids</code></li><li><code>term</code></li><li><code>range</code></li></ul></li><li><strong>地理坐标查询</strong>**：**用于搜索地理位置，搜索方式很多，例如： <ul><li><code>geo_bounding_box</code>：按矩形搜索</li><li><code>geo_distance</code>：按点和半径搜索</li></ul></li><li>...略</li></ul><h3 id="_2-1-全文检索查询" tabindex="-1"><a class="header-anchor" href="#_2-1-全文检索查询"><span>2.1 全文检索查询</span></a></h3><p>全文检索的种类也很多，详情可以参考官方文档：</p>',6)),n("p",null,[n("a",D,[s[4]||(s[4]=a("https://www.elastic.co/guide/en/elasticsearch/reference/7.12/full-text-queries.html")),t(p)])]),s[16]||(s[16]=e(`<p>以全文检索中的<code>match</code>为例，语法如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span> <span class="token string">&quot;搜索条件&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p><img src="`+d+`" alt="image-20250624152935480"></p><p>与<code>match</code>类似的还有<code>multi_match</code>，区别在于可以同时对多个字段搜索，而且多个字段都要满足，语法示例：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;multi_match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;搜索条件&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;字段1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;字段2&quot;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p><img src="`+k+'" alt="image-20250624152951827"></p><h3 id="_2-2-精确查询" tabindex="-1"><a class="header-anchor" href="#_2-2-精确查询"><span>2.2 精确查询</span></a></h3><p>精确查询，英文是<code>Term-level query</code>，顾名思义，词条级别的查询。也就是说不会对用户输入的搜索条件再分词，而是作为一个词条，与搜索的字段内容精确值匹配。因此推荐查找<code>keyword</code>、数值、日期、<code>boolean</code>类型的字段。例如：</p><ul><li>id</li><li>price</li><li>城市</li><li>地名</li><li>人名</li></ul><p>等等，作为一个整体才有含义的字段。</p><p>详情可以查看官方文档：</p>',13)),n("p",null,[n("a",S,[s[5]||(s[5]=a("https://www.elastic.co/guide/en/elasticsearch/reference/7.12/term-level-queries.html")),t(p)])]),s[17]||(s[17]=e(`<p>以<code>term</code>查询为例，其语法如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;搜索条件&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p><img src="`+m+'" alt="image-20250624153057117"></p><p>当你输入的搜索条件不是词条，而是短语时，由于不做分词，你反而搜索不到：</p><p><img src="'+v+`" alt="image-20250624153213448"></p><p>再来看下<code>range</code>查询，语法如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>最小值<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>最大值<span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>range</code>是范围查询，对于范围筛选的关键字有：</p><ul><li><code>gte</code>：大于等于</li><li><code>gt</code>：大于</li><li><code>lte</code>：小于等于</li><li><code>lt</code>：小于</li></ul><p>示例：</p><p><img src="`+g+'" alt="image-20250624153236986"></p><h2 id="_3-复合查询" tabindex="-1"><a class="header-anchor" href="#_3-复合查询"><span>3 复合查询</span></a></h2>',13)),n("blockquote",null,[s[7]||(s[7]=n("p",null,"复合查询大致可以分为两类：",-1)),s[8]||(s[8]=n("ul",null,[n("li",null,[a("第一类：基于逻辑运算组合叶子查询，实现组合条件，例如 "),n("ul",null,[n("li",null,"bool")])]),n("li",null,[a("第二类：基于某种算法修改查询时的文档相关性算分，从而改变文档排名。例如： "),n("ul",null,[n("li",null,"function_score"),n("li",null,"dis_max")])])],-1)),s[9]||(s[9]=n("p",null,"其它复合查询及相关语法可以参考官方文档：",-1)),n("p",null,[n("a",G,[s[6]||(s[6]=a("https://www.elastic.co/guide/en/elasticsearch/reference/7.12/compound-queries.html")),t(p)])])]),s[18]||(s[18]=e('<h3 id="_3-1-算分函数查询-选讲" tabindex="-1"><a class="header-anchor" href="#_3-1-算分函数查询-选讲"><span>3.1 算分函数查询 (选讲)</span></a></h3><p>当我们利用match查询时，文档结果会根据与搜索词条的<strong>关联度打分</strong>（<strong>_score</strong>），返回结果时按照分值降序排列。</p><p>例如，我们搜索 &quot;手机&quot;，结果如下：</p><p><img src="'+b+'" alt="image-20250624153334135"></p><p>从elasticsearch5.1开始，采用的相关性打分算法是BM25算法，公式如下：</p><p><img src="'+h+'" alt="image-20250624153345435"></p><p>基于这套公式，就可以判断出某个文档与用户搜索的关键字之间的关联度，还是比较准确的。但是，在实际业务需求中，常常会有竞价排名的功能。不是相关度越高排名越靠前，而是掏的钱多的排名靠前。</p><p>例如在百度中搜索Java培训，排名靠前的就是广告推广：</p><p><img src="'+q+`" alt="image-20250624153408139"></p><p>要想认为控制相关性算分，就需要利用elasticsearch中的function score 查询了。</p><p><strong>基本语法</strong>：</p><p>function score 查询中包含四部分内容：</p><ul><li><strong>原始查询</strong>条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，<strong>原始算分</strong>（query score)</li><li><strong>过滤条件</strong>：filter部分，符合该条件的文档才会重新算分</li><li><strong>算分函数</strong>：符合filter条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数 <ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： <ul><li>multiply：相乘</li><li>replace：用function score替换query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>function score的运行流程如下：</p><ul><li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li><li>2）根据<strong>过滤条件</strong>，过滤文档</li><li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li><li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li></ul><p>因此，其中的关键点是：</p><ul><li>过滤条件：决定哪些文档的算分被修改</li><li>算分函数：决定函数算分的算法</li><li>运算模式：决定最终算分结果</li></ul><p>示例：给IPhone这个品牌的手机算分提高十倍，分析如下：</p><ul><li>过滤条件：品牌必须为IPhone</li><li>算分函数：常量weight，值为10</li><li>算分模式：相乘multiply</li></ul><p>对应代码如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /hotel/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>  .... <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 原始查询，可以是任意条件</span></span>
<span class="line">      <span class="token property">&quot;functions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 算分函数</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 满足的条件，品牌必须是Iphone</span></span>
<span class="line">            <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Iphone&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token comment">// 算分权重为2</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;boost_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;multipy&quot;</span> <span class="token comment">// 加权模式，求乘积</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-bool-查询" tabindex="-1"><a class="header-anchor" href="#_3-2-bool-查询"><span>3.2 bool 查询</span></a></h3><p>bool查询，即布尔查询。就是利用逻辑运算来组合一个或多个查询子句的组合。bool查询支持的逻辑运算有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li><li>filter：必须匹配，<strong>不参与算分</strong></li></ul><p>bool查询的语法如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /items/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;must&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;手机&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;should&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vivo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;小米&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;must_not&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">2500</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出于性能考虑，与搜索关键字无关的查询尽量采用must_not或filter逻辑运算，避免参与相关性算分。</p><p>例如黑马商城的搜索页面：</p><p><img src="`+y+`" alt="image-20250624153453663"></p><p>其中输入框的搜索条件肯定要参与相关性算分，可以采用match。但是价格范围过滤、品牌过滤、分类过滤等尽量采用filter，不要参与相关性算分。</p><p>比如，我们要搜索<code>手机</code>，但品牌必须是<code>华为</code>，价格必须是<code>900~1599</code>，那么可以这样写：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /items/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;must&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;手机&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;华为&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">90000</span><span class="token punctuation">,</span> <span class="token property">&quot;lt&quot;</span><span class="token operator">:</span> <span class="token number">159900</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-排序" tabindex="-1"><a class="header-anchor" href="#_4-排序"><span>4 排序</span></a></h2><p>elasticsearch默认是根据相关度算分（<code>_score</code>）来排序，但是也支持自定义方式对搜索结果排序。不过分词字段无法排序，能参与排序字段类型有：<code>keyword</code>类型、数值类型、地理坐标类型、日期类型等。</p><p>详细说明可以参考官方文档：</p>`,35)),n("p",null,[n("a",L,[s[10]||(s[10]=a("https://www.elastic.co/guide/en/elasticsearch/reference/7.12/sort-search-results.html")),t(p)])]),s[19]||(s[19]=e(`<p>语法说明：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /indexName/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;排序字段&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token string">&quot;排序方式asc和desc&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例，我们按照商品价格排序：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /items/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-分页" tabindex="-1"><a class="header-anchor" href="#_5-分页"><span>5 分页</span></a></h2><p>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。</p><h3 id="_5-1-基础分页" tabindex="-1"><a class="header-anchor" href="#_5-1-基础分页"><span>5.1 基础分页</span></a></h3><p>elasticsearch中通过修改<code>from</code>、<code>size</code>参数来控制要返回的分页结果：</p><ul><li><code>from</code>：从第几个文档开始</li><li><code>size</code>：总共查询几个文档</li></ul><p>类似于mysql中的<code>limit ?, ?</code></p><p>官方文档如下：</p>`,11)),n("p",null,[n("a",B,[s[11]||(s[11]=a("https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html")),t(p)])]),s[20]||(s[20]=e(`<p>语法如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /items/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;from&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 分页开始的位置，默认为0</span></span>
<span class="line">  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment">// 每页文档数量，默认10</span></span>
<span class="line">  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-深度分页" tabindex="-1"><a class="header-anchor" href="#_5-2-深度分页"><span>5.2 深度分页</span></a></h3><p>elasticsearch的数据一般会采用分片存储，也就是把一个索引中的数据分成N份，存储到不同节点上。这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。</p><p>比如一个索引库中有100000条数据，分别存储到4个分片，每个分片25000条数据。现在每页查询10条，查询第99页。那么分页查询的条件如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /items/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;from&quot;</span><span class="token operator">:</span> <span class="token number">990</span><span class="token punctuation">,</span> <span class="token comment">// 从第990条开始查询</span></span>
<span class="line">  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 每页查询10条</span></span>
<span class="line">  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token string">&quot;asc&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从语句来分析，要查询第990~1000名的数据。</p><p>从实现思路来分析，肯定是将所有数据排序，找出前1000名，截取其中的990~1000的部分。但问题来了，我们如何才能找到所有数据中的前1000名呢？</p><p>要知道每一片的数据都不一样，第1片上的第900<sub>1000，在另1个节点上并不一定依然是900</sub>1000名。所以我们只能在每一个分片上都找出排名前1000的数据，然后汇总到一起，重新排序，才能找出整个索引库中真正的前1000名，此时截取990~1000的数据即可。</p><p>如图：</p><p><img src="`+_+'" alt="image-20250624154957327"></p><p>试想一下，假如我们现在要查询的是第999页数据呢，是不是要找第9990~10000的数据，那岂不是需要把每个分片中的前10000名数据都查询出来，汇总在一起，在内存中排序？如果查询的分页深度更深呢，需要一次检索的数据岂不是更多？</p><p>由此可知，当查询分页深度较大时，汇总数据过多，对内存和CPU会产生非常大的压力。</p><p>因此elasticsearch会禁止<code>from+ size`` </code>超过10000的请求。</p><p>针对深度分页，elasticsearch提供了两种解决方案：</p><ul><li><code>search after</code>：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li><li><code>scroll</code>：原理将排序后的文档id形成快照，保存下来，基于快照做分页。官方已经不推荐使用。</li></ul><p>详情见文档：</p>',17)),n("p",null,[n("a",I,[s[12]||(s[12]=a("https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html")),t(p)])]),s[21]||(s[21]=e('<blockquote><p><strong>总结：</strong></p><p>大多数情况下，我们采用普通分页就可以了。查看百度、京东等网站，会发现其分页都有限制。例如百度最多支持77页，每页不足20条。京东最多100页，每页最多60条。</p><p>因此，一般我们采用限制分页深度的方式即可，无需实现深度分页。</p></blockquote><h2 id="_6-高亮" tabindex="-1"><a class="header-anchor" href="#_6-高亮"><span>6 高亮</span></a></h2><h3 id="_6-1-高亮原理" tabindex="-1"><a class="header-anchor" href="#_6-1-高亮原理"><span>6.1 高亮原理</span></a></h3><p>什么是高亮显示呢？</p><p>我们在百度，京东搜索时，关键字会变成红色，比较醒目，这叫高亮显示：</p><p><img src="'+f+`" alt="image-20250624155034427"></p><p>观察页面源码，你会发现两件事情：</p><ul><li>高亮词条都被加了<code>&lt;em&gt;</code>标签</li><li><code>&lt;em&gt;</code>标签都添加了红色样式</li></ul><p>css样式肯定是前端实现页面的时候写好的，但是前端编写页面的时候是不知道页面要展示什么数据的，不可能给数据加标签。而服务端实现搜索功能，要是有<code>elasticsearch</code>做分词搜索，是知道哪些词条需要高亮的。</p><p>因此词条的<strong>高亮标签肯定是由服务端提供数据的时候已经加上的</strong>。</p><p>因此实现高亮的思路就是：</p><ul><li>用户输入搜索关键字搜索数据</li><li>服务端根据搜索关键字到elasticsearch搜索，并给搜索结果中的关键字词条添加<code>html</code>标签</li><li>前端提前给约定好的<code>html</code>标签添加<code>CSS</code>样式</li></ul><h3 id="_6-2-实现高亮" tabindex="-1"><a class="header-anchor" href="#_6-2-实现高亮"><span>6.2 实现高亮</span></a></h3><p>事实上elasticsearch已经提供了给搜索关键字加标签的语法，无需我们自己编码。</p><p>基本语法如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /<span class="token punctuation">{</span>索引库名<span class="token punctuation">}</span>/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;搜索字段&quot;</span><span class="token operator">:</span> <span class="token string">&quot;搜索关键字&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;highlight&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;高亮字段名称&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;pre_tags&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;em&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;post_tags&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;/em&gt;&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><ul><li>搜索必须有查询条件，而且是全文检索类型的查询条件，例如<code>match</code></li><li>参与高亮的字段必须是<code>text</code>类型的字段</li><li>默认情况下参与高亮的字段要与搜索字段一致，除非添加：<code>required_field_match=false</code></li></ul><p>示例：</p><p><img src="`+w+'" alt="image-20250624155133341"></p><h2 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span>7 总结</span></a></h2><p>查询的DSL是一个大的JSON对象，包含下列属性：</p><ul><li><code>query</code>：查询条件</li><li><code>from</code>和<code>size</code>：分页条件</li><li><code>sort</code>：排序条件</li><li><code>highlight</code>：高亮条件</li></ul><p>示例：</p><p><img src="'+j+'" alt="image-20250624155155973"></p>',25))])}const z=l(x,[["render",J]]),O=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day09_Elasticsearch02/1-Elasticsearch02.html","title":"DSL查询","lang":"en-US","frontmatter":{"title":"DSL查询","date":"2025/03/06"},"headers":[{"level":2,"title":"1 快速入门","slug":"_1-快速入门","link":"#_1-快速入门","children":[]},{"level":2,"title":"2 叶子查询","slug":"_2-叶子查询","link":"#_2-叶子查询","children":[{"level":3,"title":"2.1 全文检索查询","slug":"_2-1-全文检索查询","link":"#_2-1-全文检索查询","children":[]},{"level":3,"title":"2.2 精确查询","slug":"_2-2-精确查询","link":"#_2-2-精确查询","children":[]}]},{"level":2,"title":"3 复合查询","slug":"_3-复合查询","link":"#_3-复合查询","children":[{"level":3,"title":"3.1 算分函数查询 (选讲)","slug":"_3-1-算分函数查询-选讲","link":"#_3-1-算分函数查询-选讲","children":[]},{"level":3,"title":"3.2 bool 查询","slug":"_3-2-bool-查询","link":"#_3-2-bool-查询","children":[]}]},{"level":2,"title":"4 排序","slug":"_4-排序","link":"#_4-排序","children":[]},{"level":2,"title":"5 分页","slug":"_5-分页","link":"#_5-分页","children":[{"level":3,"title":"5.1 基础分页","slug":"_5-1-基础分页","link":"#_5-1-基础分页","children":[]},{"level":3,"title":"5.2 深度分页","slug":"_5-2-深度分页","link":"#_5-2-深度分页","children":[]}]},{"level":2,"title":"6 高亮","slug":"_6-高亮","link":"#_6-高亮","children":[{"level":3,"title":"6.1 高亮原理","slug":"_6-1-高亮原理","link":"#_6-1-高亮原理","children":[]},{"level":3,"title":"6.2 实现高亮","slug":"_6-2-实现高亮","link":"#_6-2-实现高亮","children":[]}]},{"level":2,"title":"7 总结","slug":"_7-总结","link":"#_7-总结","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day09_Elasticsearch02/1-Elasticsearch02.md","git":{"createdTime":1741251281000,"updatedTime":1750752221000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{z as comp,O as data};
