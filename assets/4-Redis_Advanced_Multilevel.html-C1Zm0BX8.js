import{_ as l,c as i,b as p,a as s,d as a,e as t,r as c,o}from"./app-DPwDFWa6.js";const u="/assets/image-20210821092902946-zAI1DiTN.png",r="/assets/image-20210821092941139-C0QWOkVV.png",d="/assets/yeVDlwtfMx-DJAwqiab.png",k="/assets/image-20210821093144700-B4fooOhj.png",m="/assets/image-20210821094447709-BL614pV2.png",v="/assets/image-20210821100755080-C7XGToFa.png",b="/assets/image-20210821100801756-Cz8Wdso_.png",g="/assets/image-20210821101217089-ChvXJQ5D.png",h="/assets/image-20210821101433528-DrDWZgP1.png",y="/assets/image-20210821101721649-DVIX4t8J.png",w="/assets/image-20210821102235467-BX4ouLTD.png",_="/assets/image-20210821102610167-E08LeCeF.png",x="/assets/image-20210821102959829-BHP_5kOC.png",f="/assets/image-20210821104149061-w5IY4vN0.png",q="/assets/image-20210821104857413-DYq-Vwy_.png",R="/assets/image-20210821110441222-DunWDYGk.png",j="/assets/image-20210821111023255-CYINhmnp.png",O="/assets/image-20210821112420464-6UT8Pjzr.png",S="/assets/image-20210821112444482-Cul4V5M9.png",I="/assets/image-20210821112559965-Cl2eUnwF.png",A="/assets/image-20210821112637430-61iAtKGt.png",N="/assets/image-20210821113340111-DW4Qj0xl.png",T="/assets/image-20210821114528954-IaybpVml.png",M="/assets/image-20210821114742950-N6dX0uX5.png",E="/assets/image-20210821115108528-CVibpSrZ.png",J={},P={href:"https://openresty.org/cn/",target:"_blank",rel:"noopener noreferrer"},V={href:"http://xn--OpenResty-ui4qu490b.md",target:"_blank",rel:"noopener noreferrer"},D={href:"http://localhost/item.html?id=1001%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/openresty/lua-cjson/",target:"_blank",rel:"noopener noreferrer"};function L(B,n){const e=c("ExternalLinkIcon");return o(),i("div",null,[n[9]||(n[9]=p('<p><img src="https://bizhi1.com/wp-content/uploads/2024/08/attack-on-titan-scouts-sunset-desktop-wallpaper-4k-small.jpg" alt="进击的巨人侦察兵日落桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 安装OpenRestry</p><p>② OpenRestry快速入门</p><p>③ 请求参数处理</p><p>④ 查询Tomcat</p><p>⑤ Redis缓存预热</p><p>⑥ 查询Redis缓存</p><p>⑦ Nginx本地缓存</p></div><p>多级缓存的实现离不开Nginx编程，而Nginx编程又离不开OpenResty。</p><h2 id="_1-安装openrestry" tabindex="-1"><a class="header-anchor" href="#_1-安装openrestry"><span>① 安装OpenRestry</span></a></h2><p>OpenResty® 是一个基于 Nginx的高性能 Web 平台，用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。具备下列特点：</p><ul><li>具备Nginx的完整功能</li><li>基于Lua语言进行扩展，集成了大量精良的 Lua 库、第三方模块</li><li>允许使用Lua<strong>自定义业务逻辑</strong>、<strong>自定义库</strong></li></ul>',6)),s("p",null,[n[1]||(n[1]=a("官方网站： ")),s("a",P,[n[0]||(n[0]=a("https://openresty.org/cn/")),t(e)])]),n[10]||(n[10]=s("p",null,[s("img",{src:u,alt:"image-20210821092902946"})],-1)),s("p",null,[n[3]||(n[3]=a("安装Lua可以参考课前资料提供的《")),s("a",V,[n[2]||(n[2]=a("安装OpenResty.md")),t(e)]),n[4]||(n[4]=a("》："))]),n[11]||(n[11]=p('<p><img src="'+r+'" alt="image-20210821092941139"></p><h2 id="_2-openrestry快速入门" tabindex="-1"><a class="header-anchor" href="#_2-openrestry快速入门"><span>② OpenRestry快速入门</span></a></h2><p>我们希望达到的多级缓存架构如图：</p><p><img src="'+d+'" alt="yeVDlwtfMx"></p><p>其中：</p><ul><li><p>windows上的nginx用来做反向代理服务，将前端的查询商品的ajax请求代理到OpenResty集群</p></li><li><p>OpenResty集群用来编写多级缓存业务</p></li></ul><h3 id="_2-1-反向代理流程" tabindex="-1"><a class="header-anchor" href="#_2-1-反向代理流程"><span>2.1.反向代理流程</span></a></h3><p>现在，商品详情页使用的是假的商品数据。不过在浏览器中，可以看到页面有发起ajax请求查询真实商品数据。</p><p>这个请求如下：</p><p><img src="'+k+'" alt="image-20210821093144700"></p><p>请求地址是localhost，端口是80，就被windows上安装的Nginx服务给接收到了。然后代理给了OpenResty集群：</p><p><img src="'+m+`" alt="image-20210821094447709"></p><p>我们需要在OpenResty中编写业务，查询商品数据并返回到浏览器。</p><p>但是这次，我们先在OpenResty接收请求，返回假的商品数据。</p><h3 id="_2-2-openresty监听请求" tabindex="-1"><a class="header-anchor" href="#_2-2-openresty监听请求"><span>2.2.OpenResty监听请求</span></a></h3><p>OpenResty的很多功能都依赖于其目录下的Lua库，需要在nginx.conf中指定依赖库的目录，并导入依赖：</p><p>1）添加对OpenResty的Lua模块的加载</p><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，在其中的http下面，添加下面代码：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"><span class="token comment">#lua 模块</span></span>
<span class="line"><span class="token directive"><span class="token keyword">lua_package_path</span> <span class="token string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">#c模块     </span></span>
<span class="line"><span class="token directive"><span class="token keyword">lua_package_cpath</span> <span class="token string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span></span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）监听/api/item路径</p><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，在nginx.conf的server下面，添加对/api/item这个路径的监听：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"><span class="token directive"><span class="token keyword">location</span>  /api/item</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment"># 默认的响应类型</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">default_type</span> application/json</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment"># 响应结果由lua/item.lua文件来决定</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">content_by_lua_file</span> lua/item.lua</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个监听，就类似于SpringMVC中的<code>@GetMapping(&quot;/api/item&quot;)</code>做路径映射。</p><p>而<code>content_by_lua_file lua/item.lua</code>则相当于调用item.lua这个文件，执行其中的业务，把结果返回给用户。相当于java中调用service。</p><h3 id="_2-3-编写item-lua" tabindex="-1"><a class="header-anchor" href="#_2-3-编写item-lua"><span>2.3.编写item.lua</span></a></h3><p>1）在<code>/usr/loca/openresty/nginx</code>目录创建文件夹：lua</p><p><img src="`+v+'" alt="image-20210821100755080"></p><p>2）在<code>/usr/loca/openresty/nginx/lua</code>文件夹下，新建文件：item.lua</p><p><img src="'+b+`" alt="image-20210821100801756"></p><p>3）编写item.lua，返回假数据</p><p>item.lua中，利用ngx.say()函数返回数据到Response中</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;id&quot;:10001,&quot;name&quot;:&quot;SALSA AIR&quot;,&quot;title&quot;:&quot;RIMOWA 21寸托运箱拉杆箱 SALSA AIR系列果绿色 820.70.36.4&quot;,&quot;price&quot;:17900,&quot;image&quot;:&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webp&quot;,&quot;category&quot;:&quot;拉杆箱&quot;,&quot;brand&quot;:&quot;RIMOWA&quot;,&quot;spec&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;createTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;updateTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;stock&quot;:2999,&quot;sold&quot;:31290}&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4）重新加载配置</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">nginx <span class="token parameter variable">-s</span> reload</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,34)),s("p",null,[n[6]||(n[6]=a("刷新商品页面：")),s("a",D,[n[5]||(n[5]=a("http://localhost/item.html?id=1001，即可看到效果：")),t(e)])]),n[12]||(n[12]=p('<p><img src="'+g+'" alt="image-20210821101217089"></p><h2 id="_3-请求参数处理" tabindex="-1"><a class="header-anchor" href="#_3-请求参数处理"><span>③ 请求参数处理</span></a></h2><p>上一节中，我们在OpenResty接收前端请求，但是返回的是假数据。</p><p>要返回真实数据，必须根据前端传递来的商品id，查询商品信息才可以。</p><p>那么如何获取前端传递的商品参数呢？</p><h3 id="_3-1-获取参数的api" tabindex="-1"><a class="header-anchor" href="#_3-1-获取参数的api"><span>3.1.获取参数的API</span></a></h3><p>OpenResty中提供了一些API用来获取不同类型的前端请求参数：</p><p><img src="'+h+'" alt="image-20210821101433528"></p><h3 id="_3-2-获取参数并返回" tabindex="-1"><a class="header-anchor" href="#_3-2-获取参数并返回"><span>3.2.获取参数并返回</span></a></h3><p>在前端发起的ajax请求如图：</p><p><img src="'+y+`" alt="image-20210821101721649"></p><p>可以看到商品id是以路径占位符方式传递的，因此可以利用正则表达式匹配的方式来获取ID</p><p>1）获取商品id</p><p>修改<code>/usr/loca/openresty/nginx/nginx.conf</code>文件中监听/api/item的代码，利用正则表达式获取ID：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"><span class="token directive"><span class="token keyword">location</span> ~ /api/item/(\\d+)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment"># 默认的响应类型</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">default_type</span> application/json</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment"># 响应结果由lua/item.lua文件来决定</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">content_by_lua_file</span> lua/item.lua</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）拼接ID并返回</p><p>修改<code>/usr/loca/openresty/nginx/lua/item.lua</code>文件，获取id并拼接到结果中返回：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 获取商品id</span></span>
<span class="line"><span class="token keyword">local</span> id <span class="token operator">=</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">-- 拼接并返回</span></span>
<span class="line">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;id&quot;:&#39;</span> <span class="token operator">..</span> id <span class="token operator">..</span> <span class="token string">&#39;,&quot;name&quot;:&quot;SALSA AIR&quot;,&quot;title&quot;:&quot;RIMOWA 21寸托运箱拉杆箱 SALSA AIR系列果绿色 820.70.36.4&quot;,&quot;price&quot;:17900,&quot;image&quot;:&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webp&quot;,&quot;category&quot;:&quot;拉杆箱&quot;,&quot;brand&quot;:&quot;RIMOWA&quot;,&quot;spec&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;createTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;updateTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;stock&quot;:2999,&quot;sold&quot;:31290}&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）重新加载并测试</p><p>运行命令以重新加载OpenResty配置：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">nginx <span class="token parameter variable">-s</span> reload</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>刷新页面可以看到结果中已经带上了ID：</p><p><img src="`+w+'" alt="image-20210821102235467"></p><h2 id="_4-查询tomcat" tabindex="-1"><a class="header-anchor" href="#_4-查询tomcat"><span>④ 查询Tomcat</span></a></h2><p>拿到商品ID后，本应去缓存中查询商品信息，不过目前我们还未建立nginx、redis缓存。因此，这里我们先根据商品id去tomcat查询商品信息。我们实现如图部分：</p><p><img src="'+_+'" alt="image-20210821102610167"></p><p>需要注意的是，我们的OpenResty是在虚拟机，Tomcat是在Windows电脑上。两者IP一定不要搞错了。</p><p><img src="'+x+`" alt="image-20210821102959829"></p><h3 id="_4-1-发送http请求的api" tabindex="-1"><a class="header-anchor" href="#_4-1-发送http请求的api"><span>4.1.发送http请求的API</span></a></h3><p>nginx提供了内部API用以发送http请求：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> resp <span class="token operator">=</span> ngx<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token string">&quot;/path&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">    method <span class="token operator">=</span> ngx<span class="token punctuation">.</span>HTTP_GET<span class="token punctuation">,</span>   <span class="token comment">-- 请求方式</span></span>
<span class="line">    args <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">-- get方式传参数</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的响应内容包括：</p><ul><li>resp.status：响应状态码</li><li>resp.header：响应头，是一个table</li><li>resp.body：响应体，就是响应数据</li></ul><p>注意：这里的path是路径，并不包含IP和端口。这个请求会被nginx内部的server监听并处理。</p><p>但是我们希望这个请求发送到Tomcat服务器，所以还需要编写一个server来对这个路径做反向代理：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"> <span class="token directive"><span class="token keyword">location</span> /path</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment"># 这里是windows电脑的ip和Java服务端口，需要确保windows防火墙处于关闭状态</span></span>
<span class="line">     <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.150.1:8081</span><span class="token punctuation">;</span> </span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理如图：</p><p><img src="`+f+`" alt="image-20210821104149061"></p><h3 id="_4-2-封装http工具" tabindex="-1"><a class="header-anchor" href="#_4-2-封装http工具"><span>4.2.封装http工具</span></a></h3><p>下面，我们封装一个发送Http请求的工具，基于ngx.location.capture来实现查询tomcat。</p><p>1）添加反向代理，到windows的Java服务</p><p>因为item-service中的接口都是/item开头，所以我们监听/item路径，代理到windows上的tomcat服务。</p><p>修改 <code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，添加一个location：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"><span class="token directive"><span class="token keyword">location</span> /item</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.150.1:8081</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以后，只要我们调用<code>ngx.location.capture(&quot;/item&quot;)</code>，就一定能发送请求到windows的tomcat服务。</p><p>2）封装工具类</p><p>之前我们说过，OpenResty启动时会加载以下两个目录中的工具文件：</p><p><img src="`+q+`" alt="image-20210821104857413"></p><p>所以，自定义的http工具也需要放到这个目录下。</p><p>在<code>/usr/local/openresty/lualib</code>目录下，新建一个common.lua文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">vi</span> /usr/local/openresty/lualib/common.lua</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>内容如下:</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 封装函数，发送http请求，并解析响应</span></span>
<span class="line"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">read_http</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> resp <span class="token operator">=</span> ngx<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">        method <span class="token operator">=</span> ngx<span class="token punctuation">.</span>HTTP_GET<span class="token punctuation">,</span></span>
<span class="line">        args <span class="token operator">=</span> params<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> resp <span class="token keyword">then</span></span>
<span class="line">        <span class="token comment">-- 记录错误信息，返回404</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;http请求查询失败, path: &quot;</span><span class="token punctuation">,</span> path <span class="token punctuation">,</span> <span class="token string">&quot;, args: &quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>body</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"><span class="token comment">-- 将方法导出</span></span>
<span class="line"><span class="token keyword">local</span> _M <span class="token operator">=</span> <span class="token punctuation">{</span>  </span>
<span class="line">    read_http <span class="token operator">=</span> read_http</span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token keyword">return</span> _M</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个工具将read_http函数封装到_M这个table类型的变量中，并且返回，这类似于导出。</p><p>使用的时候，可以利用<code>require(&#39;common&#39;)</code>来导入该函数库，这里的common是函数库的文件名。</p><p>3）实现商品查询</p><p>最后，我们修改<code>/usr/local/openresty/lua/item.lua</code>文件，利用刚刚封装的函数库实现对tomcat的查询：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 引入自定义common工具模块，返回值是common中返回的 _M</span></span>
<span class="line"><span class="token keyword">local</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;common&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 从 common中获取read_http这个函数</span></span>
<span class="line"><span class="token keyword">local</span> read_http <span class="token operator">=</span> common<span class="token punctuation">.</span>read_http</span>
<span class="line"><span class="token comment">-- 获取路径参数</span></span>
<span class="line"><span class="token keyword">local</span> id <span class="token operator">=</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">-- 根据id查询商品</span></span>
<span class="line"><span class="token keyword">local</span> itemJSON <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span><span class="token string">&quot;/item/&quot;</span><span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 根据id查询商品库存</span></span>
<span class="line"><span class="token keyword">local</span> itemStockJSON <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span><span class="token string">&quot;/item/stock/&quot;</span><span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里查询到的结果是json字符串，并且包含商品、库存两个json字符串，页面最终需要的是把两个json拼接为一个json：</p><p><img src="`+R+'" alt="image-20210821110441222"></p><p>这就需要我们先把JSON变为lua的table，完成数据整合后，再转为JSON。</p><h3 id="_4-3-cjson工具类" tabindex="-1"><a class="header-anchor" href="#_4-3-cjson工具类"><span>4.3.CJSON工具类</span></a></h3><p>OpenResty提供了一个cjson的模块用来处理JSON的序列化和反序列化。</p>',63)),s("p",null,[n[8]||(n[8]=a("官方地址： ")),s("a",C,[n[7]||(n[7]=a("https://github.com/openresty/lua-cjson/")),t(e)])]),n[13]||(n[13]=p(`<p>1）引入cjson模块：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> cjson <span class="token operator">=</span> require <span class="token string">&quot;cjson&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）序列化：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    name <span class="token operator">=</span> <span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    age <span class="token operator">=</span> <span class="token number">21</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">-- 把 table 序列化为 json</span></span>
<span class="line"><span class="token keyword">local</span> json <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）反序列化：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> json <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 21}&#39;</span></span>
<span class="line"><span class="token comment">-- 反序列化 json为 table</span></span>
<span class="line"><span class="token keyword">local</span> obj <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-实现tomcat查询" tabindex="-1"><a class="header-anchor" href="#_4-4-实现tomcat查询"><span>4.4.实现Tomcat查询</span></a></h3><p>下面，我们修改之前的item.lua中的业务，添加json处理功能：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 导入common函数库</span></span>
<span class="line"><span class="token keyword">local</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;common&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> read_http <span class="token operator">=</span> common<span class="token punctuation">.</span>read_http</span>
<span class="line"><span class="token comment">-- 导入cjson库</span></span>
<span class="line"><span class="token keyword">local</span> cjson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cjson&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 获取路径参数</span></span>
<span class="line"><span class="token keyword">local</span> id <span class="token operator">=</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">-- 根据id查询商品</span></span>
<span class="line"><span class="token keyword">local</span> itemJSON <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span><span class="token string">&quot;/item/&quot;</span><span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 根据id查询商品库存</span></span>
<span class="line"><span class="token keyword">local</span> itemStockJSON <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span><span class="token string">&quot;/item/stock/&quot;</span><span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- JSON转化为lua的table</span></span>
<span class="line"><span class="token keyword">local</span> item <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>itemJSON<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> stock <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>stockJSON<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 组合数据</span></span>
<span class="line">item<span class="token punctuation">.</span>stock <span class="token operator">=</span> stock<span class="token punctuation">.</span>stock</span>
<span class="line">item<span class="token punctuation">.</span>sold <span class="token operator">=</span> stock<span class="token punctuation">.</span>sold</span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 把item序列化为json 返回结果</span></span>
<span class="line">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-基于id负载均衡" tabindex="-1"><a class="header-anchor" href="#_4-5-基于id负载均衡"><span>4.5.基于ID负载均衡</span></a></h3><p>刚才的代码中，我们的tomcat是单机部署。而实际开发中，tomcat一定是集群模式：</p><p><img src="`+j+`" alt="image-20210821111023255"></p><p>因此，OpenResty需要对tomcat集群做负载均衡。</p><p>而默认的负载均衡规则是轮询模式，当我们查询/item/10001时：</p><ul><li>第一次会访问8081端口的tomcat服务，在该服务内部就形成了JVM进程缓存</li><li>第二次会访问8082端口的tomcat服务，该服务内部没有JVM缓存（因为JVM缓存无法共享），会查询数据库</li><li>...</li></ul><p>你看，因为轮询的原因，第一次查询8081形成的JVM缓存并未生效，直到下一次再次访问到8081时才可以生效，缓存命中率太低了。</p><p>怎么办？</p><p>如果能让同一个商品，每次查询时都访问同一个tomcat服务，那么JVM缓存就一定能生效了。</p><p>也就是说，我们需要根据商品id做负载均衡，而不是轮询。</p><p><strong>1）原理</strong></p><p>nginx提供了基于请求路径做负载均衡的算法：</p><p>nginx根据请求路径做hash运算，把得到的数值对tomcat服务的数量取余，余数是几，就访问第几个服务，实现负载均衡。</p><p>例如：</p><ul><li>我们的请求路径是 /item/10001</li><li>tomcat总数为2台（8081、8082）</li><li>对请求路径/item/1001做hash运算求余的结果为1</li><li>则访问第一个tomcat服务，也就是8081</li></ul><p>只要id不变，每次hash运算结果也不会变，那就可以保证同一个商品，一直访问同一个tomcat服务，确保JVM缓存生效。</p><p><strong>2）实现</strong></p><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，实现基于ID做负载均衡。</p><p>首先，定义tomcat集群，并设置基于路径做负载均衡：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"><span class="token directive"><span class="token keyword">upstream</span> tomcat-cluster</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">hash</span> <span class="token variable">$request_uri</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">server</span> 192.168.150.1:8081</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">server</span> 192.168.150.1:8082</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，修改对tomcat服务的反向代理，目标指向tomcat集群：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"><span class="token directive"><span class="token keyword">location</span> /item</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">proxy_pass</span> http://tomcat-cluster</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新加载OpenResty</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">nginx <span class="token parameter variable">-s</span> reload</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3）测试</strong></p><p>启动两台tomcat服务：</p><p><img src="`+O+'" alt="image-20210821112420464"></p><p>同时启动：</p><p><img src="'+S+'" alt="image-20210821112444482"></p><p>清空日志后，再次访问页面，可以看到不同id的商品，访问到了不同的tomcat服务：</p><p><img src="'+I+'" alt="image-20210821112559965"></p><p><img src="'+A+`" alt="image-20210821112637430"></p><h2 id="_5-redis缓存预热" tabindex="-1"><a class="header-anchor" href="#_5-redis缓存预热"><span>⑤ Redis缓存预热</span></a></h2><p>Redis缓存会面临冷启动问题：</p><p><strong>冷启动</strong>：服务刚刚启动时，Redis中并没有缓存，如果所有商品数据都在第一次查询时添加缓存，可能会给数据库带来较大压力。</p><p><strong>缓存预热</strong>：在实际开发中，我们可以利用大数据统计用户访问的热点数据，在项目启动时将这些热点数据提前查询并保存到Redis中。</p><p>我们数据量较少，并且没有数据统计相关功能，目前可以在启动时将所有数据都放入缓存中。</p><p>1）利用Docker安装Redis</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-d</span> redis redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）在item-service服务中引入Redis依赖</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）配置Redis地址</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.150.101</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）编写初始化类</p><p>缓存预热需要在项目启动时完成，并且必须是拿到RedisTemplate之后。</p><p>这里我们利用InitializingBean接口来实现，因为InitializingBean可以在对象被Spring创建并且成员变量全部注入后执行。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonProcessingException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Item</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">ItemStock</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IItemService</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>item<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IItemStockService</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">IItemService</span> itemService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">IItemStockService</span> stockService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> <span class="token constant">MAPPER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 初始化缓存</span></span>
<span class="line">        <span class="token comment">// 1.查询商品信息</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> itemList <span class="token operator">=</span> itemService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 2.放入缓存</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> itemList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 2.1.item序列化为JSON</span></span>
<span class="line">            <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">MAPPER</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 2.2.存入redis</span></span>
<span class="line">            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;item:id:&quot;</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3.查询商品库存信息</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ItemStock</span><span class="token punctuation">&gt;</span></span> stockList <span class="token operator">=</span> stockService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 4.放入缓存</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ItemStock</span> stock <span class="token operator">:</span> stockList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 2.1.item序列化为JSON</span></span>
<span class="line">            <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">MAPPER</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 2.2.存入redis</span></span>
<span class="line">            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;item:stock:id:&quot;</span> <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-查询redis缓存" tabindex="-1"><a class="header-anchor" href="#_6-查询redis缓存"><span>⑥ 查询Redis缓存</span></a></h2><p>现在，Redis缓存已经准备就绪，我们可以再OpenResty中实现查询Redis的逻辑了。如下图红框所示：</p><p><img src="`+N+`" alt="image-20210821113340111"></p><p>当请求进入OpenResty之后：</p><ul><li>优先查询Redis缓存</li><li>如果Redis缓存未命中，再查询Tomcat</li></ul><h3 id="_6-1-封装redis工具" tabindex="-1"><a class="header-anchor" href="#_6-1-封装redis工具"><span>6.1.封装Redis工具</span></a></h3><p>OpenResty提供了操作Redis的模块，我们只要引入该模块就能直接使用。但是为了方便，我们将Redis操作封装到之前的common.lua工具库中。</p><p>修改<code>/usr/local/openresty/lualib/common.lua</code>文件：</p><p>1）引入Redis模块，并初始化Redis对象</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 导入redis</span></span>
<span class="line"><span class="token keyword">local</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;resty.redis&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 初始化redis</span></span>
<span class="line"><span class="token keyword">local</span> red <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">red<span class="token punctuation">:</span><span class="token function">set_timeouts</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）封装函数，用来释放Redis连接，其实是放入连接池</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 关闭redis连接的工具方法，其实是放入连接池</span></span>
<span class="line"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">close_redis</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> pool_max_idle_time <span class="token operator">=</span> <span class="token number">10000</span> <span class="token comment">-- 连接的空闲时间，单位是毫秒</span></span>
<span class="line">    <span class="token keyword">local</span> pool_size <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">--连接池大小</span></span>
<span class="line">    <span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">set_keepalive</span><span class="token punctuation">(</span>pool_max_idle_time<span class="token punctuation">,</span> pool_size<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;放入redis连接池失败: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）封装函数，根据key查询Redis数据</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 查询redis的方法 ip和port是redis地址，key是查询的key</span></span>
<span class="line"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">read_redis</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 获取一个连接</span></span>
<span class="line">    <span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;连接redis失败 : &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">nil</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">-- 查询redis</span></span>
<span class="line">    <span class="token keyword">local</span> resp<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 查询失败处理</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> resp <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;查询Redis失败: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token string">&quot;, key = &quot;</span> <span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">--得到的数据为空处理</span></span>
<span class="line">    <span class="token keyword">if</span> resp <span class="token operator">==</span> ngx<span class="token punctuation">.</span>null <span class="token keyword">then</span></span>
<span class="line">        resp <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;查询Redis数据为空, key = &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token function">close_redis</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> resp</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）导出</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 将方法导出</span></span>
<span class="line"><span class="token keyword">local</span> _M <span class="token operator">=</span> <span class="token punctuation">{</span>  </span>
<span class="line">    read_http <span class="token operator">=</span> read_http<span class="token punctuation">,</span></span>
<span class="line">    read_redis <span class="token operator">=</span> read_redis</span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token keyword">return</span> _M</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的common.lua：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 导入redis</span></span>
<span class="line"><span class="token keyword">local</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;resty.redis&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 初始化redis</span></span>
<span class="line"><span class="token keyword">local</span> red <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">red<span class="token punctuation">:</span><span class="token function">set_timeouts</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 关闭redis连接的工具方法，其实是放入连接池</span></span>
<span class="line"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">close_redis</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> pool_max_idle_time <span class="token operator">=</span> <span class="token number">10000</span> <span class="token comment">-- 连接的空闲时间，单位是毫秒</span></span>
<span class="line">    <span class="token keyword">local</span> pool_size <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">--连接池大小</span></span>
<span class="line">    <span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">set_keepalive</span><span class="token punctuation">(</span>pool_max_idle_time<span class="token punctuation">,</span> pool_size<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;放入redis连接池失败: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 查询redis的方法 ip和port是redis地址，key是查询的key</span></span>
<span class="line"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">read_redis</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 获取一个连接</span></span>
<span class="line">    <span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;连接redis失败 : &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">nil</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">-- 查询redis</span></span>
<span class="line">    <span class="token keyword">local</span> resp<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 查询失败处理</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> resp <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;查询Redis失败: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token string">&quot;, key = &quot;</span> <span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">--得到的数据为空处理</span></span>
<span class="line">    <span class="token keyword">if</span> resp <span class="token operator">==</span> ngx<span class="token punctuation">.</span>null <span class="token keyword">then</span></span>
<span class="line">        resp <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;查询Redis数据为空, key = &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token function">close_redis</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> resp</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 封装函数，发送http请求，并解析响应</span></span>
<span class="line"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">read_http</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> resp <span class="token operator">=</span> ngx<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">        method <span class="token operator">=</span> ngx<span class="token punctuation">.</span>HTTP_GET<span class="token punctuation">,</span></span>
<span class="line">        args <span class="token operator">=</span> params<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> resp <span class="token keyword">then</span></span>
<span class="line">        <span class="token comment">-- 记录错误信息，返回404</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;http查询失败, path: &quot;</span><span class="token punctuation">,</span> path <span class="token punctuation">,</span> <span class="token string">&quot;, args: &quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>body</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"><span class="token comment">-- 将方法导出</span></span>
<span class="line"><span class="token keyword">local</span> _M <span class="token operator">=</span> <span class="token punctuation">{</span>  </span>
<span class="line">    read_http <span class="token operator">=</span> read_http<span class="token punctuation">,</span></span>
<span class="line">    read_redis <span class="token operator">=</span> read_redis</span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token keyword">return</span> _M</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-实现redis查询" tabindex="-1"><a class="header-anchor" href="#_6-2-实现redis查询"><span>6.2.实现Redis查询</span></a></h3><p>接下来，我们就可以去修改item.lua文件，实现对Redis的查询了。</p><p>查询逻辑是：</p><ul><li>根据id查询Redis</li><li>如果查询失败则继续查询Tomcat</li><li>将查询结果返回</li></ul><p>1）修改<code>/usr/local/openresty/lua/item.lua</code>文件，添加一个查询函数：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 导入common函数库</span></span>
<span class="line"><span class="token keyword">local</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;common&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> read_http <span class="token operator">=</span> common<span class="token punctuation">.</span>read_http</span>
<span class="line"><span class="token keyword">local</span> read_redis <span class="token operator">=</span> common<span class="token punctuation">.</span>read_redis</span>
<span class="line"><span class="token comment">-- 封装查询函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">read_data</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 查询本地缓存</span></span>
<span class="line">    <span class="token keyword">local</span> val <span class="token operator">=</span> <span class="token function">read_redis</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 判断查询结果</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> val <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;redis查询失败，尝试查询http， key: &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">-- redis查询失败，去查询http</span></span>
<span class="line">        val <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">-- 返回数据</span></span>
<span class="line">    <span class="token keyword">return</span> val</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）而后修改商品查询、库存查询的业务：</p><p><img src="`+T+`" alt="image-20210821114528954"></p><p>3）完整的item.lua代码：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 导入common函数库</span></span>
<span class="line"><span class="token keyword">local</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;common&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> read_http <span class="token operator">=</span> common<span class="token punctuation">.</span>read_http</span>
<span class="line"><span class="token keyword">local</span> read_redis <span class="token operator">=</span> common<span class="token punctuation">.</span>read_redis</span>
<span class="line"><span class="token comment">-- 导入cjson库</span></span>
<span class="line"><span class="token keyword">local</span> cjson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cjson&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 封装查询函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">read_data</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 查询本地缓存</span></span>
<span class="line">    <span class="token keyword">local</span> val <span class="token operator">=</span> <span class="token function">read_redis</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 判断查询结果</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> val <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;redis查询失败，尝试查询http， key: &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">-- redis查询失败，去查询http</span></span>
<span class="line">        val <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">-- 返回数据</span></span>
<span class="line">    <span class="token keyword">return</span> val</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 获取路径参数</span></span>
<span class="line"><span class="token keyword">local</span> id <span class="token operator">=</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 查询商品信息</span></span>
<span class="line"><span class="token keyword">local</span> itemJSON <span class="token operator">=</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token string">&quot;item:id:&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span>  <span class="token string">&quot;/item/&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 查询库存信息</span></span>
<span class="line"><span class="token keyword">local</span> stockJSON <span class="token operator">=</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token string">&quot;item:stock:id:&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token string">&quot;/item/stock/&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- JSON转化为lua的table</span></span>
<span class="line"><span class="token keyword">local</span> item <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>itemJSON<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> stock <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>stockJSON<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 组合数据</span></span>
<span class="line">item<span class="token punctuation">.</span>stock <span class="token operator">=</span> stock<span class="token punctuation">.</span>stock</span>
<span class="line">item<span class="token punctuation">.</span>sold <span class="token operator">=</span> stock<span class="token punctuation">.</span>sold</span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 把item序列化为json 返回结果</span></span>
<span class="line">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-nginx本地缓存" tabindex="-1"><a class="header-anchor" href="#_7-nginx本地缓存"><span>⑦ Nginx本地缓存</span></a></h2><p>现在，整个多级缓存中只差最后一环，也就是nginx的本地缓存了。如图：</p><p><img src="`+M+`" alt="image-20210821114742950"></p><h3 id="_7-1-本地缓存api" tabindex="-1"><a class="header-anchor" href="#_7-1-本地缓存api"><span>7.1.本地缓存API</span></a></h3><p>OpenResty为Nginx提供了<strong>shard dict</strong>的功能，可以在nginx的多个worker之间共享数据，实现缓存功能。</p><p>1）开启共享字典，在nginx.conf的http下添加配置：</p><div class="language-nginx line-numbers-mode" data-highlighter="prismjs" data-ext="nginx" data-title="nginx"><pre><code><span class="line"> <span class="token comment"># 共享字典，也就是本地缓存，名称叫做：item_cache，大小150m</span></span>
<span class="line"> <span class="token directive"><span class="token keyword">lua_shared_dict</span> item_cache <span class="token number">150m</span></span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）操作共享字典：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 获取本地缓存对象</span></span>
<span class="line"><span class="token keyword">local</span> item_cache <span class="token operator">=</span> ngx<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>item_cache</span>
<span class="line"><span class="token comment">-- 存储, 指定key、value、过期时间，单位s，默认为0代表永不过期</span></span>
<span class="line">item_cache<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 读取</span></span>
<span class="line"><span class="token keyword">local</span> val <span class="token operator">=</span> item_cache<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-实现本地缓存查询" tabindex="-1"><a class="header-anchor" href="#_7-2-实现本地缓存查询"><span>7.2.实现本地缓存查询</span></a></h3><p>1）修改<code>/usr/local/openresty/lua/item.lua</code>文件，修改read_data查询函数，添加本地缓存逻辑：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 导入共享词典，本地缓存</span></span>
<span class="line"><span class="token keyword">local</span> item_cache <span class="token operator">=</span> ngx<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>item_cache</span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 封装查询函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">read_data</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expire<span class="token punctuation">,</span> path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 查询本地缓存</span></span>
<span class="line">    <span class="token keyword">local</span> val <span class="token operator">=</span> item_cache<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> val <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;本地缓存查询失败，尝试查询Redis， key: &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">-- 查询redis</span></span>
<span class="line">        val <span class="token operator">=</span> <span class="token function">read_redis</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">-- 判断查询结果</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> val <span class="token keyword">then</span></span>
<span class="line">            ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;redis查询失败，尝试查询http， key: &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">-- redis查询失败，去查询http</span></span>
<span class="line">            val <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">-- 查询成功，把数据写入本地缓存</span></span>
<span class="line">    item_cache<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> expire<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 返回数据</span></span>
<span class="line">    <span class="token keyword">return</span> val</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改item.lua中查询商品和库存的业务，实现最新的read_data函数：</p><p><img src="`+E+`" alt="image-20210821115108528"></p><p>其实就是多了缓存时间参数，过期后nginx缓存会自动删除，下次访问即可更新缓存。</p><p>这里给商品基本信息设置超时时间为30分钟，库存为1分钟。</p><p>因为库存更新频率较高，如果缓存时间过长，可能与数据库差异较大。</p><p>3）完整的item.lua文件：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 导入common函数库</span></span>
<span class="line"><span class="token keyword">local</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;common&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> read_http <span class="token operator">=</span> common<span class="token punctuation">.</span>read_http</span>
<span class="line"><span class="token keyword">local</span> read_redis <span class="token operator">=</span> common<span class="token punctuation">.</span>read_redis</span>
<span class="line"><span class="token comment">-- 导入cjson库</span></span>
<span class="line"><span class="token keyword">local</span> cjson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cjson&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 导入共享词典，本地缓存</span></span>
<span class="line"><span class="token keyword">local</span> item_cache <span class="token operator">=</span> ngx<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>item_cache</span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 封装查询函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">read_data</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expire<span class="token punctuation">,</span> path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 查询本地缓存</span></span>
<span class="line">    <span class="token keyword">local</span> val <span class="token operator">=</span> item_cache<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> val <span class="token keyword">then</span></span>
<span class="line">        ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;本地缓存查询失败，尝试查询Redis， key: &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">-- 查询redis</span></span>
<span class="line">        val <span class="token operator">=</span> <span class="token function">read_redis</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">-- 判断查询结果</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> val <span class="token keyword">then</span></span>
<span class="line">            ngx<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ngx<span class="token punctuation">.</span>ERR<span class="token punctuation">,</span> <span class="token string">&quot;redis查询失败，尝试查询http， key: &quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">-- redis查询失败，去查询http</span></span>
<span class="line">            val <span class="token operator">=</span> <span class="token function">read_http</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token comment">-- 查询成功，把数据写入本地缓存</span></span>
<span class="line">    item_cache<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> expire<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 返回数据</span></span>
<span class="line">    <span class="token keyword">return</span> val</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 获取路径参数</span></span>
<span class="line"><span class="token keyword">local</span> id <span class="token operator">=</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 查询商品信息</span></span>
<span class="line"><span class="token keyword">local</span> itemJSON <span class="token operator">=</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token string">&quot;item:id:&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">,</span>  <span class="token string">&quot;/item/&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 查询库存信息</span></span>
<span class="line"><span class="token keyword">local</span> stockJSON <span class="token operator">=</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token string">&quot;item:stock:id:&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&quot;/item/stock/&quot;</span> <span class="token operator">..</span> id<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- JSON转化为lua的table</span></span>
<span class="line"><span class="token keyword">local</span> item <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>itemJSON<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> stock <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>stockJSON<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 组合数据</span></span>
<span class="line">item<span class="token punctuation">.</span>stock <span class="token operator">=</span> stock<span class="token punctuation">.</span>stock</span>
<span class="line">item<span class="token punctuation">.</span>sold <span class="token operator">=</span> stock<span class="token punctuation">.</span>sold</span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 把item序列化为json 返回结果</span></span>
<span class="line">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,103))])}const z=l(J,[["render",L]]),F=JSON.parse('{"path":"/docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/2_Redis_Advanced_Multilevel/4-Redis_Advanced_Multilevel.html","title":"实现多级缓存","lang":"en-US","frontmatter":{"title":"实现多级缓存","date":"2025/06/19"},"headers":[{"level":2,"title":"① 安装OpenRestry","slug":"_1-安装openrestry","link":"#_1-安装openrestry","children":[]},{"level":2,"title":"② OpenRestry快速入门","slug":"_2-openrestry快速入门","link":"#_2-openrestry快速入门","children":[{"level":3,"title":"2.1.反向代理流程","slug":"_2-1-反向代理流程","link":"#_2-1-反向代理流程","children":[]},{"level":3,"title":"2.2.OpenResty监听请求","slug":"_2-2-openresty监听请求","link":"#_2-2-openresty监听请求","children":[]},{"level":3,"title":"2.3.编写item.lua","slug":"_2-3-编写item-lua","link":"#_2-3-编写item-lua","children":[]}]},{"level":2,"title":"③ 请求参数处理","slug":"_3-请求参数处理","link":"#_3-请求参数处理","children":[{"level":3,"title":"3.1.获取参数的API","slug":"_3-1-获取参数的api","link":"#_3-1-获取参数的api","children":[]},{"level":3,"title":"3.2.获取参数并返回","slug":"_3-2-获取参数并返回","link":"#_3-2-获取参数并返回","children":[]}]},{"level":2,"title":"④ 查询Tomcat","slug":"_4-查询tomcat","link":"#_4-查询tomcat","children":[{"level":3,"title":"4.1.发送http请求的API","slug":"_4-1-发送http请求的api","link":"#_4-1-发送http请求的api","children":[]},{"level":3,"title":"4.2.封装http工具","slug":"_4-2-封装http工具","link":"#_4-2-封装http工具","children":[]},{"level":3,"title":"4.3.CJSON工具类","slug":"_4-3-cjson工具类","link":"#_4-3-cjson工具类","children":[]},{"level":3,"title":"4.4.实现Tomcat查询","slug":"_4-4-实现tomcat查询","link":"#_4-4-实现tomcat查询","children":[]},{"level":3,"title":"4.5.基于ID负载均衡","slug":"_4-5-基于id负载均衡","link":"#_4-5-基于id负载均衡","children":[]}]},{"level":2,"title":"⑤ Redis缓存预热","slug":"_5-redis缓存预热","link":"#_5-redis缓存预热","children":[]},{"level":2,"title":"⑥ 查询Redis缓存","slug":"_6-查询redis缓存","link":"#_6-查询redis缓存","children":[{"level":3,"title":"6.1.封装Redis工具","slug":"_6-1-封装redis工具","link":"#_6-1-封装redis工具","children":[]},{"level":3,"title":"6.2.实现Redis查询","slug":"_6-2-实现redis查询","link":"#_6-2-实现redis查询","children":[]}]},{"level":2,"title":"⑦ Nginx本地缓存","slug":"_7-nginx本地缓存","link":"#_7-nginx本地缓存","children":[{"level":3,"title":"7.1.本地缓存API","slug":"_7-1-本地缓存api","link":"#_7-1-本地缓存api","children":[]},{"level":3,"title":"7.2.实现本地缓存查询","slug":"_7-2-实现本地缓存查询","link":"#_7-2-实现本地缓存查询","children":[]}]}],"filePathRelative":"docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/2_Redis_Advanced_Multilevel/4-Redis_Advanced_Multilevel.md","git":{"createdTime":1750319780000,"updatedTime":1750319780000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{z as comp,F as data};
