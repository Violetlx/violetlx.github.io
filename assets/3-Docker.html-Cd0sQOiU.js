import{_ as p,c as i,b as l,a as n,d as a,e as t,r as c,o}from"./app-B-emV930.js";const r="/assets/image-20250310141141491-BlXOgKWm.png",d="/assets/image-20250310141200028-B4wcIwqO.png",u="/assets/image-20250310141249652-qMRtMgjB.png",m="/assets/image-20250310141307885-DtzNUoz6.png",k="/assets/image-20250310141332413-D9OLjCEk.png",v="/assets/image-20250310141346965-3Vxy4Nar.png",b="/assets/image-20250310141358613-LpLmUyut.png",g="/assets/image-20250310141501611-BaIdhouE.png",h="/assets/image-20250310141519045-CwL0SAOx.png",y="/assets/image-20250310141554878-DqWywhWg.png",f="/assets/image-20250310141919061-DsaQJwyX.png",x={},q={href:"http://xn--6qq53qnb065ekjf6u0a2kz:8080/search/list",target:"_blank",rel:"noopener noreferrer"},_={href:"http://xn--ip-0p3cl35ek5e6u0a2kz:18080",target:"_blank",rel:"noopener noreferrer"},D={href:"https://docs.docker.com/compose/compose-file/compose-file-v3/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.docker.com/compose/reference/",target:"_blank",rel:"noopener noreferrer"},S={href:"http://yourIp:8080",target:"_blank",rel:"noopener noreferrer"};function M(O,s){const e=c("ExternalLinkIcon");return o(),i("div",null,[s[8]||(s[8]=l(`<p><img src="https://bizhi1.com/wp-content/uploads/2025/01/wall-e-lonely-robot-desktop-wallpaper.jpg" alt="WALL-E 孤独的机器人桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 部署 Java 项目</p><p>2 部署前端</p><p>3 DockerCompose</p></div><p>好了，我们已经熟悉了Docker的基本用法，接下来可以尝试部署项目了。</p><p>在课前资料中已经提供了一个黑马商城项目给大家，如图：</p><p>项目说明：</p><ul><li>hmall：商城的后端代码</li><li>hmall-portal：商城用户端的前端代码</li><li>hmall-admin：商城管理端的前端代码</li></ul><p>部署的容器及端口说明：</p><table><thead><tr><th style="text-align:left;"><strong>项目</strong></th><th style="text-align:left;"><strong>容器名</strong></th><th style="text-align:left;"><strong>端口</strong></th><th style="text-align:left;"><strong>备注</strong></th></tr></thead><tbody><tr><td style="text-align:left;">hmall</td><td style="text-align:left;">hmall</td><td style="text-align:left;">8080</td><td style="text-align:left;">黑马商城后端API入口</td></tr><tr><td style="text-align:left;">hmall-portal</td><td style="text-align:left;">nginx</td><td style="text-align:left;">18080</td><td style="text-align:left;">黑马商城用户端入口</td></tr><tr><td style="text-align:left;">hmall-admin</td><td style="text-align:left;">18081</td><td style="text-align:left;">黑马商城管理端入口</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">mysql</td><td style="text-align:left;">mysql</td><td style="text-align:left;">3306</td><td style="text-align:left;">数据库</td></tr></tbody></table><p>在正式部署前，我们先删除之前的nginx、dd两个容器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> nginx <span class="token function">dd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>mysql容器中已经准备好了商城的数据，所以就不再删除了。</p><h2 id="_1-部署-java-项目" tabindex="-1"><a class="header-anchor" href="#_1-部署-java-项目"><span>1 部署 Java 项目</span></a></h2><p><code>hmall</code>项目是一个maven聚合项目，使用IDEA打开<code>hmall</code>项目，查看项目结构如图：</p><p><img src="`+r+'" alt="image-20250310141141491"></p><p>我们要部署的就是其中的<code>hm-service</code>，其中的配置文件采用了多环境的方式：</p><p><img src="'+d+'" alt="image-20250310141200028"></p><p>其中的<code>application-dev.yaml</code>是部署到开发环境的配置，<code>application-local.yaml</code>是本地运行时的配置。</p><p>查看application.yaml，你会发现其中的JDBC地址并未写死，而是读取变量：</p><p><img src="'+u+'" alt="image-20250310141249652"></p><p>这两个变量在<code>application-dev.yaml</code>和<code>application-local.yaml</code>中并不相同：</p><p><img src="'+m+'" alt="image-20250310141307885"></p><p>在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。</p><p>我们将项目打包：</p><p><img src="'+k+'" alt="image-20250310141332413"></p><p>结果：</p><p><img src="'+v+'" alt="image-20250310141346965"></p><p>将<code>hm-service</code>目录下的<code>Dockerfile</code>和<code>hm-service/target</code>目录下的<code>hm-service.jar</code>一起上传到虚拟机的<code>root</code>目录：</p><p><img src="'+b+`" alt="image-20250310141358613"></p><p>部署项目：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1.构建项目镜像，不指定tag，则默认为latest</span></span>
<span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> hmall <span class="token builtin class-name">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2.查看镜像</span></span>
<span class="line"><span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span>
<span class="line">hmall         latest    0bb07b2c34b9   <span class="token number">43</span> seconds ago   362MB</span>
<span class="line">docker-demo   <span class="token number">1.0</span>       49743484da68   <span class="token number">24</span> hours ago     327MB</span>
<span class="line">nginx         latest    605c77e624dd   <span class="token number">16</span> months ago    141MB</span>
<span class="line">mysql         latest    3218b38490ce   <span class="token number">17</span> months ago    516MB</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> hmall <span class="token parameter variable">--network</span> hmall <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 hmall</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30)),n("p",null,[s[1]||(s[1]=a("测试，通过浏览器访问：")),n("a",q,[s[0]||(s[0]=a("http://你的虚拟机地址:8080/search/list")),t(e)])]),s[9]||(s[9]=l('<h2 id="_2-部署前端" tabindex="-1"><a class="header-anchor" href="#_2-部署前端"><span>2 部署前端</span></a></h2><p><code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。在课前资料中已经给大家提供了nginx的部署目录：</p><p><img src="'+g+'" alt="image-20250310141501611"></p><p>其中：</p><ul><li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li><li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理</li></ul><p>我们现在要做的就是把整个nginx目录上传到虚拟机的<code>/root</code>目录下：</p><p><img src="'+h+`" alt="image-20250310141519045"></p><p>然后创建nginx容器并完成两个挂载：</p><ul><li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/ng\`\`inx.conf</code></li><li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li></ul><p>由于需要让nginx同时代理hmall-portal和hmall-admin两套前端资源，因此我们需要暴露两个端口：</p><ul><li>18080：对应hmall-portal</li><li>18081：对应hmall-admin</li></ul><p>命令如下：</p><div class="language-Bash line-numbers-mode" data-highlighter="prismjs" data-ext="Bash" data-title="Bash"><pre><code><span class="line">docker run -d \\</span>
<span class="line">  --name nginx \\</span>
<span class="line">  -p 18080:18080 \\</span>
<span class="line">  -p 18081:18081 \\</span>
<span class="line">  -v /root/nginx/html:/usr/share/nginx/html \\</span>
<span class="line">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \\</span>
<span class="line">  --network hmall \\</span>
<span class="line">  nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),n("p",null,[s[3]||(s[3]=a("测试，通过浏览器访问：")),n("a",_,[s[2]||(s[2]=a("http://你的虚拟机ip:18080")),t(e)])]),s[10]||(s[10]=l('<p><img src="'+y+'" alt="image-20250310141554878"></p><h2 id="_3-dockercompose" tabindex="-1"><a class="header-anchor" href="#_3-dockercompose"><span>3 DockerCompose</span></a></h2><p>大家可以看到，我们部署一个简单的java项目，其中包含3个容器：</p><ul><li>MySQL</li><li>Nginx</li><li>Java项目</li></ul><p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止3个。如果还像之前那样手动的逐一部署，就太麻烦了。</p><p>而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><h3 id="_3-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_3-1-基本语法"><span>3.1 基本语法</span></a></h3><p>docker-compose.yml文件的基本语法可以参考官方文档：</p>',8)),n("p",null,[n("a",D,[s[4]||(s[4]=a("https://docs.docker.com/compose/compose-file/compose-file-v3/")),t(e)])]),s[11]||(s[11]=l(`<p>docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于service就是在定义某个应用的运行时参数，因此与<code>docker run</code>参数非常相似。</p><p>举例来说，用docker run部署MySQL的命令如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> ./mysql/data:/var/lib/mysql <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> ./mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> ./mysql/init:/docker-entrypoint-initdb.d <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--network</span> hmall</span>
<span class="line">  mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用<code>docker-compose.yml</code>文件来定义，就是这样：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">mysql</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;3306:3306&quot;</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai</span>
<span class="line">      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> new</span>
<span class="line"><span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">new</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> hmall</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比如下：</p><table><thead><tr><th style="text-align:left;"><strong>docker run 参数</strong></th><th style="text-align:left;"><strong>docker compose 指令</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">--name</td><td style="text-align:left;">container_name</td><td style="text-align:left;">容器名称</td></tr><tr><td style="text-align:left;">-p</td><td style="text-align:left;">ports</td><td style="text-align:left;">端口映射</td></tr><tr><td style="text-align:left;">-e</td><td style="text-align:left;">environment</td><td style="text-align:left;">环境变量</td></tr><tr><td style="text-align:left;">-v</td><td style="text-align:left;">volumes</td><td style="text-align:left;">数据卷配置</td></tr><tr><td style="text-align:left;">--network</td><td style="text-align:left;">networks</td><td style="text-align:left;">网络</td></tr></tbody></table><p>明白了其中的对应关系，相信编写<code>docker-compose</code>文件应该难不倒大家。</p><p>黑马商城部署文件：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">mysql</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;3306:3306&quot;</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai</span>
<span class="line">      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net</span>
<span class="line">  <span class="token key atrule">hmall</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token key atrule">context</span><span class="token punctuation">:</span> .</span>
<span class="line">      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> hmall</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span></span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net</span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> mysql</span>
<span class="line">  <span class="token key atrule">nginx</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;18080:18080&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;18081:18081&quot;</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> hmall</span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net</span>
<span class="line"><span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">hm-net</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> hmall</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-基础命令" tabindex="-1"><a class="header-anchor" href="#_3-2-基础命令"><span>3.2 基础命令</span></a></h3><p>编写好docker-compose.yml文件，就可以部署项目了。常见的命令：</p>`,12)),n("p",null,[n("a",w,[s[5]||(s[5]=a("https://docs.docker.com/compose/reference/")),t(e)])]),s[12]||(s[12]=l(`<p>基本语法如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> compose <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p><p><img src="`+f+`" alt="image-20250310141919061"></p><p>教学演示：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1.进入root目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> /root</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2.删除旧容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span><span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3.删除hmall镜像</span></span>
<span class="line"><span class="token function">docker</span> rmi hmall</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4.清空MySQL数据</span></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> mysql/data</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5.启动所有, -d 参数是后台启动</span></span>
<span class="line"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span></span>
<span class="line"><span class="token comment"># 结果：</span></span>
<span class="line"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Building <span class="token number">15</span>.5s <span class="token punctuation">(</span><span class="token number">8</span>/8<span class="token punctuation">)</span> FINISHED</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>internal<span class="token punctuation">]</span> load build definition from Dockerfile                                    <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> transferring dockerfile: 358B                                                    <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>internal<span class="token punctuation">]</span> load .dockerignore                                                       <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> transferring context: 2B                                                         <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>internal<span class="token punctuation">]</span> load metadata <span class="token keyword">for</span> docker.io/library/openjdk:11.0-jre-buster             <span class="token number">15</span>.4s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>/3<span class="token punctuation">]</span> FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>internal<span class="token punctuation">]</span> load build context                                                       <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> transferring context: 98B                                                        <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> CACHED <span class="token punctuation">[</span><span class="token number">2</span>/3<span class="token punctuation">]</span> RUN <span class="token function">ln</span> <span class="token parameter variable">-snf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span>   <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> CACHED <span class="token punctuation">[</span><span class="token number">3</span>/3<span class="token punctuation">]</span> COPY hm-service.jar /app.jar                                           <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> exporting to image                                                                  <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> exporting layers                                                                 <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  <span class="token number">0</span>.0s</span>
<span class="line"> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> naming to docker.io/library/root-hmall                                           <span class="token number">0</span>.0s</span>
<span class="line"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Running <span class="token number">4</span>/4</span>
<span class="line"> ✔ Network hmall    Created                                                             <span class="token number">0</span>.2s</span>
<span class="line"> ✔ Container mysql  Started                                                             <span class="token number">0</span>.5s</span>
<span class="line"> ✔ Container hmall  Started                                                             <span class="token number">0</span>.9s</span>
<span class="line"> ✔ Container nginx  Started                                                             <span class="token number">1</span>.5s</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6.查看镜像</span></span>
<span class="line"><span class="token function">docker</span> compose images</span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE</span>
<span class="line">hmall               root-hmall          latest              32eebee16acd        362MB</span>
<span class="line">mysql               mysql               latest              3218b38490ce        516MB</span>
<span class="line">nginx               nginx               latest              605c77e624dd        141MB</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7.查看容器</span></span>
<span class="line"><span class="token function">docker</span> compose <span class="token function">ps</span></span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS</span>
<span class="line">hmall               root-hmall          <span class="token string">&quot;java -jar /app.jar&quot;</span>     hmall               <span class="token number">54</span> seconds ago      Up <span class="token number">52</span> seconds       <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp</span>
<span class="line">mysql               mysql               <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   mysql               <span class="token number">54</span> seconds ago      Up <span class="token number">53</span> seconds       <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, :::3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp</span>
<span class="line">nginx               nginx               <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   nginx               <span class="token number">54</span> seconds ago      Up <span class="token number">52</span> seconds       <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:18080-18081-<span class="token operator">&gt;</span><span class="token number">18080</span>-18081/tcp, :::18080-18081-<span class="token operator">&gt;</span><span class="token number">18080</span>-18081/tcp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),n("p",null,[s[7]||(s[7]=a("打开浏览器，访问：")),n("a",S,[s[6]||(s[6]=a("http://yourIp:8080")),t(e)])])])}const A=p(x,[["render",M]]),C=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day02_Docker/3_Docker/3-Docker.html","title":"项目部署","lang":"en-US","frontmatter":{"title":"项目部署","date":"2025/03/06"},"headers":[{"level":2,"title":"1 部署 Java 项目","slug":"_1-部署-java-项目","link":"#_1-部署-java-项目","children":[]},{"level":2,"title":"2 部署前端","slug":"_2-部署前端","link":"#_2-部署前端","children":[]},{"level":2,"title":"3 DockerCompose","slug":"_3-dockercompose","link":"#_3-dockercompose","children":[{"level":3,"title":"3.1 基本语法","slug":"_3-1-基本语法","link":"#_3-1-基本语法","children":[]},{"level":3,"title":"3.2 基础命令","slug":"_3-2-基础命令","link":"#_3-2-基础命令","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day02_Docker/3_Docker/3-Docker.md","git":{"createdTime":1741251281000,"updatedTime":1741654623000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{A as comp,C as data};
