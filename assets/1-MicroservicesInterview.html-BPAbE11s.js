import{_ as a,c as t,b as i,a as l,d as n,e as o,r as p,o as r}from"./app-v4KVQ4WJ.js";const c="/assets/image-20250624165600842-CqaQcIKY.png",d="/assets/image-20250624165611328-BfyhXvaP.png",g="/assets/image-20250624165621153-DmjLh510.png",m="/assets/image-20250624165648088-CjGLaNTr.png",h="/assets/image-20250624165706722-BEZV4i-y.png",_="/assets/image-20250624165742578-C2tYB5-R.png",u="/assets/image-20250624165753068-CDikWOW3.png",C="/assets/image-20250624165806379-B9nL4JtH.png",v="/assets/image-20250624165817581-D65av-GA.png",A="/assets/image-20250624165848992-BrpZKwAR.png",f="/assets/image-20250624165903508-BAxghIQ8.png",T="/assets/image-20250624165916243-BcD9Vm-O.png",b="/assets/image-20250624165932235-CnbwEWOq.png",k="/assets/image-20250624165958560-TmfBWDHI.png",x="/assets/image-20250624170009476-Cq7NGj6z.png",B={},y={href:"https://seata.io/zh-cn/docs/dev/mode/at-mode.html",target:"_blank",rel:"noopener noreferrer"};function w(P,e){const s=p("ExternalLinkIcon");return r(),t("div",null,[e[1]||(e[1]=i('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/billie-eilish-colorful-stage-desktop-wallpaper-4k.jpg" alt="Billie Eilish 多彩的舞台桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 CAP 定理</p><p>2 BASE 理论</p><p>3 AT 模式的脏写问题</p><p>4 TCC 模式</p></div><p>微服务在面试时被问到的内容相对较少，常见的面试题如下：</p><ul><li>SpringCloud有哪些常用组件？分别是什么作用？</li><li>服务注册发现的基本流程是怎样的？</li><li>Eureka和Nacos有哪些区别？</li><li>Nacos的分级存储模型是什么意思？</li><li>Ribbon和SpringCloudLoadBalancer有什么差异</li><li>什么是服务雪崩，常见的解决方案有哪些？</li><li>Hystix和Sentinel有什么区别和联系？</li><li>限流的常见算法有哪些？</li><li>什么是CAP理论和BASE思想？</li><li>项目中碰到过分布式事务问题吗？怎么解决的？</li><li>AT模式如何解决脏读和脏写问题的？</li><li>TCC模式与AT模式对比，有哪些优缺点</li></ul><p>可以发现，这些问题都是围绕着SpringCloud的相关组件的，其中有些问题我们在课堂上已经介绍过，这里不再赘述。我们重点讲解一些之前没有讲过的，与底层实现有关的部分。</p><p>讲解的思路还是基于SpringCloud的组件分类来讲的，主要包括：</p><ul><li>分布式事务</li><li>注册中心</li><li>远程调用</li><li>服务保护</li></ul><p>等几个方面</p><p><strong>分布式事务</strong>，就是指不是在单个服务或单个数据库架构下，产生的事务，例如：</p><ul><li>跨数据源的分布式事务</li><li>跨服务的分布式事务</li><li>综合情况</li></ul><p>我们之前解决分布式事务问题是直接使用Seata框架的AT模式，但是解决分布式事务问题的方案远不止这一种。</p><h2 id="_1-cap-定理" tabindex="-1"><a class="header-anchor" href="#_1-cap-定理"><span>1 CAP 定理</span></a></h2><p>解决分布式事务问题，需要一些分布式系统的基础知识作为理论指导，首先就是CAP定理。</p><p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标：</p><ul><li><strong>C</strong>onsistency（一致性）</li><li><strong>A</strong>vailability（可用性）</li><li><strong>P</strong>artition tolerance （分区容错性）</li></ul><p>它们的第一个字母分别是 <code>C</code>、<code>A</code>、<code>P</code>。Eric Brewer认为任何分布式系统架构方案都不可能同时满足这3个目标，这个结论就叫做 CAP 定理。</p><p>为什么呢？</p><h3 id="_1-1-一致性" tabindex="-1"><a class="header-anchor" href="#_1-1-一致性"><span>1.1 一致性</span></a></h3><p><code>Consistency</code>（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。</p><p>比如现在包含两个节点，其中的初始数据是一致的：</p><p><img src="'+c+'" alt="image-20250624165600842"></p><p>当我们修改其中一个节点的数据时，两者的数据产生了差异：</p><p><img src="'+d+'" alt="image-20250624165611328"></p><p>要想保住一致性，就必须实现node01 到 node02的数据 同步：</p><p><img src="'+g+'" alt="image-20250624165621153"></p><h3 id="_1-2-可用性" tabindex="-1"><a class="header-anchor" href="#_1-2-可用性"><span>1.2 可用性</span></a></h3><p>Availability （可用性）：用户访问分布式系统时，读或写操作总能成功。</p><p>只能读不能写，或者只能写不能读，或者两者都不能执行，就说明系统弱可用或不可用。</p><h3 id="_1-3-分区容错" tabindex="-1"><a class="header-anchor" href="#_1-3-分区容错"><span>1.3 分区容错</span></a></h3><p><code>Partition</code>，就是分区，就是当分布式系统节点之间出现网络故障导致节点之间无法通信的情况：</p><p><img src="'+m+'" alt="image-20250624165648088"></p><p>如上图，node01和node02之间网关畅通，但是与node03之间网络断开。于是node03成为一个独立的网络分区；node01和node02在一个网络分区。</p><p><code>Tolerance</code>，就是容错，即便是系统出现网络分区，整个系统也要持续对外提供服务。</p><h3 id="_1-4-矛盾" tabindex="-1"><a class="header-anchor" href="#_1-4-矛盾"><span>1.4 矛盾</span></a></h3><p>在分布式系统中，网络不能100%保证畅通，也就是说网络分区的情况一定会存在。而我们的系统必须要持续运行，对外提供服务。所以分区容错性（<code>P</code>）是硬性指标，所有分布式系统都要满足。而在设计分布式系统时要取舍的就是一致性（<code>C</code>）和可用性（<code>A</code>）了。</p><p>假如现在出现了网络分区，如图：</p><p><img src="'+h+'" alt="image-20250624165706722"></p><p>由于网络故障，当我们把数据写入node01时，可以与node02完成数据同步，但是无法同步给node03。现在有两种选择：</p><ul><li>允许用户任意读写，保证可用性。但由于node03无法完成同步，就会出现数据不一致的情况。满足AP</li><li>不允许用户写，可以读，直到网络恢复，分区消失。这样就确保了一致性，但牺牲了可用性。满足CP</li></ul><p>可见，在分布式系统中，<code>A</code>和<code>C</code>之间只能满足一个。</p><h2 id="_2-base-理论" tabindex="-1"><a class="header-anchor" href="#_2-base-理论"><span>2 BASE 理论</span></a></h2><p>既然分布式系统要遵循CAP定理，那么问题来了，我到底是该牺牲一致性还是可用性呢？如果牺牲了一致性，出现数据不一致该怎么处理？</p><p>人们在总结系统设计经验时，最终得到了一些心得：</p><ul><li><strong>B</strong>asically <strong>A</strong>vailable <strong>（<strong>基本可用</strong>）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li><strong>S</strong>oft State**（<strong>软状态</strong>）：**在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Ev</strong>entually Consistent**（<strong>最终一致性</strong>）**：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul><p>以上就是BASE理论。</p><p>简单来说，BASE理论就是一种取舍的方案，不再追求完美，而是最终达成目标。因此解决分布式事务的思想也是这样，有两个方向：</p><ul><li>AP思想：各个子事务分别执行和提交，无需锁定数据。允许出现结果不一致，然后采用弥补措施恢复，实现最终一致即可。例如<code>AT</code>模式就是如此</li><li>CP思想：各个子事务执行后不要提交，而是等待彼此结果，然后同时提交或回滚。在这个过程中锁定资源，不允许其它人访问，数据处于不可用状态，但能保证一致性。例如<code>XA</code>模式</li></ul><h2 id="_3-at-模式的脏写问题" tabindex="-1"><a class="header-anchor" href="#_3-at-模式的脏写问题"><span>3 AT 模式的脏写问题</span></a></h2><p>我们先回顾一下AT模式的流程，AT模式也分为两个阶段：</p><p>第一阶段是记录数据快照，执行并提交事务：</p><p><img src="'+_+'" alt="image-20250624165742578"></p><p>第二阶段根据阶段一的结果来判断：</p><ul><li>如果每一个分支事务都成功，则事务已经结束（因为阶段一已经提交），因此删除阶段一的快照即可</li><li>如果有任意分支事务失败，则需要根据快照恢复到更新前数据。然后删除快照</li></ul><p><img src="'+u+'" alt="image-20250624165753068"></p><p>这种模式在大多数情况下（99%）并不会有什么问题，不过在极端情况下，特别是多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p><p><img src="'+C+'" alt="image-20250624165806379"></p><p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p><p><img src="'+v+'" alt="image-20250624165817581"></p><p>具体可以参考官方文档：</p>',59)),l("p",null,[l("a",y,[e[0]||(e[0]=n("https://seata.io/zh-cn/docs/dev/mode/at-mode.html")),o(s)])]),e[2]||(e[2]=i('<h2 id="_4-tcc-模式" tabindex="-1"><a class="header-anchor" href="#_4-tcc-模式"><span>4 TCC 模式</span></a></h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li><code>try</code>：资源的检测和预留；</li><li><code>confirm</code>：完成资源操作业务；要求 <code>try</code> 成功 <code>confirm</code> 一定要能成功。</li><li><code>cancel</code>：预留资源释放，可以理解为try的反向操作。</li></ul><h3 id="_4-1-流程分析" tabindex="-1"><a class="header-anchor" href="#_4-1-流程分析"><span>4.1 流程分析</span></a></h3><p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p><p><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</p><p>初始余额：</p><p><img src="'+A+'" alt="image-20250624165848992"></p><p>余额充足，可以冻结：</p><p><img src="'+f+'" alt="image-20250624165903508"></p><p>此时，总金额 = 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p><p><strong>阶段二（Confirm)</strong>：假如要提交（Confirm），之前可用金额已经扣减，并转移到冻结金额。因此可用金额不变，直接冻结金额扣减30即可：</p><p><img src="'+T+'" alt="image-20250624165916243"></p><p>此时，总金额 = 冻结金额 + 可用金额 = 0 + 70 = 70元</p><p><strong>阶段二(Canncel)</strong>：如果要回滚（Cancel），则释放之前冻结的金额，也就是冻结金额扣减30，可用余额增加30</p><p><img src="'+b+'" alt="image-20250624165932235"></p><h3 id="_4-2-事务悬挂和空回滚" tabindex="-1"><a class="header-anchor" href="#_4-2-事务悬挂和空回滚"><span>4.2 事务悬挂和空回滚</span></a></h3><p>假如一个分布式事务中包含两个分支事务，try阶段，一个分支成功执行，另一个分支事务<strong>阻塞</strong>：</p><p><img src="'+k+'" alt="image-20250624165958560"></p><p>如果阻塞时间太长，可能导致全局事务超时而触发二阶段的<code>cancel</code>操作。两个分支事务都会执行cancel操作：</p><p><img src="'+x+'" alt="image-20250624170009476"></p><p>要知道，其中一个分支是未执行<code>try</code>操作的，直接执行了<code>cancel</code>操作，反而会导致数据错误。因此，这种情况下，尽管<code>cancel</code>方法要执行，但其中不能做任何回滚操作，这就是<strong>空回滚</strong>。</p><p>对于整个空回滚的分支事务，将来try方法阻塞结束依然会执行。但是整个全局事务其实已经结束了，因此永远不会再有confirm或cancel，也就是说这个事务执行了一半，处于<strong>悬挂状态</strong>，这就是业务悬挂问题。</p><p>以上问题都需要我们在编写try、cancel方法时处理。</p><h3 id="_4-3-总结" tabindex="-1"><a class="header-anchor" href="#_4-3-总结"><span>4.3 总结</span></a></h3><p>TCC模式的每个阶段是做什么的？</p><ul><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放</li></ul><p>TCC的优点是什么？</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li></ul><p>TCC的缺点是什么？</p><ul><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理、事务悬挂和空回滚处理</li></ul>',31))])}const E=a(B,[["render",w]]),I=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day11_MicroservicesInterview/1-MicroservicesInterview.html","title":"分布式事务","lang":"en-US","frontmatter":{"title":"分布式事务","date":"2025/03/06"},"headers":[{"level":2,"title":"1 CAP 定理","slug":"_1-cap-定理","link":"#_1-cap-定理","children":[{"level":3,"title":"1.1 一致性","slug":"_1-1-一致性","link":"#_1-1-一致性","children":[]},{"level":3,"title":"1.2 可用性","slug":"_1-2-可用性","link":"#_1-2-可用性","children":[]},{"level":3,"title":"1.3 分区容错","slug":"_1-3-分区容错","link":"#_1-3-分区容错","children":[]},{"level":3,"title":"1.4 矛盾","slug":"_1-4-矛盾","link":"#_1-4-矛盾","children":[]}]},{"level":2,"title":"2 BASE 理论","slug":"_2-base-理论","link":"#_2-base-理论","children":[]},{"level":2,"title":"3 AT 模式的脏写问题","slug":"_3-at-模式的脏写问题","link":"#_3-at-模式的脏写问题","children":[]},{"level":2,"title":"4 TCC 模式","slug":"_4-tcc-模式","link":"#_4-tcc-模式","children":[{"level":3,"title":"4.1 流程分析","slug":"_4-1-流程分析","link":"#_4-1-流程分析","children":[]},{"level":3,"title":"4.2 事务悬挂和空回滚","slug":"_4-2-事务悬挂和空回滚","link":"#_4-2-事务悬挂和空回滚","children":[]},{"level":3,"title":"4.3 总结","slug":"_4-3-总结","link":"#_4-3-总结","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day11_MicroservicesInterview/1-MicroservicesInterview.md","git":{"createdTime":1741251281000,"updatedTime":1750756522000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{E as comp,I as data};
