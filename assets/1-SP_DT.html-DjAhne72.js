import{_ as l,c as i,b as t,a as n,d as a,e as p,r as c,o}from"./app-CNHi2u4I.js";const r="/assets/image-20250312112144267-SLxIUmdk.png",u="/assets/image-20250312113336510-B0GHfHbA.png",d="/assets/image-20250312113807831-DRv3wVeT.png",m="/assets/image-20250312113859869-BRqZDW-V.png",k="/assets/image-20250312113950080-BdFJBSKH.png",g="/assets/image-20250312120621993-DQGr8ikS.png",v="/assets/image-20250317154446530-DvA8vGiy.png",b="/assets/image-20250317154456082-DpyZfw05.png",h="/assets/image-20250317154959227-B9uuPduw.png",_="/assets/image-20250317155009457-6-rHxDPO.png",y="/assets/image-20250317155209205-gU4qWzCB.png",f="/assets/image-20250317155222281-B08cipU7.png",S="/assets/image-20250317155246283-4TEMYGhq.png",w="/assets/image-20250317155312745-DCm3Pjob.png",x="/assets/image-20250317155345297-K9wY_1JX.png",C="/assets/image-20250317155356098-BuXh-wY-.png",D="/assets/image-20250317155408298-DwWGdcEw.png",I="/assets/image-20250317155417436-BWeIVdag.png",j="/assets/image-20250317155724324-BHT7Ypft.png",T="/assets/image-20250317160240589-DzPr7VCd.png",B="/assets/image-20250317160346975-FkObSmyA.png",F="/assets/image-20250317160413104-rjlpIziE.png",P="/assets/image-20250317160434652-G1q1kAXb.png",O="/assets/image-20250317160441390-DOBQWmuH.png",E="/assets/image-20250317160446683-DM7ufdx6.png",A="/assets/image-20250317160456270-CoA482LJ.png",J="/assets/image-20250317160649634-DWJcAUU0.png",L="/assets/image-20250317160700648-CIQgeIvF.png",Q="/assets/image-20250317160706639-BqWdXfQF.png",q="/assets/image-20250317160711741-CYg4Cm3t.png",V="/assets/image-20250317160717151-3cWZBu6M.png",M="/assets/image-20250317160742307-CJCpLgOr.png",U="/assets/image-20250317160807541-CPIietgi.png",W="/assets/image-20250317160812724-tj-2nL81.png",z="/assets/image-20250317160818030-DBg4CUjn.png",H="/assets/image-20250317160825515-DwsTgWLN.png",R={},G={href:"https://sentinelguard.io/zh-cn/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/alibaba/Sentinel/releases",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/alibaba/Sentinel/wiki/%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%A1%B9",target:"_blank",rel:"noopener noreferrer"},X={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"};function Z(K,s){const e=c("ExternalLinkIcon");return o(),i("div",null,[s[6]||(s[6]=t('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/美女玻璃杯黄玉瑶-4k壁纸-3840x2400-1.jpg" alt="美女玻璃杯黄玉瑶 4k壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 服务保护方案</p><p>2 Sentinel</p><p>3 请求限流</p><p>4 线程隔离</p><p>5 服务熔断</p></div><p>在微服务远程调用的过程中，还存在几个问题需要解决。</p><p>首先是<strong>业务健壮性</strong>问题：</p><p>例如在之前的查询购物车列表业务中，购物车服务需要查询最新的商品信息，与购物车数据做对比，提醒用户。大家设想一下，如果商品服务查询时发生故障，查询购物车列表在调用商品服 务时，是不是也会异常？从而导致购物车查询失败。但从业务角度来说，为了提升用户体验，即便是商品查询失败，购物车列表也应该正确展示出来，哪怕是不包含最新的商品信息。</p><p>还有<strong>级联</strong> <strong>失败</strong> 问题：</p><p>还是查询购物车的业务，假如商品服务业务并发较高，占用过多Tomcat连接。可能会导致商品服务的所有接口响应时间增加，延迟变高，甚至是长时间阻塞直至查询失败。</p><p>此时查询购物车业务需要查询并等待商品查询结果，从而导致查询购物车列表业务的响应时间也变长，甚至也阻塞直至无法访问。而此时如果查询购物车的请求较多，可能导致购物车服务的Tomcat连接占用较多，所有接口的响应时间都会增加，整个服务性能很差， 甚至不可用。</p><p><img src="'+r+'" alt="image-20250312112144267"></p><p>依次类推，整个微服务群中与购物车服务、商品服务等有调用关系的服务可能都会出现问题，最终导致整个集群不可用。</p><p><img src="'+u+'" alt="image-20250312113336510"></p><p>这就是<strong>级联 ** <strong>失败</strong> 问题，或者叫</strong>雪崩**问题。</p><p>还有跨服务的事务问题：</p><p>比如昨天讲到过的下单业务，下单的过程中需要调用多个微服务：</p><ul><li>商品服务：扣减库存</li><li>订单服务：保存订单</li><li>购物车服务：清理购物车</li></ul><p>这些业务全部都是数据库的写操作，我们必须确保所有操作的同时成功或失败。但是这些操作在不同微服务，也就是不同的Tomcat，这样的情况如何确保事务特性呢？</p><p>这些问题都会在今天找到答案。</p><p>今天的内容会分成几部分：</p><ul><li>微服务保护 <ul><li>服务保护方案</li><li>请求限流</li><li>隔离和熔断</li></ul></li><li>分布式事务 <ul><li>初识分布式事务</li><li>Seata</li></ul></li></ul><p>通过今天的学习，你将能掌握下面的能力：</p><ul><li>知道雪崩问题产生原因及常见解决方案</li><li>能使用Sentinel实现服务保护</li><li>理解分布式事务产生的原因</li><li>能使用Seata解决分布式事务问题</li><li>理解AT模式基本原理</li></ul><p>保证服务运行的健壮性，避免级联失败导致的雪崩问题，就属于微服务保护。这章我们就一起来学习一下微服务保护的常见方案以及对应的技术。</p><h2 id="_1-服务保护方案" tabindex="-1"><a class="header-anchor" href="#_1-服务保护方案"><span>1 服务保护方案</span></a></h2><p>微服务保护的方案有很多，比如：</p><ul><li>请求限流</li><li>线程隔离</li><li>服务熔断</li></ul><p>这些方案或多或少都会导致服务的体验上略有下降，比如请求限流，降低了并发上限；线程隔离，降低了可用资源数量；服务熔断，降低了服务的完整度，部分服务变的不可用或弱可用。因此这些方案都属于服务<strong>降级</strong>的方案。但通过这些方案，服务的健壮性得到了提升，</p><p>接下来，我们就逐一了解这些方案的原理。</p><h3 id="_1-1-请求限流" tabindex="-1"><a class="header-anchor" href="#_1-1-请求限流"><span>1.1 请求限流</span></a></h3><p>服务故障最重要原因，就是并发太高！解决了这个问题，就能避免大部分故障。当然，接口的并发不是一直很高，而是突发的。因此请求限流，就是<strong>限制或控制</strong>接口访问的并发流量，避免服务因流量激增而出现故障。</p><p>请求限流往往会有一个限流器，数量高低起伏的并发请求曲线，经过限流器就变的非常平稳。这就像是水电站的大坝，起到蓄水的作用，可以通过开关控制水流出的大小，让下游水流始终维持在一个平稳的量。</p><p><img src="'+d+'" alt="image-20250312113807831"></p><h3 id="_1-2-线程隔离" tabindex="-1"><a class="header-anchor" href="#_1-2-线程隔离"><span>1.2 线程隔离</span></a></h3><p>当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。线程隔离正是解决这个问题的好办法。</p><p>线程隔离的思想来自轮船的舱壁模式：</p><p><img src="'+m+'" alt="image-20250312113859869"></p><p>轮船的船舱会被隔板分割为N个相互隔离的密闭舱，假如轮船触礁进水，只有损坏的部分密闭舱会进水，而其他舱由于相互隔离，并不会进水。这样就把进水控制在部分船体，避免了整个船舱进水而沉没。</p><p>为了避免某个接口故障或压力过大导致整个服务不可用，我们可以限定每个接口可以使用的资源范围，也就是将其“隔离”起来。</p><p><img src="'+k+'" alt="image-20250312113950080"></p><p>如图所示，我们给查询购物车业务限定可用线程数量上限为20，这样即便查询购物车的请求因为查询商品服务而出现故障，也不会导致服务器的线程资源被耗尽，不会影响到其它接口。</p><h3 id="_1-3-服务熔断" tabindex="-1"><a class="header-anchor" href="#_1-3-服务熔断"><span>1.3 服务熔断</span></a></h3><p>线程隔离虽然避免了雪崩问题，但故障服务（商品服务）依然会拖慢购物车服务（服务调用方）的接口响应速度。而且商品查询的故障依然会导致查询购物车功能出现故障，购物车业务也变的不可用了。</p><p>所以，我们要做两件事情：</p><ul><li><strong>编写服务降级逻辑</strong>：就是服务调用失败后的处理逻辑，根据业务场景，可以抛出异常，也可以返回友好提示或默认数据。</li><li><strong>异常统计和熔断</strong>：统计服务提供方的异常比例，当比例过高表明该接口会影响到其它服务，应该拒绝调用该接口，而是直接走降级逻辑。</li></ul><p><img src="'+g+'" alt="image-20250312120621993"></p><h2 id="_2-sentinel" tabindex="-1"><a class="header-anchor" href="#_2-sentinel"><span>2 Sentinel</span></a></h2><p>微服务保护的技术有很多，但在目前国内使用较多的还是Sentinel，所以接下来我们学习Sentinel的使用。</p><h3 id="_2-1-介绍和安装" tabindex="-1"><a class="header-anchor" href="#_2-1-介绍和安装"><span>2.1 介绍和安装</span></a></h3><p>Sentinel是阿里巴巴开源的一款服务保护框架，目前已经加入SpringCloudAlibaba中。官方网站：</p>',48)),n("p",null,[n("a",G,[s[0]||(s[0]=a("https://sentinelguard.io/zh-cn/")),p(e)])]),s[7]||(s[7]=n("p",null,"Sentinel 的使用可以分为两个部分:",-1)),s[8]||(s[8]=n("ul",null,[n("li",null,[n("strong",null,"核心库"),a("（Jar包）：不依赖任何框架/库，能够运行于 Java 8 及以上的版本的运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。在项目中引入依赖即可实现服务限流、隔离、熔断等功能。")]),n("li",null,[n("strong",null,"控制台"),a("（Dashboard）：Dashboard 主要负责管理推送规则、监控、管理机器信息等。")])],-1)),s[9]||(s[9]=n("p",null,"为了方便监控微服务，我们先把Sentinel的控制台搭建出来。",-1)),s[10]||(s[10]=n("p",null,"1）下载jar包",-1)),s[11]||(s[11]=n("p",null,"下载地址：",-1)),n("p",null,[n("a",N,[s[1]||(s[1]=a("https://github.com/alibaba/Sentinel/releases")),p(e)])]),s[12]||(s[12]=t('<p>也可以直接使用课前资料提供的版本：</p><p><img src="'+v+'" alt="image-20250317154446530"></p><p>2）运行</p><p>将jar包放在任意非中文、不包含特殊字符的目录下，重命名为<code>sentinel-dashboard.jar</code>：</p><p><img src="'+b+`" alt="image-20250317154456082"></p><p>然后运行如下命令启动控制台：</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其它启动时可配置参数可参考官方文档：</p>`,8)),n("p",null,[n("a",Y,[s[2]||(s[2]=a("启动配置项")),p(e)])]),s[13]||(s[13]=n("p",null,"3）访问",-1)),n("p",null,[s[4]||(s[4]=a("访问")),n("a",X,[s[3]||(s[3]=a("http://localhost:8090")),p(e)]),s[5]||(s[5]=a("页面，就可以看到sentinel的控制台了："))]),s[14]||(s[14]=t('<p><img src="'+h+'" alt="image-20250317154959227"></p><p>需要输入账号和密码，默认都是：sentinel</p><p>登录后，即可看到控制台，默认会监控sentinel-dashboard服务本身：</p><p><img src="'+_+`" alt="image-20250317155009457"></p><h3 id="_2-2-微服务整合" tabindex="-1"><a class="header-anchor" href="#_2-2-微服务整合"><span>2.2 微服务整合</span></a></h3><p>我们在<code>cart-service</code>模块中整合sentinel，连接<code>sentinel-dashboard</code>控制台，步骤如下： 1）引入sentinel依赖</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!--sentinel--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）配置控制台</p><p>修改application.yaml文件，添加下面内容：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">cloud</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">transport</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8090</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）访问<code>cart-service</code>的任意端点</p><p>重启<code>cart-service</code>，然后访问查询购物车接口，sentinel的客户端就会将服务访问的信息提交到<code>sentinel-dashboard</code>控制台。并展示出统计信息：</p><p><img src="`+y+'" alt="image-20250317155209205"></p><p>点击簇点链路菜单，会看到下面的页面：</p><p><img src="'+f+'" alt="image-20250317155222281"></p><p>所谓簇点链路，就是单机调用链路，是一次请求进入服务后经过的每一个被<code>Sentinel</code>监控的资源。默认情况下，<code>Sentinel</code>会监控<code>SpringMVC</code>的每一个<code>Endpoint</code>（接口）。</p><p>因此，我们看到<code>/carts</code>这个接口路径就是其中一个簇点，我们可以对其进行限流、熔断、隔离等保护措施。</p><p>不过，需要注意的是，我们的SpringMVC接口是按照Restful风格设计，因此购物车的查询、删除、修改等接口全部都是<code>/carts</code>路径：</p><p><img src="'+S+`" alt="image-20250317155246283"></p><p>默认情况下Sentinel会把路径作为簇点资源的名称，无法区分路径相同但请求方式不同的接口，查询、删除、修改等都被识别为一个簇点资源，这显然是不合适的。</p><p>所以我们可以选择打开Sentinel的请求方式前缀，把<code>请求方式 + 请求路径</code>作为簇点资源名：</p><p>首先，在<code>cart-service</code>的<code>application.yml</code>中添加下面的配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">cloud</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">transport</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8090</span></span>
<span class="line">      <span class="token key atrule">http-method-specify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启请求方式前缀</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，重启服务，通过页面访问购物车的相关接口，可以看到sentinel控制台的簇点链路发生了变化：</p><p><img src="`+w+'" alt="image-20250317155312745"></p><h2 id="_3-请求限流" tabindex="-1"><a class="header-anchor" href="#_3-请求限流"><span>3 请求限流</span></a></h2><p>在簇点链路后面点击流控按钮，即可对其做限流配置：</p><p><img src="'+x+'" alt="image-20250317155345297"></p><p>在弹出的菜单中这样填写：</p><p><img src="'+C+'" alt="image-20250317155356098"></p><p>这样就把查询购物车列表这个簇点资源的流量限制在了每秒6个，也就是最大QPS为6.</p><p>我们利用Jemeter做限流测试，我们每秒发出10个请求：</p><p><img src="'+D+'" alt="image-20250317155408298"></p><p>最终监控结果如下：</p><p><img src="'+I+'" alt="image-20250317155417436"></p><p>可以看出<code>GET:/carts</code>这个接口的通过QPS稳定在6附近，而拒绝的QPS在4附近，符合我们的预期。</p><h2 id="_4-线程隔离" tabindex="-1"><a class="header-anchor" href="#_4-线程隔离"><span>4 线程隔离</span></a></h2><p>限流可以降低服务器压力，尽量减少因并发流量引起的服务故障的概率，但并不能完全避免服务故障。一旦某个服务出现故障，我们必须隔离对这个服务的调用，避免发生雪崩。</p><p>比如，查询购物车的时候需要查询商品，为了避免因商品服务出现故障导致购物车服务级联失败，我们可以把购物车业务中查询商品的部分隔离起来，限制可用的线程资源：</p><p><img src="'+j+`" alt="image-20250317155724324"></p><p>这样，即便商品服务出现故障，最多导致查询购物车业务故障，并且可用的线程资源也被限定在一定范围，不会导致整个购物车服务崩溃。</p><p>所以，我们要对查询商品的FeignClient接口做线程隔离。</p><h3 id="_4-1-openfeign-整合-sentinel" tabindex="-1"><a class="header-anchor" href="#_4-1-openfeign-整合-sentinel"><span>4.1 OpenFeign 整合 Sentinel</span></a></h3><p>修改cart-service模块的application.yml文件，开启Feign的sentinel功能：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">feign</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启feign对sentinel的支持</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，默认情况下SpringBoot项目的tomcat最大线程数是200，允许的最大连接是8492，单机测试很难打满。</p><p>所以我们需要配置一下cart-service模块的application.yml文件，修改tomcat连接：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span></span>
<span class="line">  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">threads</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 允许的最大线程数</span></span>
<span class="line">    <span class="token key atrule">accept-count</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 最大排队等待数量</span></span>
<span class="line">    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 允许的最大连接</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启cart-service服务，可以看到查询商品的FeignClient自动变成了一个簇点资源：</p><p><img src="`+T+'" alt="image-20250317160240589"></p><h3 id="_4-2-配置线程隔离" tabindex="-1"><a class="header-anchor" href="#_4-2-配置线程隔离"><span>4.2 配置线程隔离</span></a></h3><p>接下来，点击查询商品的FeignClient对应的簇点资源后面的流控按钮：</p><p><img src="'+B+'" alt="image-20250317160346975"></p><p>在弹出的表单中填写下面内容：</p><p><img src="'+F+'" alt="image-20250317160413104"></p><p>注意，这里勾选的是并发线程数限制，也就是说这个查询功能最多使用5个线程，而不是5QPS。如果查询商品的接口每秒处理2个请求，则5个线程的实际QPS在10左右，而超出的请求自然会被拒绝。</p><p><img src="'+P+'" alt="image-20250317160434652"></p><p>我们利用Jemeter测试，每秒发送100个请求：</p><p><img src="'+O+'" alt="image-20250317160441390"></p><p>最终测试结果如下：</p><p><img src="'+E+'" alt="image-20250317160446683"></p><p>进入查询购物车的请求每秒大概在100，而在查询商品时却只剩下每秒10左右，符合我们的预期。</p><p>此时如果我们通过页面访问购物车的其它接口，例如添加购物车、修改购物车商品数量，发现不受影响：</p><p><img src="'+A+'" alt="image-20250317160456270"></p><p>响应时间非常短，这就证明线程隔离起到了作用，尽管查询购物车这个接口并发很高，但是它能使用的线程资源被限制了，因此不会影响到其它接口。</p><h2 id="_5-服务熔断" tabindex="-1"><a class="header-anchor" href="#_5-服务熔断"><span>5 服务熔断</span></a></h2><p>在上节课，我们利用线程隔离对查询购物车业务进行隔离，保护了购物车服务的其它接口。由于查询商品的功能耗时较高（我们模拟了500毫秒延时），再加上线程隔离限定了线程数为5，导致接口吞吐能力有限，最终QPS只有10左右。这就导致了几个问题：</p><p>第一，超出的QPS上限的请求就只能抛出异常，从而导致购物车的查询失败。但从业务角度来说，即便没有查询到最新的商品信息，购物车也应该展示给用户，用户体验更好。也就是给查询失败设置一个<strong>降级处理</strong>逻辑。</p><p>第二，由于查询商品的延迟较高（模拟的500ms），从而导致查询购物车的响应时间也变的很长。这样不仅拖慢了购物车服务，消耗了购物车服务的更多资源，而且用户体验也很差。对于商品服务这种不太健康的接口，我们应该直接停止调用，直接走降级逻辑，避免影响到当前服务。也就是将商品查询接口<strong>熔断</strong>。</p><h3 id="_5-1-编写降级逻辑" tabindex="-1"><a class="header-anchor" href="#_5-1-编写降级逻辑"><span>5.1 编写降级逻辑</span></a></h3><p>触发限流或熔断后的请求不一定要直接报错，也可以返回一些默认数据或者友好提示，用户体验会更好。</p><p>给FeignClient编写失败后的降级逻辑有两种方式：</p><ul><li>方式一：FallbackClass，无法对远程调用的异常做处理</li><li>方式二：FallbackFactory，可以对远程调用的异常做处理，我们一般选择这种方式。</li></ul><p>这里我们演示方式二的失败降级处理。</p><p><strong>步骤一</strong>：在hm-api模块中给<code>ItemClient</code>定义降级处理类，实现<code>FallbackFactory</code>：</p><p><img src="'+J+`" alt="image-20250317160649634"></p><p>代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hmall<span class="token punctuation">.</span>api<span class="token punctuation">.</span>client<span class="token punctuation">.</span>fallback</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hmall<span class="token punctuation">.</span>api<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ItemClient</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hmall<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">ItemDTO</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hmall<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">OrderDetailDTO</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hmall<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">BizIllegalException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hmall<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">CollUtils</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FallbackFactory</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Slf4j</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemClientFallback</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ItemClient</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ItemClient</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ItemClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ItemDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryItemByIds</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程调用ItemClient#queryItemByIds方法出现异常，参数：{}&quot;</span><span class="token punctuation">,</span> ids<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 查询购物车允许失败，查询失败，返回空集合</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductStock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDetailDTO</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 库存扣减业务需要触发事务回滚，查询失败，抛出异常</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizIllegalException</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤二</strong>：在<code>hm-api</code>模块中的<code>com.hmall.api.config.DefaultFeignConfig</code>类中将<code>ItemClientFallback</code>注册为一个<code>Bean</code>：</p><p><img src="`+L+'" alt="image-20250317160700648"></p><p><strong>步骤三</strong>：在<code>hm-api</code>模块中的<code>ItemClient</code>接口中使用<code>ItemClientFallbackFactory</code>：</p><p><img src="'+Q+'" alt="image-20250317160706639"></p><p>重启后，再次测试，发现被限流的请求不再报错，走了降级逻辑：</p><p><img src="'+q+'" alt="image-20250317160711741"></p><p>但是未被限流的请求延时依然很高：</p><p><img src="'+V+'" alt="image-20250317160717151"></p><p>导致最终的平局响应时间较长。</p><h3 id="_5-2-服务熔断" tabindex="-1"><a class="header-anchor" href="#_5-2-服务熔断"><span>5.2 服务熔断</span></a></h3><p>查询商品的RT较高（模拟的500ms），从而导致查询购物车的RT也变的很长。这样不仅拖慢了购物车服务，消耗了购物车服务的更多资源，而且用户体验也很差。</p><p>对于商品服务这种不太健康的接口，我们应该停止调用，直接走降级逻辑，避免影响到当前服务。也就是将商品查询接口<strong>熔断</strong>。当商品服务接口恢复正常后，再允许调用。这其实就是<strong>断路器</strong>的工作模式了。</p><p>Sentinel中的断路器不仅可以统计某个接口的<strong>慢请求比例</strong>，还可以统计<strong>异常请求比例</strong>。当这些比例超出阈值时，就会<strong>熔断</strong>该接口，即拦截访问该接口的一切请求，降级处理；当该接口恢复正常时，再放行对于该接口的请求。</p><p>断路器的工作状态切换有一个状态机来控制：</p><p><img src="'+M+'" alt="image-20250317160742307"></p><p>状态机包括三个状态：</p><ul><li><strong>closed</strong>：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li><li><strong>open</strong>：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态持续一段时间后会进入half-open状态</li><li><strong>half-open</strong>：半开状态，放行一次请求，根据执行结果来判断接下来的操作。 <ul><li>请求成功：则切换到closed状态</li><li>请求失败：则切换到open状态</li></ul></li></ul><p>我们可以在控制台通过点击簇点后的**<code>熔断</code>**按钮来配置熔断策略：</p><p><img src="'+U+'" alt="image-20250317160807541"></p><p>在弹出的表格中这样填写：</p><p><img src="'+W+'" alt="image-20250317160812724"></p><p>这种是按照慢调用比例来做熔断，上述配置的含义是：</p><ul><li>RT超过200毫秒的请求调用就是慢调用</li><li>统计最近1000ms内的最少5次请求，如果慢调用比例不低于0.5，则触发熔断</li><li>熔断持续时长20s</li></ul><p>配置完成后，再次利用Jemeter测试，可以发现：</p><p><img src="'+z+'" alt="image-20250317160818030"></p><p>在一开始一段时间是允许访问的，后来触发熔断后，查询商品服务的接口通过QPS直接为0，所有请求都被熔断了。而查询购物车的本身并没有受到影响。</p><p>此时整个购物车查询服务的平均RT影响不大：</p><p><img src="'+H+'" alt="image-20250317160825515"></p>',106))])}const ss=l(R,[["render",Z]]),ns=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day05_SP_DT/1-SP_DT.html","title":"微服务保护","lang":"en-US","frontmatter":{"title":"微服务保护","date":"2025/03/06"},"headers":[{"level":2,"title":"1 服务保护方案","slug":"_1-服务保护方案","link":"#_1-服务保护方案","children":[{"level":3,"title":"1.1 请求限流","slug":"_1-1-请求限流","link":"#_1-1-请求限流","children":[]},{"level":3,"title":"1.2 线程隔离","slug":"_1-2-线程隔离","link":"#_1-2-线程隔离","children":[]},{"level":3,"title":"1.3 服务熔断","slug":"_1-3-服务熔断","link":"#_1-3-服务熔断","children":[]}]},{"level":2,"title":"2 Sentinel","slug":"_2-sentinel","link":"#_2-sentinel","children":[{"level":3,"title":"2.1 介绍和安装","slug":"_2-1-介绍和安装","link":"#_2-1-介绍和安装","children":[]},{"level":3,"title":"2.2 微服务整合","slug":"_2-2-微服务整合","link":"#_2-2-微服务整合","children":[]}]},{"level":2,"title":"3 请求限流","slug":"_3-请求限流","link":"#_3-请求限流","children":[]},{"level":2,"title":"4 线程隔离","slug":"_4-线程隔离","link":"#_4-线程隔离","children":[{"level":3,"title":"4.1 OpenFeign 整合 Sentinel","slug":"_4-1-openfeign-整合-sentinel","link":"#_4-1-openfeign-整合-sentinel","children":[]},{"level":3,"title":"4.2 配置线程隔离","slug":"_4-2-配置线程隔离","link":"#_4-2-配置线程隔离","children":[]}]},{"level":2,"title":"5 服务熔断","slug":"_5-服务熔断","link":"#_5-服务熔断","children":[{"level":3,"title":"5.1 编写降级逻辑","slug":"_5-1-编写降级逻辑","link":"#_5-1-编写降级逻辑","children":[]},{"level":3,"title":"5.2 服务熔断","slug":"_5-2-服务熔断","link":"#_5-2-服务熔断","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day05_SP_DT/1-SP_DT.md","git":{"createdTime":1741251281000,"updatedTime":1750319780000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":3}]}}');export{ss as comp,ns as data};
