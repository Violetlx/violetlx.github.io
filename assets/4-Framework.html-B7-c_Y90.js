import{_ as i,c as p,b as t,o}from"./app-DlQzn5rm.js";const s="/assets/image-20230909184631035-DTIh9yH0.png",r="/assets/image-20230909191153444-CVCo3sMF.png",n="/assets/image-20230928164249854-Bz-BiJ-P.png",g="/assets/image-20230829214358403--H3vz5a_.png",e="/assets/image-20230928164650341-DBgTcYKW.png",a="/assets/image-20230928165401961-97m6Xg5c.png",m="/assets/image-20230909194213575-1695891367176-1-CfiVM7Jm.png",c="/assets/image-20230909194231141-1695891380452-3-CtxWCNCU.png",u="/assets/image-20230909194539618-cI30AfU1.png",_="/assets/image-20230909194706043-1695891487647-5-COQL_lHo.png",h="/assets/image-20230909202604286-1695891508995-7-dWGTHiIm.png",k="/assets/image-20230909202744690-1695891579845-9-vkUcSCAe.png",d="/assets/image-20230909202817639-1695891607233-11-DZBsu47o.png",b="/assets/image-20230909202926499-1695891632854-13-64LuqqqB.png",C="/assets/image-20230909203026264-1695891651055-15-BepWonm1.png",B="/assets/image-20230909203057950-1695891692487-20-BBuzh4bJ.png",q="/assets/image-20230909203953273-1695891711027-22-m0GyqdHO.png",S="/assets/image-20230909204602260-BVBVK_kG.png",T="/assets/image-20230909204736225-vUjQiQta.png",M="/assets/image-20230909215122398-CKLHySEP.png",w="/assets/image-20230910162631601-B2RPzwNm.png",D="/assets/image-20230910163150222-Bgzj8ehC.png",F={};function v(f,l){return o(),p("div",null,l[0]||(l[0]=[t('<p><img src="https://artfiles.alphacoders.com/122/thumb-1920-122130.jpg" alt="Download Strelizia (Darling In The FranXX) Zero Two (Darling In The FranXX) Anime Darling In The FranXX Art"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul><li>需求工程</li><li>软件测试</li><li>项目管理</li><li>软件可靠性基础</li></ul></div><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span><strong>概述</strong></span></a></h2><blockquote><p>软件工程：</p><ul><li>软件规格说明：规定软件的功能及运行时的限制</li><li>软件开发</li><li>软件确认：确认开发软件能满足用户需求</li><li>软件演进：软件运行过程中不断改进面子客户新需求</li></ul><p>软件开发周期</p><ul><li>软件定义：可行性研究和详细需求分析过程</li><li>软件开发：软件的设计与实现</li><li>软件运行与维护</li></ul><p>软件文档</p><ul><li>用户文档：描述系统功能和使用方法</li><li>系统文档：系统设计，实现和测试文档</li></ul><p><strong>软件设计活动</strong></p><ol><li>数据设计</li><li>架构设计（体系结构）</li><li>人机界面设计</li><li>过程设计</li></ol><p><strong>能力成熟度模型CMMI</strong></p><ul><li>初始：过程不可预测缺乏控制</li><li>已管理：<strong>过程为项目服务</strong>（需求管理，项目计划，配置管理，过程监督，质量保证，供应商合同管理）</li><li>已定义级：<strong>过程为组织服务</strong>（需求开发，技术解决方案，产品集成，验证，组织级过程定义，集成项目管理，风险管理，集成化团队，决策分析和解决方案制定）</li><li>定量管理：过程已度量和控制</li><li>优化机：组织改革与实施，因果分析与解决方案分析</li></ul><p><strong>软件过程模型</strong></p><ul><li><p><strong>瀑布模型SDLC：</strong></p><blockquote><p>将软件开发分为：可行性分析（计划），需求分析，软件设计（概要，详细设计），编码，测试，运行维护阶段。</p><p><strong>瀑布模型特点：</strong></p><ol><li>等待上一阶产出的结果作为输入</li><li>确保完成本阶段的工作内容</li><li>对该项活动的结果进行评审</li><li>需求明确，有严格时间管控</li></ol></blockquote></li><li><p>**原型化模型：**创建快速原型，能满若干需求，在此基础上进行变更，<strong>最终完全满足用户需求</strong></p><blockquote><p><strong>原型特点：</strong></p><ol><li>对用户的需求动态响应，逐步纳入</li><li>具有最终系统基本特征</li><li>实施可行</li></ol></blockquote></li><li><p>螺旋模型：将原型实现的迭代特征与线性瀑布模型控制和系统化方面结合**（增量发布）**</p><blockquote><p>开发阶段分为：定制计划，<strong>风险分析</strong>，实施工程，客户评估</p></blockquote></li><li><p>增量模型：优先开发核心功能，后面以增量（每个增量是一个完整功能）形式逐步迭代**（不适于模块划分）**</p></li><li><p>喷泉模型：以用户需求为动力，以对象作为驱动（面对对象开发）</p></li><li><p>基于构件CBSD模型：利用预先包装的构件来构造应用系统**（主要增强构建复用性）**</p></li><li><p>**敏捷模型：**用来应付需求快速变化的软件开发方法，<strong>适合小项目迭代</strong></p><blockquote><p>敏捷模式特点：<strong>适应性强，以人为本，迭代增量的方式</strong></p><p><strong>敏捷方法</strong></p><ul><li><p><strong>XP：极限编程</strong>（类似于螺旋式开发模式）</p><p>价值：沟通、简单、反馈、勇气</p><p>改善：加强交流，简单做起，寻求反馈，实事求是</p><p>提倡：测试先行</p></li><li><p>水晶：每一种不同的项目都需要一套不同的策略、约定和方法论</p></li><li><p><strong>Scrum</strong>：核心是迭代、增量交付，按照 30 天进行迭代开发交付可实际运行的软件</p><ol><li>Sprint：短期迭代周期（1到2周完成）</li><li>Backlog：商业价值排序的需求列表（需求/用户故事）</li><li>Sprintbacklog：Backlog中挑选商业价值高的需求通过会议进行讨论，分析，估算产出开发任务列表</li><li>Scrum活动 <ul><li>Sprint Planning（计划会议）：Scrum成员讨论每个事项，并对该事项达成共识</li><li>Daily StandUp（每日站会）：汇报当前完成情况，计划当天工作，及遇到问题</li><li>Spring Review（评审会议）：通过完成情况制定或调整Backlog</li><li>Sprint Retrospective（回顾会议）：探讨当前开发环境有利或不利因素</li></ul></li></ol></li><li><p><strong>FDD特性驱动开发：</strong> 迭代开发模型</p><ul><li>软件开发要素：人，过程，技术</li><li>核心过程：开发整体对象模型，构造特征列表，计划特征开发，特征设计和特征构建</li></ul></li><li><p>开发源码方式：查错排障(debug)的高度并行性，任何人发现了错误都可将改正源码的补丁文件发给维护者</p></li></ul></blockquote></li><li><p><strong>统一过程建模RUP：</strong> 快速有效为开发人员提供指导方针，模版及实例支持</p><blockquote><p>核心工作流程：业务建模，需求，分析设计，实现，测试，部署，配置与变更管理，项目管理，环境</p><p>核心概念：角色，结构师，活动，制品，工作流</p><p><strong>RUP特点</strong></p><ol><li>用例驱动：需求分析，设计，实现和测试活动</li><li>4+1模型的体系中心：逻辑，实现，进程，部署</li><li>迭代增量</li></ol></blockquote></li><li><p><strong>逆向工程</strong></p><blockquote><p><strong>重构：在抽象级别是那个转换系统描述形式（改变抽象实现方式）</strong></p><p>设计恢复：从已有程序抽象出有关数据设计，总体设计结构和过程设计信息</p><p>**再工程：**在逆向工程的基础上，修改或重构已有的系统，生成一个新的版本（抄袭其他工程）</p><p>正向工程：从已有项目质量基础上，修改或重构现有工程</p></blockquote></li></ul><p><strong>传统开发与敏捷开发对比</strong></p><ul><li>敏捷开发优点：拥抱变化，制定并完成短时间的计划。能快速响应市场（快速占领市场，向时间要效益），在资源条件有限下，做最有价值的事</li><li>敏捷开发缺点：项目人数不能太多，不适合大型项目工程，缺少过程资产累积，项目维护成本增加。<strong>并不能带来开发效率提升</strong></li></ul></blockquote><h2 id="需求工程" tabindex="-1"><a class="header-anchor" href="#需求工程"><span><strong>需求工程</strong></span></a></h2><blockquote><p>软件需求是指用户对系统在功能、行为、性能、设计约束等方面的期望。</p><p>需求开发流程：</p><p><img src="'+s+'" alt="image-20230909184631035"></p><p>需求分类： 系统 &gt; 用户 &gt; 功能 &gt; 业务</p><ul><li>业务：企业或客户对系统高层次目标要求</li><li>用户：用户的具体目标，或用户要求系统必须完成的任务</li><li>系统：功能需求、非功能需求和设计约束</li><li>性能</li><li>QFD质量功能部署：用户要求转化成软件需求的技术，其目的是提升软件工程过程中用户的满意度 <ol><li>基本需求：用户认为系统应该做到的功能或性能，实现越多用户会越满意</li><li>期望需求：用户认为系统应具备的功能或性能，但并不能正确描述自己想要得到的这些功能或性能需求。如果期望需求没有得到实现，会让用户感到不满意</li><li>意外需求：用户要求范围外的功能或性能，实现这些需求用户会更高兴</li></ol></li></ul><p>需求获取方法：</p><ol><li>用户访谈（灵活性高，不适合信息量大，记录困难的需求）</li><li>问卷调查</li><li>JRP联合需求计划：联合关键代表通过有组织的会议讨论需求</li><li>情节串联：一系列相关素材描述用户故事</li><li>参与业务实践</li><li>抽样调查</li></ol><p><strong>需求分析</strong>：把杂乱无章的用户需求和期望转为用户需求</p><p><strong>系统设计原则：抽象化，自顶向下，逐步求精，信息屏蔽，模块独立（高内聚，低耦合）</strong></p><p><strong>内聚程度</strong></p><ol><li>偶然：无直接关系</li><li>逻辑：逻辑类似，参数决定（重载）</li><li>时间：同时执行（多个动作组合同时运行形成的功能模块）</li><li>过程：指定过程顺序执行</li><li>通讯：相同数据结构，相同输入输出（处理的元素都在同一数据结构上保存或执行，产生相同结构的数据）</li><li>顺序：顺序执行，输入为输出</li><li>功能：模块中所有元素共同完成一个功能，缺一不可</li></ol><p><strong>耦合程度</strong></p><ol><li>无直接耦合：无直接关系</li><li>数据耦合：存在调用关系（传递数据调用）</li><li>标记耦合：传递数据结构</li><li>控制耦合：控制变量选择性调用模块功能</li><li>外部耦合：模块之间环境联合（相同的协议，数据格式，操作系统，或特定的设备）</li><li>内容耦合：模块内部之间强关联</li></ol><p><strong>结构化分析：自顶向下，逐步分解，面向数据</strong></p><ul><li><p><img src="'+r+'" alt="image-20230909191153444"></p></li><li><p><img src="'+n+'" alt="image-20230928164249854"></p></li><li><p><strong>DFD：图形化系统模型（可视化系统中信息流动的图形方式）</strong></p><p><img src="'+g+'" alt="images/4-Framework/image-20230829214358403.png"></p></li><li><p>数据字典（系统相关的数据元素的一个有组织的列表和精确严格的定义，包含数据名称，内容结构，使用描述）</p><p>{}n：n次重复</p><p>()：可选择的数据项（可以不选）</p><p>[ | ]：或，两者中选其中一个</p><p><strong>加工逻辑：结构化语言，决策树，决策表达方法</strong></p></li><li><p><strong>流程图</strong>：展示应用程序从数据输入开始到获得输出为止的逻辑过程，描述 处理过程的控制流</p><p><img src="'+e+'" alt="image-20230928164650341"></p></li></ul><p><strong>面向对象需求分析</strong></p><ul><li><p>概念</p><ol><li>类：实体类，控制类，边界类（抽象类）</li><li>类关系：继承与泛化，接口，模板，调用，参数传递</li></ol></li><li><p><strong>UML</strong></p><ol><li><p>类图与对象图</p><p><img src="'+a+'" alt="image-20230928165401961"></p></li><li><p>构件图</p><p><img src="'+m+'" alt="image-20230909194213575"></p><p><img src="'+c+'" alt="image-20230909194231141"></p></li><li><p>部署图（拓扑图）：</p><p><img src="'+u+'" alt="images/4-Framework/image-20230909194539618.png"></p></li><li><p>包</p><p><img src="'+_+'" alt="image-20230909194706043"></p></li><li><p><strong>用例图：对系统行为的动态描述（划分系统与外部实体的界限）</strong></p><p><img src="'+h+'" alt="image-20230909202604286"></p><ul><li>包含关系：可以从两个或两个以上的原始用例中提取公共行（抽象用例）</li><li>扩展关系：混合了两种或两种以上的不同场景(拆分一个主用例和一个或多个辅用例)</li></ul></li><li><p><strong>顺序（序列）图</strong>：强调对象之间消息 发送的顺序</p><p><img src="'+k+'" alt="image-20230909202744690"></p></li><li><p>通信图：描述相互合作的对象间的交互关系和链接关系</p><p><img src="'+d+'" alt="image-20230909202817639"></p></li><li><p>状态图：描述不同用例之间的对象行为（通常表示业务流程，控制对象）</p><p><img src="'+b+'" alt="image-20230909202926499"></p></li><li><p><strong>活动图</strong>：强调对象间的控制流程。 类似程序流程图。</p><p><img src="'+C+'" alt="image-20230909203026264"></p></li><li><p>定时图</p></li></ol><p><img src="'+B+'" alt="image-20230909203057950"></p><ol start="11"><li><p>4+1视图模型(非UML特有)</p><p><img src="'+q+'" alt="image-20230909203953273"></p><ul><li><p>逻辑：问题领域问题对象集合</p></li><li><p>进程：活动类的建模，逻辑视图的实例</p></li></ul></li></ol></li></ul><p><strong>用户界面设计</strong></p><ul><li>置用户控制下</li><li>减少用户记忆负担</li><li>保证界面一致</li></ul><p><strong>需求管理</strong></p><ul><li><p>需求状态</p><p><img src="'+S+'" alt="image-20230909204602260"></p><p>风险：</p><ol><li><p>无用户参与</p></li><li><p>忽略用户分类</p></li><li><p>用户需求增加和不确定</p></li><li><p>不必要的特性</p></li><li><p>过于精简SRS</p></li><li><p>不准确的估算</p></li></ol><p>变更：</p><ol><li>外部环境变化</li><li>需求和设计不够完整</li><li>新技术出现</li><li>公司机构重组造成业务流程变化</li></ol><p><strong>CCB变更控制委员会</strong>：对项目变更做出评价，审批，监督，批准</p></li><li><p>需求跟踪</p><p><img src="'+T+'" alt="image-20230909204736225"></p><p>正向跟踪：用户原始需求是否实现</p><p>反向跟踪：软件实现是否都是用户要求的</p></li></ul><p><strong>流程设计</strong></p><p>流程设计工具</p><ul><li>PFD程序流程图</li><li>IPO流程描述工具：描述模块输入，输出，数据加工</li><li>N-S：描述嵌套和层次关系</li><li>PAD问题分析图</li></ul><p><strong>BPR业务流程重组</strong></p><ul><li><strong>对企业的业务流程进行根本性的再思考和彻底的再设计</strong>，从而获得成本，质量，服务和速度上<strong>带来的业绩显著提升</strong></li></ul><p><strong>BPM业务流程管理</strong></p><ul><li>以规范化业务流程为中心，提供组织业务绩效为目的（规范流程，优化流程，再造流程）</li></ul></blockquote><h2 id="软件测试" tabindex="-1"><a class="header-anchor" href="#软件测试"><span><strong>软件测试</strong></span></a></h2><blockquote><p><strong>测试原则</strong></p><ol><li>应尽早并不断地进行测试</li><li>程序员避免测试自己设计的程序（除单元测试外）</li><li>包含合理，不合理输入条件</li><li>检测是否做了不该做的事</li><li>修改后进行回归测试</li><li>重视测试中的群集现象</li><li>所有的测试都应追溯到用户需求</li><li>穷举测试是不可能的</li><li>严格按照测试计划来进行，避免随意性</li><li>妥善保存测试计划、测试用例、作为软件</li></ol><p><strong>测试方法</strong></p><ul><li>静态测试：不在机器上运行，采用人工检测和计算机辅助静态分析手段 <ol><li>代码走查</li><li>代码评审</li><li>桌前检查</li></ol></li><li>动态测试：实际运行程序进程测试 <ul><li>白盒测试：结构性测试，明确代码流程，根据代码逻辑设计用例，进行用例覆盖</li><li>黑盒测试：功能测试</li></ul></li></ul><p><strong>测试阶段和分类</strong></p><p><img src="'+M+'" alt="image-20230909215122398"></p><ul><li><strong>冒烟测试</strong>：转测前选择一部分基础测试用例进行验证，确保全流程没有严重，阻塞性问题</li><li>单元测试：最小的软件模块进行测试（由开发人员执行）</li><li><strong>集成测试</strong>：验证组成软件系统的各模块的接口和交换作用**（依据软件概要设计文档）** <ul><li>一次性组装：所有模块组装起来进行测试</li><li>自顶向下/上增值组装</li><li>混合增值</li></ul></li><li>**确认测试：**验证软件是否符合用户需求，采用黑盒测试方法（从用户角度针对产品特定的功能和特性进行验证活动） <ul><li><strong>验收测试：产品上线最后一项测试</strong>，包含文档资料的审查验收、软件系统的功能测试、性能测试、强化测试、性能降级执行方式测试、检查系统的余量要求、安装测试以及用户操作测试</li><li>a与b测试 <ul><li>Alpha测试：内用人员模拟实际操作环境测试，检测软件功能、可使用性、可靠性、性能和支持，<strong>注重产品界面和特色</strong>。</li><li>Beta测试：用户在实际环境下进行测试</li></ul></li><li>回归测试：测试软件变更后，对变更的内容进行测试</li></ul></li><li><strong>系统测试</strong>：<strong>在真实环境下验证软件配置项能否和系统正确连接，保证软件能在系统上可靠运行</strong>（包含功能，性能，恢复。安全，强度测试）</li><li><strong>回归测试：</strong> 软件变更之后，变更部分的正确性和对需求变更符合性，与之相关联的功能进行重新测试</li></ul><p><strong>测试方法</strong></p><ul><li>白盒测试（结构性测试）：根据内部结构和逻辑来设计测试用例，对程序路径和过程进行测试 <ol><li>SC语句覆盖：确保被测试程序中每条语句至少执行一次</li><li>DC判定覆盖：分支覆盖，确保每个判断至少执行一次</li><li>CC条件判断：确保每个逻辑判断至少执行一次</li><li>CDC：条件判定组合覆盖</li><li>MCC：多条件覆盖</li><li>MCDC：修正判定条件覆盖，每一程序模块的入口和出口点都要考虑至少被调用一次</li><li>路径覆盖：被测试程序中的所有可能路径至少被执行一次</li></ol></li><li>黑盒测试（功能测试）：基于产品功能规格说明书，从用户角度针对产品特定的功能和特性进行测试 <ol><li><strong>等价类划分</strong>：对每一个输入条件划分为有效范围和无效范围，测试用例确保覆盖每一个有效/无效等价范围</li><li><strong>边界值分析</strong>：对等价分类的边界参数进行测试</li><li><strong>因果图与判定表（组合关系图）</strong> ：根据输入条件的等价类组合关系，写出判定表。 <ul><li>输入条件约束：E（互斥），I（包含），O（唯一），R（要求），M（强制屏蔽）。</li><li>输入与输出依赖关系：恒等，非，或，与</li></ul></li><li><strong>错误推测</strong>：根据经验或直觉推测程序中可能存在的各种错误</li><li>判断驱动</li><li>正交试验</li><li>功能图法</li></ol></li><li><strong>静态测试：不运行软件进行测试（采用人工检测，计算机辅助分析检测）</strong><ol><li>桌前检测：对源程序代码进行分析和检验，补充相关文档（包含变量交叉引用检测，常量检测，代码规范，逻辑判断）</li><li>代码审查：将设计规格书，控制流程图，程序规范作为评审依据提交给审查人员，由开发人员逐句讲解程序逻辑，审查任意可以提出问题展开讨论是否存在错误。</li></ol></li></ul><p><strong>调试</strong></p><ul><li>原始类：通过计算机找错，凭借大量的现场信息，从中找到出错误的线索</li><li>回溯类：地用于程序的排错，人工 地沿控制流程往回追踪，直至发现出错的根源</li><li>排除类：先分析与错误出 现有关的所有数据</li></ul><p><strong>软件度量</strong></p><ul><li>McCabe：有向边数为m，节点数为n，则有向图复杂度为 m-n + 2</li><li>针对流程图：每一个分支边就是有向边，每一条语句就是顶点</li></ul></blockquote><h2 id="项目管理" tabindex="-1"><a class="header-anchor" href="#项目管理"><span><strong>项目管理</strong></span></a></h2><blockquote><p><strong>进度管理：</strong></p><ul><li>活动定义：确定完成项目各项可交付成果展开的活动</li><li>活动排序：识别和记录各项活动之间先后关系和逻辑</li><li>资源估算：完成活动所需要的资源类型和效益</li><li>历时估算</li><li>进度计划编制</li><li><strong>进度控制</strong><ul><li>WBS：工作分解结构 <ol><li>WBS工作包可控，可管理，不能过于复杂</li><li>WBS树形结构不超过6层</li><li>每个工作包需要有交付成果</li><li>每个任务必须有明确定义完成标准</li><li>WBS有利于责任分配</li></ol></li></ul></li></ul><p>进度安排：甘特图</p><p><img src="'+w+'" alt="image-20230910162631601"></p><p><strong>关键路径法</strong>：推算项目最短工期</p><ul><li><p><img src="'+D+'" alt="image-20230910163150222"></p></li><li><p>顺推：最早开始时间等于前一个活动最早完成时间，最早完成时间 = 最早开始时间+持续时间</p></li><li><p>逆推：最晚完成时间等于后续活动最晚开始时间的最小值，最晚开始时间 = 最晚完成时间 - 持续时间</p><p><strong>项目配置管理：</strong></p></li><li><p>项目配置包含：软件产品和数据，用于创建或支持软件产品的工具，供应商提供的软件硬件设备，项目计划书，需求文档，设计文档，源代码，可执行代码，测试用例，运行软件所需数据</p></li><li><p>配置项目权限：由CMO（配置管理员）严格管控，允许基线配置项向开发人员开放读取权限，非基线配置项PM，CCB相关人员开放</p><ul><li>基线配置：设计文档，源程序</li></ul></li><li><p>非基线配置：项目计划，项目报告</p></li><li><p>配置项状态：草稿，正式，修改状态（需要通过评审）</p><p><strong>质量管理：</strong></p></li><li><p>质量规划：识别产品的质量要求和标准，并以书面描述项目如何达到这些要求</p></li><li><p>质量保证：每个一段时间对系统进行审查和过程分析确保项目质量</p></li><li><p>质量控制：实时监测项目的具体结果</p></li><li><p>**软件质量保证SQA：**确保一开始就避免缺陷产生，SQA审计，SQA报告，缺陷处理</p><ol><li>事前预防</li><li>引入缺陷时将其捕获</li><li>作用域过程而不是最终产品</li><li>贯彻所有活动</li></ol></li></ul><p>**风险管控：**避开不利条件，减少损失，取得预计结果并实现项目目标</p><ul><li><p>风险识别：确定风险来源，产生条件，描述风险特征</p></li><li><p>风险定性：确定风险可能性，优先级，风险类型</p></li><li><p>风险定量分析：使用图表模型进一步分析风险（灵敏度分析，期望货币值分析，决策树，蒙特卡罗模拟）</p></li><li><p>应对计划：避免，转移策略，减轻策略</p></li><li><p>风险分类：</p><ol><li><p>项目：预算，进度，投入资源，用户需求带来对项目的影响</p></li><li><p>技术：设计，实现，接口，测试和维护对项目影响</p></li><li><p>商业</p><ul><li>市场：不是市场真正所所需要的（没市场）</li><li>策略：开发系统不符合企业信息系统战略</li><li>销售：销售部门无法向市场推销系统</li><li>管理：重点人员转移，失去上级部门支持</li><li>预算：开发过程中预算无法保证</li></ul></li></ol></li></ul></blockquote><h2 id="软件可靠性基础" tabindex="-1"><a class="header-anchor" href="#软件可靠性基础"><span><strong>软件可靠性基础</strong></span></a></h2><blockquote><p><strong>在规定的条件下和规定的时间区间完成功能的能力</strong></p><p>软件可靠性与硬件可靠性对比</p><ol><li>复杂性：软件复杂性比硬件高（大部份失效来自于软件）</li><li>物理退化：硬件特有</li><li>唯一性：软件唯一性</li><li>版本周期</li></ol><p><strong>软件定量描述</strong></p><ul><li>规定时间：执行，运行时间</li><li>失效概率：运行初始为0，逐步递增趋向为1</li><li>失效强度</li><li>平均失效时间MTTF</li><li>平均恢复前时间MTTR</li><li>平均故障间隔时间MTBF = MTTF + MTTR</li><li>系统可用性 MTTF / （MTTF + MTTR）</li></ul><p><strong>软件可靠性设计</strong>：满足软件质量要求下，以提高和保障软件可靠性为最终目标</p><ul><li><strong>容错设计</strong><ol><li>冗余：在正常系统运行所需基础上在加一定数量资源（冗余是容错的技术基础）</li><li>恢复块技术：主动冗余（热备份，冷备份）</li></ol></li><li><strong>检错设计</strong></li><li><strong>降低复杂度设计</strong></li></ul></blockquote>',12)]))}const P=i(F,[["render",v]]),R=JSON.parse('{"path":"/docs/Computer/Computer/6_Framework/4-Framework.html","title":"软件工程","lang":"en-US","frontmatter":{"title":"软件工程","date":"2025/07/04"},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"需求工程","slug":"需求工程","link":"#需求工程","children":[]},{"level":2,"title":"软件测试","slug":"软件测试","link":"#软件测试","children":[]},{"level":2,"title":"项目管理","slug":"项目管理","link":"#项目管理","children":[]},{"level":2,"title":"软件可靠性基础","slug":"软件可靠性基础","link":"#软件可靠性基础","children":[]}],"filePathRelative":"docs/Computer/Computer/6_Framework/4-Framework.md","git":{"createdTime":1751621258000,"updatedTime":1751621258000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{P as comp,R as data};
