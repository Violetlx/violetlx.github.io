import{_ as n,c as a,b as t,o as e}from"./app-CezBFXHK.js";const p={};function l(i,s){return e(),a("div",null,s[0]||(s[0]=[t(`<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/kitten-3840x2160-adorable-cute-minimalist-sweet-26378.jpg" alt="小猫 可爱的 可爱的 极简主义者 简单的 纯色 愉快"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 Mapping 映射属性</p><p>2 索引库的 CRUD</p></div><p>Index就类似数据库表，Mapping映射就类似表的结构。我们要向es中存储数据，必须先创建Index和Mapping</p><h2 id="_1-mapping-映射属性" tabindex="-1"><a class="header-anchor" href="#_1-mapping-映射属性"><span>1 Mapping 映射属性</span></a></h2><p>Mapping是对索引库中文档的约束，常见的Mapping属性包括：</p><ul><li><code>type</code>：字段数据类型，常见的简单类型有： <ul><li>字符串：<code>text</code>（可分词的文本）、<code>keyword</code>（精确值，例如：品牌、国家、ip地址）</li><li>数值：<code>long</code>、<code>integer</code>、<code>short</code>、<code>byte</code>、<code>double</code>、<code>float</code>、</li><li>布尔：<code>boolean</code></li><li>日期：<code>date</code></li><li>对象：<code>object</code></li></ul></li><li><code>index</code>：是否创建索引，默认为<code>true</code></li><li><code>analyzer</code>：使用哪种分词器</li><li><code>properties</code>：该字段的子字段</li></ul><p>例如下面的json文档：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">52.1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;isMarried&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑马程序员Java讲师&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zy@itcast.cn&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">99.1</span><span class="token punctuation">,</span> <span class="token number">99.5</span><span class="token punctuation">,</span> <span class="token number">98.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;云&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;赵&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的每个字段映射（Mapping）：</p><table><thead><tr><th style="text-align:left;"><strong>字段名</strong></th><th style="text-align:left;"><strong>字段类型</strong></th><th style="text-align:left;"><strong>类型说明</strong></th><th style="text-align:left;"><strong>是否****参与搜索</strong></th><th style="text-align:left;"><strong>是否****参与分词</strong></th><th style="text-align:left;"><strong>分词器</strong></th><th></th></tr></thead><tbody><tr><td style="text-align:left;">age</td><td style="text-align:left;"><code>integer</code></td><td style="text-align:left;">整数</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">——</td><td></td></tr><tr><td style="text-align:left;">weight</td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">浮点数</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">——</td><td></td></tr><tr><td style="text-align:left;">isMarried</td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">布尔</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">——</td><td></td></tr><tr><td style="text-align:left;">info</td><td style="text-align:left;"><code>text</code></td><td style="text-align:left;">字符串，但需要分词</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">IK</td><td></td></tr><tr><td style="text-align:left;">email</td><td style="text-align:left;"><code>keyword</code></td><td style="text-align:left;">字符串，但是不分词</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">——</td><td></td></tr><tr><td style="text-align:left;">score</td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">只看数组中元素类型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">——</td><td></td></tr><tr><td style="text-align:left;">name</td><td style="text-align:left;">firstName</td><td style="text-align:left;"><code>keyword</code></td><td style="text-align:left;">字符串，但是不分词</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td>——</td></tr><tr><td style="text-align:left;">lastName</td><td style="text-align:left;"><code>keyword</code></td><td style="text-align:left;">字符串，但是不分词</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">——</td><td></td></tr></tbody></table><h2 id="_2-索引库的-crud" tabindex="-1"><a class="header-anchor" href="#_2-索引库的-crud"><span>2 索引库的 CRUD</span></a></h2><p>由于Elasticsearch采用的是Restful风格的API，因此其请求方式和路径相对都比较规范，而且请求参数也都采用JSON风格。</p><p>我们直接基于Kibana的DevTools来编写请求做测试，由于有语法提示，会非常方便。</p><h3 id="_2-1-创建索引库和映射" tabindex="-1"><a class="header-anchor" href="#_2-1-创建索引库和映射"><span>2.1 创建索引库和映射</span></a></h3><p><strong>基本语法</strong>：</p><ul><li>请求方式：<code>PUT</code></li><li>请求路径：<code>/索引库名</code>，可以自定义</li><li>请求参数：<code>mapping</code>映射</li></ul><p><strong>格式</strong>：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /索引库名称</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;字段名&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;字段名2&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;false&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;字段名3&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;子字段&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// ...略</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"># PUT /heima</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_smart&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;false&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-查询索引库" tabindex="-1"><a class="header-anchor" href="#_2-2-查询索引库"><span>2.2 查询索引库</span></a></h3><p><strong>基本语法</strong>：</p><ul><li>请求方式：GET</li><li>请求路径：/索引库名</li><li>请求参数：无</li></ul><p><strong>格式</strong>：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token constant">GET</span> <span class="token operator">/</span>索引库名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token constant">GET</span> <span class="token operator">/</span>heima</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-3-修改索引库" tabindex="-1"><a class="header-anchor" href="#_2-3-修改索引库"><span>2.3 修改索引库</span></a></h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong>。</p><p>虽然无法修改mapping中已有的字段，但是却允许添加新的字段到mapping中，因为不会对倒排索引产生影响。因此修改索引库能做的就是向索引库中添加新字段，或者更新索引库的基础属性。</p><p><strong>语法说明</strong>：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /索引库名/_mapping</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;新字段名&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /heima/_mapping</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-删除索引库" tabindex="-1"><a class="header-anchor" href="#_2-4-删除索引库"><span>2.4 删除索引库</span></a></h3><p><strong>语法：</strong></p><ul><li>请求方式：DELETE</li><li>请求路径：/索引库名</li><li>请求参数：无</li></ul><p><strong>格式：</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token constant">DELETE</span> <span class="token operator">/</span>索引库名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token constant">DELETE</span> <span class="token operator">/</span>heima</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-5-总结" tabindex="-1"><a class="header-anchor" href="#_2-5-总结"><span>2.5 总结</span></a></h3><p>索引库操作有哪些？</p><ul><li>创建索引库：PUT /索引库名</li><li>查询索引库：GET /索引库名</li><li>删除索引库：DELETE /索引库名</li><li>修改索引库，添加字段：PUT /索引库名/_mapping</li></ul><p>可以看到，对索引库的操作基本遵循的Restful的风格，因此API接口非常统一，方便记忆。</p>`,45)]))}const c=n(p,[["render",l]]),r=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day08_Elasticsearch/2-Elasticsearch.html","title":"索引库操作","lang":"en-US","frontmatter":{"title":"索引库操作","date":"2025/03/06"},"headers":[{"level":2,"title":"1 Mapping 映射属性","slug":"_1-mapping-映射属性","link":"#_1-mapping-映射属性","children":[]},{"level":2,"title":"2 索引库的 CRUD","slug":"_2-索引库的-crud","link":"#_2-索引库的-crud","children":[{"level":3,"title":"2.1 创建索引库和映射","slug":"_2-1-创建索引库和映射","link":"#_2-1-创建索引库和映射","children":[]},{"level":3,"title":"2.2 查询索引库","slug":"_2-2-查询索引库","link":"#_2-2-查询索引库","children":[]},{"level":3,"title":"2.3 修改索引库","slug":"_2-3-修改索引库","link":"#_2-3-修改索引库","children":[]},{"level":3,"title":"2.4 删除索引库","slug":"_2-4-删除索引库","link":"#_2-4-删除索引库","children":[]},{"level":3,"title":"2.5 总结","slug":"_2-5-总结","link":"#_2-5-总结","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day08_Elasticsearch/2-Elasticsearch.md","git":{"createdTime":1741251281000,"updatedTime":1750752221000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{c as comp,r as data};
