import{_ as e,c as a,b as n,o as i}from"./app-C7pp65Rl.js";const l="/assets/image-20210725144536958-DOsiPZ3w.png",p="/assets/image-20210725144725943-BmxXt6w6.png",t="/assets/image-20210725151319695-BegqYiV-.png",r="/assets/image-20210725151543640-D8xmodPU.png",d="/assets/image-20210725151654046-Gqy3wsXu.png",c="/assets/image-20210725151729118-Cj7DxPnJ.png",o="/assets/image-20210725151940515-D66ZmTay.png",m={};function v(u,s){return i(),a("div",null,s[0]||(s[0]=[n('<p><img src="https://bizhi1.com/wp-content/uploads/2024/09/cyndaquil-pokemon-explosion-desktop-wallpaper-4k-small.jpg" alt="火球鼠口袋妖怪爆炸桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① RDB持久化</p><p>② AOF持久化</p><p>③ RDB与AOF对比</p></div><h2 id="_1-rdb持久化" tabindex="-1"><a class="header-anchor" href="#_1-rdb持久化"><span>① RDB持久化</span></a></h2><p>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。</p><h3 id="_1-1-执行时机" tabindex="-1"><a class="header-anchor" href="#_1-1-执行时机"><span>1.1.执行时机</span></a></h3><p>RDB持久化在四种情况下会执行：</p><ul><li>执行save命令</li><li>执行bgsave命令</li><li>Redis停机时</li><li>触发RDB条件时</li></ul><p><strong>1）save命令</strong></p><p>执行下面的命令，可以立即执行一次RDB：</p><p><img src="'+l+'" alt="image-20210725144536958"></p><p>save命令会导致主进程执行RDB，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。</p><p><strong>2）bgsave命令</strong></p><p>下面的命令可以异步执行RDB：</p><p><img src="'+p+`" alt="image-20210725144725943"></p><p>这个命令执行后会开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响。</p><p><strong>3）停机时</strong></p><p>Redis停机时会执行一次save命令，实现RDB持久化。</p><p><strong>4）触发RDB条件</strong></p><p>Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span></span>
<span class="line"><span class="token key attr-name">save</span> <span class="token value attr-value">900 1  </span></span>
<span class="line"><span class="token key attr-name">save</span> <span class="token value attr-value">300 10  </span></span>
<span class="line"><span class="token key attr-name">save</span> <span class="token value attr-value">60 10000 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RDB的其它配置也可以在redis.conf文件中设置：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span></span>
<span class="line"><span class="token key attr-name">rdbcompression</span> <span class="token value attr-value">yes</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># RDB文件名称</span></span>
<span class="line"><span class="token key attr-name">dbfilename</span> <span class="token value attr-value">dump.rdb  </span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 文件保存的路径目录</span></span>
<span class="line"><span class="token key attr-name">dir</span> <span class="token value attr-value">./ </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-rdb原理" tabindex="-1"><a class="header-anchor" href="#_1-2-rdb原理"><span>1.2.RDB原理</span></a></h3><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。</p><p>fork采用的是copy-on-write技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li></ul><p><img src="`+t+'" alt="image-20210725151319695"></p><h3 id="_1-3-小结" tabindex="-1"><a class="header-anchor" href="#_1-3-小结"><span>1.3.小结</span></a></h3><p>RDB方式bgsave的基本流程？</p><ul><li>fork主进程得到一个子进程，共享内存空间</li><li>子进程读取内存数据并写入新的RDB文件</li><li>用新RDB文件替换旧的RDB文件</li></ul><p>RDB会在什么时候执行？save 60 1000代表什么含义？</p><ul><li>默认是服务停止时</li><li>代表60秒内至少执行1000次修改则触发RDB</li></ul><p>RDB的缺点？</p><ul><li>RDB执行间隔时间长，两次RDB之间写入数据有丢失的风险</li><li>fork子进程、压缩、写出RDB文件都比较耗时</li></ul><h2 id="_2-aof持久化" tabindex="-1"><a class="header-anchor" href="#_2-aof持久化"><span>② AOF持久化</span></a></h2><h3 id="_2-1-aof原理" tabindex="-1"><a class="header-anchor" href="#_2-1-aof原理"><span>2.1.AOF原理</span></a></h3><p>AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p><p><img src="'+r+`" alt="image-20210725151543640"></p><h3 id="_2-2-aof配置" tabindex="-1"><a class="header-anchor" href="#_2-2-aof配置"><span>2.2.AOF配置</span></a></h3><p>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 是否开启AOF功能，默认是no</span></span>
<span class="line"><span class="token key attr-name">appendonly</span> <span class="token value attr-value">yes</span></span>
<span class="line"><span class="token comment"># AOF文件的名称</span></span>
<span class="line"><span class="token key attr-name">appendfilename</span> <span class="token value attr-value">&quot;appendonly.aof&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AOF的命令记录的频率也可以通过redis.conf文件来配：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 表示每执行一次写命令，立即记录到AOF文件</span></span>
<span class="line"><span class="token key attr-name">appendfsync</span> <span class="token value attr-value">always </span></span>
<span class="line"><span class="token comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span>
<span class="line"><span class="token key attr-name">appendfsync</span> <span class="token value attr-value">everysec </span></span>
<span class="line"><span class="token comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span>
<span class="line"><span class="token key attr-name">appendfsync</span> <span class="token value attr-value">no</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三种策略对比：</p><p><img src="`+d+'" alt="image-20210725151654046"></p><h3 id="_2-3-aof文件重写" tabindex="-1"><a class="header-anchor" href="#_2-3-aof文件重写"><span>2.3.AOF文件重写</span></a></h3><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="'+c+`" alt="image-20210725151729118"></p><p>如图，AOF原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对num的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，AOF文件内容就是：<code>mset name jack num 666</code></p><p>Redis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span></span>
<span class="line"><span class="token key attr-name">auto-aof-rewrite-percentage</span> <span class="token value attr-value">100</span></span>
<span class="line"><span class="token comment"># AOF文件体积最小多大以上才触发重写 </span></span>
<span class="line"><span class="token key attr-name">auto-aof-rewrite-min-size</span> <span class="token value attr-value">64mb </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-rdb与aof对比" tabindex="-1"><a class="header-anchor" href="#_3-rdb与aof对比"><span>③ RDB与AOF对比</span></a></h2><p>RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p><p><img src="`+o+'" alt="image-20210725151940515"></p>',55)]))}const g=e(m,[["render",v]]),b=JSON.parse('{"path":"/docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/1_Redis_Advanced_Distributed/2-Redis_Advanced_Distributed.html","title":"Redis持久化","lang":"en-US","frontmatter":{"title":"Redis持久化","date":"2025/06/19"},"headers":[{"level":2,"title":"① RDB持久化","slug":"_1-rdb持久化","link":"#_1-rdb持久化","children":[{"level":3,"title":"1.1.执行时机","slug":"_1-1-执行时机","link":"#_1-1-执行时机","children":[]},{"level":3,"title":"1.2.RDB原理","slug":"_1-2-rdb原理","link":"#_1-2-rdb原理","children":[]},{"level":3,"title":"1.3.小结","slug":"_1-3-小结","link":"#_1-3-小结","children":[]}]},{"level":2,"title":"② AOF持久化","slug":"_2-aof持久化","link":"#_2-aof持久化","children":[{"level":3,"title":"2.1.AOF原理","slug":"_2-1-aof原理","link":"#_2-1-aof原理","children":[]},{"level":3,"title":"2.2.AOF配置","slug":"_2-2-aof配置","link":"#_2-2-aof配置","children":[]},{"level":3,"title":"2.3.AOF文件重写","slug":"_2-3-aof文件重写","link":"#_2-3-aof文件重写","children":[]}]},{"level":2,"title":"③ RDB与AOF对比","slug":"_3-rdb与aof对比","link":"#_3-rdb与aof对比","children":[]}],"filePathRelative":"docs/Middleware/Redis/Redis_Heima/3_Redis_Advanced/1_Redis_Advanced_Distributed/2-Redis_Advanced_Distributed.md","git":{"createdTime":1750319780000,"updatedTime":1750319780000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{g as comp,b as data};
