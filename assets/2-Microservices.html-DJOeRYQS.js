import{_ as r,c as s,b as n,a as e,d as l,e as o,r as p,o as a}from"./app-DJjQCWUF.js";const g="/assets/image-20250310143940577-B1UMuWm_.png",d="/assets/image-20250310144037011-DrVSKEVt.png",u="/assets/image-20250310144049473-BxuRlj5b.png",m="/assets/image-20250310144055236-lyoyyu2Z.png",c="/assets/image-20250310144111400-hQJJG7LD.png",h="/assets/image-20250310144157224-CePPwAwV.png",x="/assets/image-20250310150956769-CdUOaian.png",f="/assets/image-20250310151042029-BeaAkNP4.png",k="/assets/image-20250310151055987-BPjOqcPw.png",b={},S={href:"https://spring.io/projects/spring-cloud#overview",target:"_blank",rel:"noopener noreferrer"},_={style:{"text-align":"left"}},v={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},w={style:{"text-align":"left"}},C={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},y={style:{"text-align":"left"}},N={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"left"}},B={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes",target:"_blank",rel:"noopener noreferrer"},J={style:{"text-align":"left"}},R={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes",target:"_blank",rel:"noopener noreferrer"},j={style:{"text-align":"left"}},A={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes",target:"_blank",rel:"noopener noreferrer"},D={style:{"text-align":"left"}},P={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"left"}},E={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes",target:"_blank",rel:"noopener noreferrer"};function H(T,t){const i=p("ExternalLinkIcon");return a(),s("div",null,[t[21]||(t[21]=n('<p><img src="https://bizhi1.com/wp-content/uploads/2025/01/pokemon-ash-pikachu-charmander-squirtle-desktop-wallpaper.jpg" alt="宠物小精灵 ASH 皮卡丘 小火龙 杰尼龟 桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 单体架构</p><p>2 微服务</p><p>3 SpringCloud</p></div><p>这一章我们从单体架构的优缺点来分析，看看开发大型项目采用单体架构存在哪些问题，而微服务架构又是如何解决这些问题的。</p><h2 id="_1-单体架构" tabindex="-1"><a class="header-anchor" href="#_1-单体架构"><span>1 单体架构</span></a></h2><p>单体架构（monolithic structure）：顾名思义，整个项目中所有功能模块都在一个工程中开发；项目部署时需要对所有模块一起编译、打包；项目的架构设计、开发模式都非常简单。</p><p><img src="'+g+'" alt="image-20250310143940577"></p><p>当项目规模较小时，这种模式上手快，部署、运维也都很方便，因此早期很多小型项目都采用这种模式。</p><p>但随着项目的业务规模越来越大，团队开发人员也不断增加，单体架构就呈现出越来越多的问题：</p><ul><li><strong>团队协作成本高</strong>：试想一下，你们团队数十个人同时协作开发同一个项目，由于所有模块都在一个项目中，不同模块的代码之间物理边界越来越模糊。最终要把功能合并到一个分支，你绝对会陷入到解决冲突的泥潭之中。</li><li><strong>系统发布效率低</strong>：任何模块变更都需要发布整个系统，而系统发布过程中需要多个模块之间制约较多，需要对比各种文件，任何一处出现问题都会导致发布失败，往往一次发布需要数十分钟甚至数小时。</li><li><strong>系统可用性差</strong>：单体架构各个功能模块是作为一个服务部署，相互之间会互相影响，一些热点功能会耗尽系统资源，导致其它服务低可用。</li></ul><p>在上述问题中，前两点相信大家在实战过程中应该深有体会。对于第三点系统可用性问题，很多同学可能感触不深。接下来我们就通过黑马商城这个项目，给大家做一个简单演示。</p><p>首先，我们修改hm-service模块下的<code>com.hmall.controller.HelloController</code>中的<code>hello</code>方法，模拟方法执行时的耗时：</p><p><img src="'+d+'" alt="image-20250310144037011"></p><p>接下来，启动项目，目前有两个接口是无需登录即可访问的：</p><ul><li><code>http://localhost:8080/hi</code></li><li><code>http://localhost:8080/search/list</code></li></ul><p>经过测试，目前<code>/search/list</code> 是比较正常的，访问耗时在30毫秒左右。</p><p>接下来，我们假设<code>/hi</code>这个接口是一个并发较高的热点接口，我们通过Jemeter来模拟500个用户不停访问。在课前资料中已经提供了Jemeter的测试脚本：</p><p><img src="'+u+'" alt="image-20250310144049473"></p><p>导入Jemeter并测试：</p><p><img src="'+m+'" alt="image-20250310144055236"></p><p>这个脚本会开启500个线程并发请求<code>http://localhost/hi</code>这个接口。由于该接口存在执行耗时（500毫秒），这就服务端导致每秒能处理的请求数量有限，最终会有越来越多请求积压，直至Tomcat资源耗尽。这样，其它本来正常的接口（例如<code>/search/list</code>）也都会被拖慢，甚至因超时而无法访问了。</p><p>我们测试一下，启动测试脚本，然后在浏览器访问<code>http://localhost:8080/search/list</code>这个接口，会发现响应速度非常慢：</p><p><img src="'+c+'" alt="image-20250310144111400"></p><p>如果进一步提高<code>/hi</code>这个接口的并发，最终会发现<code>/search/list</code>接口的请求响应速度会越来越慢。</p><p>可见，单体架构的可用性是比较差的，功能之间相互影响比较大。</p><p>当然，有同学会说我们可以做水平扩展。</p><p>此时如果我们对系统做水平扩展，增加更多机器，资源还是会被这样的热点接口占用，从而影响到其它接口，并不能从根本上解决问题。这也就是单体架构的扩展性差的一个原因。</p><p>而要想解决这些问题，就需要使用微服务架构了。</p><h2 id="_2-微服务" tabindex="-1"><a class="header-anchor" href="#_2-微服务"><span>2 微服务</span></a></h2><p>微服务架构，首先是服务化，就是将单体架构中的功能模块从单体应用中拆分出来，独立部署为多个服务。同时要满足下面的一些特点：</p><ul><li><strong>单一职责</strong>：一个微服务负责一部分业务功能，并且其核心数据不依赖于其它模块。</li><li><strong>团队自治</strong>：每个微服务都有自己独立的开发、测试、发布、运维人员，团队人员规模不超过10人（2张披萨能喂饱）</li><li><strong>服务自治</strong>：每个微服务都独立打包部署，访问自己独立的数据库。并且要做好服务隔离，避免对其它服务产生影响</li></ul><p>例如，黑马商城项目，我们就可以把商品、用户、购物车、交易等模块拆分，交给不同的团队去开发，并独立部署：</p><p><img src="'+h+'" alt="image-20250310144157224"></p><p>那么，单体架构存在的问题有没有解决呢？</p><ul><li>团队协作成本高？ <ul><li>由于服务拆分，每个服务代码量大大减少，参与开发的后台人员在1~3名，协作成本大大降低</li></ul></li><li>系统发布效率低？ <ul><li>每个服务都是独立部署，当有某个服务有代码变更时，只需要打包部署该服务即可</li></ul></li><li>系统可用性差？ <ul><li>每个服务独立部署，并且做好服务隔离，使用自己的服务器资源，不会影响到其它服务。</li></ul></li></ul><p>综上所述，微服务架构解决了单体架构存在的问题，特别适合大型互联网项目的开发，因此被各大互联网公司普遍采用。大家以前可能听说过分布式架构，分布式就是服务拆分的过程，其实微服务架构正式分布式架构的一种最佳实践的方案。</p><p>当然，微服务架构虽然能解决单体架构的各种问题，但在拆分的过程中，还会面临很多其它问题。比如：</p><ul><li>如果出现跨服务的业务该如何处理？</li><li>页面请求到底该访问哪个服务？</li><li>如何实现各个服务之间的服务隔离？</li></ul><p>这些问题，我们在后续的学习中会给大家逐一解答。</p><h2 id="_3-springcloud" tabindex="-1"><a class="header-anchor" href="#_3-springcloud"><span>3 SpringCloud</span></a></h2><p>微服务拆分以后碰到的各种问题都有对应的解决方案和微服务组件，而SpringCloud框架可以说是目前Java领域最全面的微服务组件的集合了。</p><p><img src="'+x+'" alt="image-20250310150956769"></p><p>而且SpringCloud依托于SpringBoot的自动装配能力，大大降低了其项目搭建、组件使用的成本。对于没有自研微服务组件能力的中小型企业，使用SpringCloud全家桶来实现微服务开发可以说是最合适的选择了！</p>',42)),e("p",null,[e("a",S,[t[0]||(t[0]=l("https://spring.io/projects/spring-cloud#overview")),o(i)])]),t[22]||(t[22]=e("p",null,[l("目前SpringCloud最新版本为"),e("code",null,"2022.0.x"),l("版本，对应的SpringBoot版本为"),e("code",null,"3.x"),l("版本，但它们全部依赖于JDK17，目前在企业中使用相对较少。")],-1)),e("table",null,[t[20]||(t[20]=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},[e("strong",null,"SpringCloud版本")]),e("th",{style:{"text-align":"left"}},[e("strong",null,"SpringBoot版本")])])],-1)),e("tbody",null,[e("tr",null,[e("td",_,[e("a",v,[t[1]||(t[1]=l("2022.0.x")),o(i)]),t[2]||(t[2]=l(" aka Kilburn"))]),t[3]||(t[3]=e("td",{style:{"text-align":"left"}},"3.0.x",-1))]),e("tr",null,[e("td",w,[e("a",C,[t[4]||(t[4]=l("2021.0.x")),o(i)]),t[5]||(t[5]=l(" aka Jubilee"))]),t[6]||(t[6]=e("td",{style:{"text-align":"left"}},"2.6.x, 2.7.x (Starting with 2021.0.3)",-1))]),e("tr",null,[e("td",y,[e("a",N,[t[7]||(t[7]=l("2020.0.x")),o(i)]),t[8]||(t[8]=l(" aka Ilford"))]),t[9]||(t[9]=e("td",{style:{"text-align":"left"}},"2.4.x, 2.5.x (Starting with 2020.0.3)",-1))]),e("tr",null,[e("td",M,[e("a",B,[t[10]||(t[10]=l("Hoxton")),o(i)])]),t[11]||(t[11]=e("td",{style:{"text-align":"left"}},"2.2.x, 2.3.x (Starting with SR5)",-1))]),e("tr",null,[e("td",J,[e("a",R,[t[12]||(t[12]=l("Greenwich")),o(i)])]),t[13]||(t[13]=e("td",{style:{"text-align":"left"}},"2.1.x",-1))]),e("tr",null,[e("td",j,[e("a",A,[t[14]||(t[14]=l("Finchley")),o(i)])]),t[15]||(t[15]=e("td",{style:{"text-align":"left"}},"2.0.x",-1))]),e("tr",null,[e("td",D,[e("a",P,[t[16]||(t[16]=l("Edgware")),o(i)])]),t[17]||(t[17]=e("td",{style:{"text-align":"left"}},"1.5.x",-1))]),e("tr",null,[e("td",V,[e("a",E,[t[18]||(t[18]=l("Dalston")),o(i)])]),t[19]||(t[19]=e("td",{style:{"text-align":"left"}},"1.5.x",-1))])])]),t[23]||(t[23]=e("p",null,"因此，我们推荐使用次新版本：Spring Cloud 2021.0.x以及Spring Boot 2.7.x版本。",-1)),t[24]||(t[24]=e("p",null,"另外，Alibaba的微服务产品SpringCloudAlibaba目前也成为了SpringCloud组件中的一员，我们课堂中也会使用其中的部分组件。",-1)),t[25]||(t[25]=e("p",null,"在我们的父工程hmall中已经配置了SpringCloud以及SpringCloudAlibaba的依赖：",-1)),t[26]||(t[26]=e("p",null,[e("img",{src:f,alt:"image-20250310151042029"})],-1)),t[27]||(t[27]=e("p",null,"对应的版本：",-1)),t[28]||(t[28]=e("p",null,[e("img",{src:k,alt:"image-20250310151055987"})],-1)),t[29]||(t[29]=e("p",null,"这样，我们在后续需要使用SpringCloud或者SpringCloudAlibaba组件时，就无需单独指定版本了。",-1))])}const I=r(b,[["render",H],["__file","2-Microservices.html.vue"]]),G=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day03_Microservices/1_Microservices/2-Microservices.html","title":"认识微服务","lang":"en-US","frontmatter":{"title":"认识微服务","date":"2025/03/06"},"headers":[{"level":2,"title":"1 单体架构","slug":"_1-单体架构","link":"#_1-单体架构","children":[]},{"level":2,"title":"2 微服务","slug":"_2-微服务","link":"#_2-微服务","children":[]},{"level":2,"title":"3 SpringCloud","slug":"_3-springcloud","link":"#_3-springcloud","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day03_Microservices/1_Microservices/2-Microservices.md","git":{"createdTime":1741251281000,"updatedTime":1741654623000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{I as comp,G as data};
