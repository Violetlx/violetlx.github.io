import{_ as s,c as a,b as e,o as t}from"./app-BGK6M5S8.js";const p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p><img src="https://bizhi1.com/wp-content/uploads/2024/10/sunrise-in-twin-lakes-colorado-ll-7680x4320-1.jpg" alt="科罗拉多州双湖的日出"></p><h2 id="克隆" tabindex="-1"><a class="header-anchor" href="#克隆"><span>克隆</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>支持泛型的克隆接口和克隆类</p></div><h3 id="_1-解决什么问题" tabindex="-1"><a class="header-anchor" href="#_1-解决什么问题"><span>1 解决什么问题</span></a></h3><p>JDK 中的 Cloneable 接口只是一个空接口，并没有定义成员，它存在的意义仅仅是指明一个类的实例化对象支持位复制（就是对象克隆），如果不实现这个类，调用对象的 clone() 方法就会抛出 <code>CloneNotSupportedException</code> 异常。而且，因为 clone() 方法在 Object 对象中，返回值也是 Object 对象，因此克隆后需要我们自己去强转下类型。</p><h3 id="_2-泛型克隆接口" tabindex="-1"><a class="header-anchor" href="#_2-泛型克隆接口"><span>2 泛型克隆接口</span></a></h3><p>因此，<code>cn.hutool.core.clone.Cloneable</code> 接口应运而生。此接口定义了一个返回型的成员方法，这样，实现此接口后会提示必须实现一个 public 的 clone 方法，调用父类的 clone 方法即可：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 猫猫类，使用实现 Cloneable 方式</span>
<span class="line"> * <span class="token keyword">@author</span> Looly</span>
<span class="line"> *</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;miaomiao&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CloneRuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-泛型克隆类" tabindex="-1"><a class="header-anchor" href="#_3-泛型克隆类"><span>3 泛型克隆类</span></a></h3><p>但是实现此接口依旧有不方便之处，就是必须自己实现一个 public 类型的 clone() 方法，还要调用父类（Object）的 clone 方法并处理异常。于是 <code>cn.hutool.clone.CloneSupport</code> 类产生，这个类帮我们实现了上面的 clone 方法，因此只要集成此类，不用写任何代码即可使用 clone() 方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 狗狗类，用于继承CloneSupport类</span>
<span class="line"> * <span class="token keyword">@author</span> Looly</span>
<span class="line"> *</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">CloneSupport</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;wangwang&quot;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，使用 CloneSupport 的前提是你没有集成任何的类，谁让 Java 不支持多重继承呢（你依旧可以让父类集成这个类，如果可以的话）。如果没办法集成类，那实现 <code>cn.hutool.clone.Cloneable</code> 也是不错的主意，因此 hutool 提供了这两种方式，任选其一，在便捷和灵活上都提供了支持。</p><h3 id="_4-深克隆" tabindex="-1"><a class="header-anchor" href="#_4-深克隆"><span>4 深克隆</span></a></h3><p>我们知道实现 Cloneable 接口后克隆的对象是浅克隆，要想实现深克隆，请使用：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">cloneByStream</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>前提是对象必须实现 Serializable 接口。</p><p>ObjectUtil 同样提供一种静态方法：<code>clone(obj) 、cloneIfPossible(obj)</code> 用于简化克隆调用。</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 类型转换工具类-Convert</p><p>② 自定义类型转换-ConverterRegistry</p></div><h2 id="_1-类型转换工具类-convert" tabindex="-1"><a class="header-anchor" href="#_1-类型转换工具类-convert"><span>① 类型转换工具类-Convert</span></a></h2><h3 id="_1-痛点" tabindex="-1"><a class="header-anchor" href="#_1-痛点"><span>1 痛点</span></a></h3><p>在 Java 开发中我们要面对各种各样的类型转换问题，尤其是从命令行获取的用户参数，从 HttpRequest 获取 Parameter 等等，这些参数类型多种多样，我们怎么去转换他们呢？常用的办法是先整成 String，然后调用 XXX.parseXXX 方法，还要承受转换失败的风险，不得不加一层 try catch，这个小小的过程混迹在业务代码中会显得非常难看和臃肿。</p><h3 id="_2-convert-类" tabindex="-1"><a class="header-anchor" href="#_2-convert-类"><span>2 Convert 类</span></a></h3><p>Convert 类可以说是一个工具方法类，里面封装了针对 Java 常见类型的转换，用于简化类型转换。Convert 类中大部分方法为 toXXX ，参数为 Object，可以实现将任意可能的类型转换为指定类型。同时支持第二个参数 defaultValue 用于在转换失败时返回一个默认值。</p><h3 id="_3-java-常见类型转换" tabindex="-1"><a class="header-anchor" href="#_3-java-常见类型转换"><span>3 Java 常见类型转换</span></a></h3><p><strong>① 转换为字符串：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//aStr为&quot;1&quot;</span></span>
<span class="line"><span class="token class-name">String</span> aStr <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//bStr为：&quot;[1, 2, 3, 4, 5]&quot;</span></span>
<span class="line"><span class="token class-name">String</span> bStr <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② 转换为指定类型数组：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果为Integer数组</span></span>
<span class="line"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果为Integer数组</span></span>
<span class="line"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray2 <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ 转换为日期对象：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;2017-05-06&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Date</span> value <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ 转换为集合：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;你&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;好&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//从4.1.11开始可以这么用</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-其他类型转换" tabindex="-1"><a class="header-anchor" href="#_3-其他类型转换"><span>3 其他类型转换</span></a></h3><p><strong>① 标准类型</strong></p><p>通过 <code>Convert.convert(Class&lt;T&gt;,Object)</code> 方法可以将任意类型转换为指定类型，Hutool 中预定义了许多类型转换，例如转换为 URI、URL、Calendar 等等，这些类型的转换都依托于 <code>ConverterRegistry</code> 类。通过这个类和 <code>Converter</code> 接口，我们可以自定义一些类型转换。</p><p><strong>② 泛型类型</strong></p><p>通过 <code>convert(TypeReference&lt;T&gt; reference,Object value)</code> 方法，自行 new 一个 <code>TypeReference</code> 对象可以对嵌套泛型进行类型转换。例如，我们想转换一个对象为 <code>List&lt;String&gt;</code> 类型，此时传入的标准 Class 就无法满足要求，此时我们可以这样：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;你&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;好&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>TypeReference</code> 实例化后制定泛型类型，即可转换对象为我们想要的目标类型。</p><h3 id="_4-半角和全角转换" tabindex="-1"><a class="header-anchor" href="#_4-半角和全角转换"><span>4 半角和全角转换</span></a></h3><p>在很多文本的统一化中这两个方法非常有用，主要对标点符号的全角半角转换。</p><p><strong>① 半角转全角：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：&quot;１２３４５６７８９&quot;</span></span>
<span class="line"><span class="token class-name">String</span> sbc <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toSBC</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② 全角转半角：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;１２３４５６７８９&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为&quot;123456789&quot;</span></span>
<span class="line"><span class="token class-name">String</span> dbc <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toDBC</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-16进制-hex" tabindex="-1"><a class="header-anchor" href="#_5-16进制-hex"><span>5 16进制（Hex）</span></a></h3><p>在很多加密解密，以及中文字符串传输（比如表单提交）的时候，会用到 16 进制转换，就是 Hex 转换，为此 Hutool 中专门封装了 <code>HexUtil</code> 工具类，考虑到 16 进制转换也是转换的一部分，因此将其方法也放在 Convert 类中，便于理解和查找，使用同样非常简单：</p><p><strong>① 转为 16 进制（Hex）字符串</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;我是一个小小的可爱的字符串&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果：&quot;e68891e698afe4b880e4b8aae5b08fe5b08fe79a84e58fafe788b1e79a84e5ad97e7aca6e4b8b2&quot;</span></span>
<span class="line"><span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">CHARSET_UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② 将 16 进制（Hex）字符串转为普通字符串：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token string">&quot;e68891e698afe4b880e4b8aae5b08fe5b08fe79a84e58fafe788b1e79a84e5ad97e7aca6e4b8b2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：&quot;我是一个小小的可爱的字符串&quot;</span></span>
<span class="line"><span class="token class-name">String</span> raw <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">hexStrToStr</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">CHARSET_UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//注意：在4.1.11之后hexStrToStr将改名为hexToStr</span></span>
<span class="line"><span class="token class-name">String</span> raw <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">hexToStr</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">CHARSET_UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>因为字符串牵涉到编码问题，因此必须传入编码对象，此处使用 UTF-8 编码。toHex 方法同样支持传入 byte[] ，同样也可以使用 hexToBytes 方法将 16 进制转为 byte[]</p></div><h3 id="_6-unicode-和字符串转换" tabindex="-1"><a class="header-anchor" href="#_6-unicode-和字符串转换"><span>6 Unicode 和字符串转换</span></a></h3><p>与 16 进制类似，Convert 类同样可以在字符串和 Unicode 之间轻松切换：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;我是一个小小的可爱的字符串&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：&quot;\\\\u6211\\\\u662f\\\\u4e00\\\\u4e2a\\\\u5c0f\\\\u5c0f\\\\u7684\\\\u53ef\\\\u7231\\\\u7684\\\\u5b57\\\\u7b26\\\\u4e32&quot;	</span></span>
<span class="line"><span class="token class-name">String</span> unicode <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">strToUnicode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：&quot;我是一个小小的可爱的字符串&quot;</span></span>
<span class="line"><span class="token class-name">String</span> raw <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">unicodeToStr</span><span class="token punctuation">(</span>unicode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很熟悉吧？如果你在 properties 文件中写过中文，你会明白这个方法的重要性。</p><h3 id="_7-编码转换" tabindex="-1"><a class="header-anchor" href="#_7-编码转换"><span>7 编码转换</span></a></h3><p>在接收表单的时候，我们常常被中文乱码所困扰，其实大多数原因是使用了不正确的编码方式解码了数据。于是 <code>Convert.convertCharset</code> 方法便派上用场了，它可以把乱码转为正确的编码方式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;我不是乱码&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//转换后result为乱码</span></span>
<span class="line"><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">convertCharset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">ISO_8859_1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> raw <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">convertCharset</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">ISO_8859_1</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>注意：经过测试，UTF-8 编码后用 GBK 编码，再用 GBK 编码后用 UTF-8 解码会存在某些中文转换失败的问题。</p></div><h3 id="_8-时间单位转换" tabindex="-1"><a class="header-anchor" href="#_8-时间单位转换"><span>8 时间单位转换</span></a></h3><p><code>Convert.convertTime</code> 方法主要用于转换时长单位，比如一个很大的毫秒，我想获得这个毫秒数对应多少分：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">4535345</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：75</span></span>
<span class="line"><span class="token keyword">long</span> minutes <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">convertTime</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-金额大小写转换" tabindex="-1"><a class="header-anchor" href="#_9-金额大小写转换"><span>9 金额大小写转换</span></a></h3><p>面对财务类需求，<code>Convert.digitToChinese</code> 将金钱数转换为大写形式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">67556.32</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：&quot;陆万柒仟伍佰伍拾陆元叁角贰分&quot;</span></span>
<span class="line"><span class="token class-name">String</span> digitUppercase <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">digitToChinese</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>注意：转换为大写只能精确到分（小数点后两位），之后的数字会被忽略。</p></div><h3 id="_10-数字转换" tabindex="-1"><a class="header-anchor" href="#_10-数字转换"><span>10 数字转换</span></a></h3><p><strong>① 数字转换为英文表达</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// ONE HUNDRED AND CENTS TWENTY THREE ONLY</span></span>
<span class="line"><span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">numberToWord</span><span class="token punctuation">(</span><span class="token number">100.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② 数字简化</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1.2k</span></span>
<span class="line"><span class="token class-name">String</span> format1 <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">numberToSimple</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ 数字转中文</strong></p><p>数字转中文方法中，只保留两位小数：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 一万零八百八十九点七二</span></span>
<span class="line"><span class="token class-name">String</span> f1 <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">numberToChinese</span><span class="token punctuation">(</span><span class="token number">10889.72356</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用金额大写</span></span>
<span class="line"><span class="token comment">// 壹万贰仟陆佰伍拾叁</span></span>
<span class="line"><span class="token class-name">String</span> f1 <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">numberToChinese</span><span class="token punctuation">(</span><span class="token number">12653</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ 数字中文表示转换为数字</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 1012</span></span>
<span class="line"><span class="token keyword">int</span> f1 <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">chineseToNumber</span><span class="token punctuation">(</span><span class="token string">&quot;一千零一十二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-原始类和包装类转换" tabindex="-1"><a class="header-anchor" href="#_11-原始类和包装类转换"><span>11 原始类和包装类转换</span></a></h3><p>有的时候，我们需要将包装类和原始类相互转换（比如 Integer.class 和 int.class）。这时候我们可以：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//去包装</span></span>
<span class="line"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> wrapClass <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：int.class</span></span>
<span class="line"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> unWraped <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">unWrap</span><span class="token punctuation">(</span>wrapClass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//包装</span></span>
<span class="line"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> primitiveClass <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果为：Long.class</span></span>
<span class="line"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> wraped <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>primitiveClass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-自定义类型转换-converterregistry" tabindex="-1"><a class="header-anchor" href="#_2-自定义类型转换-converterregistry"><span>② 自定义类型转换-ConverterRegistry</span></a></h2><h3 id="_1-由来" tabindex="-1"><a class="header-anchor" href="#_1-由来"><span>1 由来</span></a></h3><p>Hutool 中类型转换最早只是一个工具类，叫做 Convert，对于每一种类型转换都是用一个静态方法表示，但是这种方式存在一个潜在问题，那就是扩展性不足，这导致 Hutool 只能满足部分类型转换的需求。</p><h3 id="_2-解决" tabindex="-1"><a class="header-anchor" href="#_2-解决"><span>2 解决</span></a></h3><p>扩展思想：</p><ul><li><code>Converter</code> 类型转换接口，通过实现这个接口，重写 <code>Convert</code> 方法，以实现不同类型的对象转换</li><li><code>ConverterRegistry</code> 类型转换登记中心。将各种类型 <code>Convert</code> 对象放入登记中心，通过 <code>convert</code> 方法查找目标类型对应的转换器，将被转换对象转换之。在此类中，存放着<strong>默认转换器</strong>和<strong>自定义转换器</strong>。 <ol><li>默认转换器是 Hutool 中预定义的那些转换器</li><li>自定义转换器存放用户自定的转换器</li></ol></li></ul><p>通过这些方式，实现灵活的类型转换，使用方式如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3423</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">ConverterRegistry</span> converterRegistry <span class="token operator">=</span> <span class="token class-name">ConverterRegistry</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> result <span class="token operator">=</span> converterRegistry<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;3423&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-自定义转换" tabindex="-1"><a class="header-anchor" href="#_3-自定义转换"><span>3 自定义转换</span></a></h3><p>Hutool 的默认转换有时候并不能满足我们自定义对象的一些需求，这时我们可以使用 <code>ConverterRegistry.getInstance().putCustom()</code> 方法自定义类型转换。</p><p><strong>① 自定义转换器</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;Custom: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② 注册转换器</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ConverterRegistry</span> converterRegistry <span class="token operator">=</span> <span class="token class-name">ConverterRegistry</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//此处做为示例自定义String转换，因为Hutool中已经提供String转换，请尽量不要替换</span></span>
<span class="line"><span class="token comment">//替换可能引发关联转换异常（例如覆盖String转换会影响全局）</span></span>
<span class="line">converterRegistry<span class="token punctuation">.</span><span class="token function">putCustom</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CustomConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ 执行转换</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">454553</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> result <span class="token operator">=</span> converterRegistry<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Custom: 454553&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>注意： <code>convert(Class type, Object value, T defaultValue, boolean isCustomFirst)</code> 方法的最后一个参数可以选择转换时优先使用自定义转换器还是默认转换器。<code>convert(Class type, Object value, T defaultValue)</code> 和 <code>convert(Class type, Object value)</code> 两个重载方法都是使用自定义转换器优先的模式。</p></div><h3 id="_4-converterregistry-单例和对象模式" tabindex="-1"><a class="header-anchor" href="#_4-converterregistry-单例和对象模式"><span>4 ConverterRegistry 单例和对象模式</span></a></h3><p>ConverterRegistry 提供一个静态方法 getInstance() 返回全局单例对象，这也是推荐的使用方式，当然如果想在某个限定范围内自定义转换，可以实例化 ConverterRegistry 对象。</p>`,100)]))}const i=s(p,[["render",l],["__file","1-Hutool_Core.html.vue"]]),r=JSON.parse('{"path":"/docs/Java/Hutool/2_Hutool_Core/1-Hutool_Core.html","title":"Hutool-Core核心（一）","lang":"en-US","frontmatter":{"title":"Hutool-Core核心（一）","date":"2024/12/18"},"headers":[{"level":2,"title":"克隆","slug":"克隆","link":"#克隆","children":[{"level":3,"title":"1 解决什么问题","slug":"_1-解决什么问题","link":"#_1-解决什么问题","children":[]},{"level":3,"title":"2 泛型克隆接口","slug":"_2-泛型克隆接口","link":"#_2-泛型克隆接口","children":[]},{"level":3,"title":"3 泛型克隆类","slug":"_3-泛型克隆类","link":"#_3-泛型克隆类","children":[]},{"level":3,"title":"4 深克隆","slug":"_4-深克隆","link":"#_4-深克隆","children":[]}]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":2,"title":"① 类型转换工具类-Convert","slug":"_1-类型转换工具类-convert","link":"#_1-类型转换工具类-convert","children":[{"level":3,"title":"1 痛点","slug":"_1-痛点","link":"#_1-痛点","children":[]},{"level":3,"title":"2 Convert 类","slug":"_2-convert-类","link":"#_2-convert-类","children":[]},{"level":3,"title":"3 Java 常见类型转换","slug":"_3-java-常见类型转换","link":"#_3-java-常见类型转换","children":[]},{"level":3,"title":"3 其他类型转换","slug":"_3-其他类型转换","link":"#_3-其他类型转换","children":[]},{"level":3,"title":"4 半角和全角转换","slug":"_4-半角和全角转换","link":"#_4-半角和全角转换","children":[]},{"level":3,"title":"5 16进制（Hex）","slug":"_5-16进制-hex","link":"#_5-16进制-hex","children":[]},{"level":3,"title":"6 Unicode 和字符串转换","slug":"_6-unicode-和字符串转换","link":"#_6-unicode-和字符串转换","children":[]},{"level":3,"title":"7 编码转换","slug":"_7-编码转换","link":"#_7-编码转换","children":[]},{"level":3,"title":"8 时间单位转换","slug":"_8-时间单位转换","link":"#_8-时间单位转换","children":[]},{"level":3,"title":"9 金额大小写转换","slug":"_9-金额大小写转换","link":"#_9-金额大小写转换","children":[]},{"level":3,"title":"10 数字转换","slug":"_10-数字转换","link":"#_10-数字转换","children":[]},{"level":3,"title":"11 原始类和包装类转换","slug":"_11-原始类和包装类转换","link":"#_11-原始类和包装类转换","children":[]}]},{"level":2,"title":"② 自定义类型转换-ConverterRegistry","slug":"_2-自定义类型转换-converterregistry","link":"#_2-自定义类型转换-converterregistry","children":[{"level":3,"title":"1 由来","slug":"_1-由来","link":"#_1-由来","children":[]},{"level":3,"title":"2 解决","slug":"_2-解决","link":"#_2-解决","children":[]},{"level":3,"title":"3 自定义转换","slug":"_3-自定义转换","link":"#_3-自定义转换","children":[]},{"level":3,"title":"4 ConverterRegistry 单例和对象模式","slug":"_4-converterregistry-单例和对象模式","link":"#_4-converterregistry-单例和对象模式","children":[]}]}],"filePathRelative":"docs/Java/Hutool/2_Hutool_Core/1-Hutool_Core.md","git":{"createdTime":1734515917000,"updatedTime":1734515917000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{i as comp,r as data};
