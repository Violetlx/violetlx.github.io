import{_ as n,c,b as s,a,d as l,e as o,r,o as t}from"./app-DJjQCWUF.js";const p="/assets/image-20250310165228781-DeHgAlaD.png",d="/assets/image-20250310165325138-DoFPmC_v.png",h={},m={href:"http://192.168.150.101:8848/nacos/%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%B0%86%60192.168.150.101%60%E6%9B%BF%E6%8D%A2%E4%B8%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAIP%E5%9C%B0%E5%9D%80%E3%80%82",target:"_blank",rel:"noopener noreferrer"};function v(u,e){const i=r("ExternalLinkIcon");return t(),c("div",null,[e[2]||(e[2]=s('<p><img src="https://bizhi1.com/wp-content/uploads/2025/01/Snow_Winter_House_Dark_Forest_Lake_Louise_Winter_5K-Wallpaper_3840x2160.jpg" alt="雪 冬季房屋 黑暗森林 路易斯湖 冬季房屋"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 注册中心原理</p><p>2 Nacos 注册中心</p><p>3 服务注册</p><p>4 服务发现</p></div><p>在上一章我们实现了微服务拆分，并且通过Http请求实现了跨微服务的远程调用。不过这种手动发送Http请求的方式存在一些问题。</p><p>试想一下，假如商品微服务被调用较多，为了应对更高的并发，我们进行了多实例部署，如图：</p><p><img src="'+p+'" alt="image-20250310165228781"></p><p>此时，每个<code>item-service</code>的实例其IP或端口不同，问题来了：</p><ul><li>item-service这么多实例，cart-service如何知道每一个实例的地址？</li><li>http请求要写url地址，<code>cart-service</code>服务到底该调用哪个实例呢？</li><li>如果在运行过程中，某一个<code>item-service</code>实例宕机，<code>cart-service</code>依然在调用该怎么办？</li><li>如果并发太高，<code>item-service</code>临时多部署了N台实例，<code>cart-service</code>如何知道新实例的地址？</li></ul><p>为了解决上述问题，就必须引入注册中心的概念了，接下来我们就一起来分析下注册中心的原理。</p><h2 id="_1-注册中心原理" tabindex="-1"><a class="header-anchor" href="#_1-注册中心原理"><span>1 注册中心原理</span></a></h2><p>在微服务远程调用的过程中，包括两个角色：</p><ul><li>服务提供者：提供接口供其它微服务访问，比如<code>item-service</code></li><li>服务消费者：调用其它微服务提供的接口，比如<code>cart-service</code></li></ul><p>在大型微服务项目中，服务提供者的数量会非常多，为了管理这些服务就引入了<strong>注册中心</strong>的概念。注册中心、服务提供者、服务消费者三者间关系如下：</p><p><img src="'+d+`" alt="image-20250310165325138"></p><p>流程如下：</p><ul><li>服务启动时就会注册自己的服务信息（服务名、IP、端口）到注册中心</li><li>调用者可以从注册中心订阅想要的服务，获取服务对应的实例列表（1个服务可能多实例部署）</li><li>调用者自己对实例列表负载均衡，挑选一个实例</li><li>调用者向该实例发起远程调用</li></ul><p>当服务提供者的实例宕机或者启动新实例时，调用者如何得知呢？</p><ul><li>服务提供者会定期向注册中心发送请求，报告自己的健康状态（心跳请求）</li><li>当注册中心长时间收不到提供者的心跳时，会认为该实例宕机，将其从服务的实例列表中剔除</li><li>当服务有新实例启动时，会发送注册服务请求，其信息会被记录在注册中心的服务实例列表</li><li>当注册中心服务列表变更时，会主动通知微服务，更新本地服务列表</li></ul><h2 id="_2-nacos-注册中心" tabindex="-1"><a class="header-anchor" href="#_2-nacos-注册中心"><span>2 Nacos 注册中心</span></a></h2><p>目前开源的注册中心框架有很多，国内比较常见的有：</p><ul><li>Eureka：Netflix公司出品，目前被集成在SpringCloud当中，一般用于Java应用</li><li>Nacos：Alibaba公司出品，目前被集成在SpringCloudAlibaba中，一般用于Java应用</li><li>Consul：HashiCorp公司出品，目前集成在SpringCloud中，不限制微服务语言</li></ul><p>以上几种注册中心都遵循SpringCloud中的API规范，因此在业务开发使用上没有太大差异。由于Nacos是国内产品，中文文档比较丰富，而且同时具备<strong>配置管理</strong>功能（后面会学习），因此在国内使用较多，课堂中我们会Nacos为例来学习。</p><p>官方网站如下：</p><p>暂时无法在飞书文档外展示此内容</p><p>我们基于Docker来部署Nacos的注册中心，首先我们要准备MySQL数据库表，用来存储Nacos的数据。由于是Docker部署，所以大家需要将资料中的SQL文件导入到你<strong>Docker中的MySQL容器</strong>中：</p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=NmNhZjYxMDM1ZjI2NmQ3OTZjMjcxYmViMmE5NGJiM2Ffbll4THBleFNFR2VuZHFGSDk2ekJ3Mk5XWGMxVllpUEhfVG9rZW46SFZZSmJJbjVqb2w5clB4cmdZQ2N5MmFDbmloXzE3NDE1OTY5NTY6MTc0MTYwMDU1Nl9WNA" alt="img"></p><p>最终表结构如下：</p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjM2NThhZjY4NDhhOGRjODZhNDgzMGI4YTk5NDQzYzFfMkVmWk1yVjVhTmRDZDVHSnY5cE5RMmVMeUxsTHFtTlRfVG9rZW46WDNEYmJrcHROb3dCVkZ4eGNYZ2NvNzFUblliXzE3NDE1OTY5NTY6MTc0MTYwMDU1Nl9WNA" alt="img"></p><p>然后，找到课前资料下的nacos文件夹：</p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=MTI4ODBlYzc2MjA4ZmI3ZTc3NTQxODQzMDFkYWU2ZmVfZjJkcnRoWW0zMnNua3dSY2hXdUlycXI1VFc3RjVFYThfVG9rZW46WG1hOGIxZmp2b01jVHF4anhSNmNMQzdtbjVlXzE3NDE1OTY5NTY6MTc0MTYwMDU1Nl9WNA" alt="img"></p><p>其中的<code>nacos/custom.env</code>文件中，有一个MYSQL_SERVICE_HOST也就是mysql地址，需要修改为你自己的虚拟机IP地址：</p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=MGIxNjYxNGY2MTkwZDA4YTJlODM1NTA4MThkMjI3NzFfNnNLQUR2dDBvcW1QYU1zWG9udlJXOUpJQjJOV0VEWU9fVG9rZW46V1ZpZ2JlZDZVb0ZaYTF4bmZvSGNlUDJhbmVoXzE3NDE1OTY5NTY6MTc0MTYwMDU1Nl9WNA" alt="img"></p><p>然后，将课前资料中的<code>nacos</code>目录上传至虚拟机的<code>/root</code>目录。</p><p>进入root目录，然后执行下面的docker命令：</p><div class="language-PowerShell line-numbers-mode" data-highlighter="prismjs" data-ext="PowerShell" data-title="PowerShell"><pre><code><span class="line">docker run -d \\</span>
<span class="line">--name nacos \\</span>
<span class="line">--env-file ./nacos/custom.env \\</span>
<span class="line">-p 8848:8848 \\</span>
<span class="line">-p 9848:9848 \\</span>
<span class="line">-p 9849:9849 \\</span>
<span class="line">--restart=always \\</span>
<span class="line">nacos/nacos-server:v2.1.0-slim</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34)),a("p",null,[e[1]||(e[1]=l("启动完成后，访问下面地址：")),a("a",m,[e[0]||(e[0]=l("http://192.168.150.101:8848/nacos/，注意将`192.168.150.101`替换为你自己的虚拟机IP地址。")),o(i)])]),e[3]||(e[3]=s('<p>首次访问会跳转到登录页，<strong>账号密码都是nacos</strong></p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=YTljNDZkOGRkMGM5YmEzNmJhY2NkZjc1NzQ5ZThmM2FfSzFXUzhtNzRFdVU1ajV5S0FhTDFJbGYwWE00ckpWU0xfVG9rZW46THUzMWJwaFVRbzZDRFZ4Qks3bWNxVWF5blZoXzE3NDE1OTY5NTY6MTc0MTYwMDU1Nl9WNA" alt="img"></p><h2 id="_3-服务注册" tabindex="-1"><a class="header-anchor" href="#_3-服务注册"><span>3 服务注册</span></a></h2><h3 id="_3-1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-添加依赖"><span>3.1 添加依赖</span></a></h3><h3 id="_3-2-配置-nacos" tabindex="-1"><a class="header-anchor" href="#_3-2-配置-nacos"><span>3.2 配置 Nacos</span></a></h3><h3 id="_3-3-启动服务实例" tabindex="-1"><a class="header-anchor" href="#_3-3-启动服务实例"><span>3.3 启动服务实例</span></a></h3><h2 id="_4-服务发现" tabindex="-1"><a class="header-anchor" href="#_4-服务发现"><span>4 服务发现</span></a></h2><h3 id="_4-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-引入依赖"><span>4.1 引入依赖</span></a></h3><h3 id="_4-2-配置-nacos-地址" tabindex="-1"><a class="header-anchor" href="#_4-2-配置-nacos-地址"><span>4.2 配置 Nacos 地址</span></a></h3><h3 id="_4-3-发现并调用服务" tabindex="-1"><a class="header-anchor" href="#_4-3-发现并调用服务"><span>4.3 发现并调用服务</span></a></h3>',10))])}const _=n(h,[["render",v],["__file","4-Microservices.html.vue"]]),g=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day03_Microservices/1_Microservices/4-Microservices.html","title":"服务注册和发现","lang":"en-US","frontmatter":{"title":"服务注册和发现","date":"2025/03/06"},"headers":[{"level":2,"title":"1 注册中心原理","slug":"_1-注册中心原理","link":"#_1-注册中心原理","children":[]},{"level":2,"title":"2 Nacos 注册中心","slug":"_2-nacos-注册中心","link":"#_2-nacos-注册中心","children":[]},{"level":2,"title":"3 服务注册","slug":"_3-服务注册","link":"#_3-服务注册","children":[{"level":3,"title":"3.1 添加依赖","slug":"_3-1-添加依赖","link":"#_3-1-添加依赖","children":[]},{"level":3,"title":"3.2 配置 Nacos","slug":"_3-2-配置-nacos","link":"#_3-2-配置-nacos","children":[]},{"level":3,"title":"3.3 启动服务实例","slug":"_3-3-启动服务实例","link":"#_3-3-启动服务实例","children":[]}]},{"level":2,"title":"4 服务发现","slug":"_4-服务发现","link":"#_4-服务发现","children":[{"level":3,"title":"4.1 引入依赖","slug":"_4-1-引入依赖","link":"#_4-1-引入依赖","children":[]},{"level":3,"title":"4.2 配置 Nacos 地址","slug":"_4-2-配置-nacos-地址","link":"#_4-2-配置-nacos-地址","children":[]},{"level":3,"title":"4.3 发现并调用服务","slug":"_4-3-发现并调用服务","link":"#_4-3-发现并调用服务","children":[]}]}],"filePathRelative":"docs/Java/Heima/Microservices/Day03_Microservices/1_Microservices/4-Microservices.md","git":{"createdTime":1741251281000,"updatedTime":1741654623000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{_ as comp,g as data};
