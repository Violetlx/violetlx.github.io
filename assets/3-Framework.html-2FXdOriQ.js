import{_ as i,c as p,b as o,o as t}from"./app-C7pp65Rl.js";const s="/assets/image-20230910003509739-CnnRxl5K.png",n="/assets/image-20230916153325362-1694849607867-1-LmPFZjZq.png",r="/assets/image-20230910152930355-w5xlKX6d.png",e="/assets/image-20230929115416626-Bb_TCI_-.png",g="/assets/image-20230929120416451-DtxB0gPC.png",a="/assets/image-20230929120431623-DHGon7H4.png",u="/assets/image-20230929095436895-DTd3ESo9.png",c="/assets/image-20230929113349132-DvTvZaKr.png",h="/assets/image-20230929113625498-Dk4Vo2ge.png",d={};function m(S,l){return t(),p("div",null,l[0]||(l[0]=[o('<p><img src="https://artfiles.alphacoders.com/122/thumb-1920-122131.jpg" alt="Download Pink Hair Blonde Violet Evergarden (Character) Violet Evergarden Zero Two (Darling In The FranXX) Darling In The FranXX Anime Crossover Art"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul><li>概述</li><li>系统运行与软件维护</li><li>系统配置与性能评价</li><li>系统安全</li><li>系统架构设计</li><li>应用系统簇与构件系统</li><li>分布式系统开发</li><li>系统质量属性与架构评估</li><li>中间件技术</li></ul></div><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>系统工程：利用计算机作为工具，对系统结构，元素，信息和反馈进行分析，已达到最优规划，最优设计，最优管理，控制的目的</p><p>系统工程法：</p><ul><li>霍尔三维结构 <ol><li>时间维度：规划，拟定方案，研制，生产，安装，运行，更新</li><li>逻辑维度：明确问题，确定目标，系统综合，分析，优化，决策，实施</li><li>知识维度：工程，医学，建筑，商业，法律，管理，社会科学，艺术</li></ol></li><li>切克兰德法：（比较与探寻） <ol><li>认识问题</li><li>根底定义</li><li>建立概念模型</li><li>比较探寻</li><li>选择</li><li>设计与实施</li><li>评估与反馈</li></ol></li><li>并行工程：提高质量，降低成本，缩短产品开发周期和上市时间</li><li>综合集成法（钱学森）</li></ul><p><strong>系统工程生命周期</strong></p><ol><li>探索与研究：识别用户需求，探索创意和技术</li><li>概念：细化用户需求，探索可行性，提出实现解决方案</li><li>开发：细化系统，创建解决方案描述，构建系统，验证并确认系统</li><li>生产：检验与验证</li><li>使用：满足用户需求</li><li>保障：提供持续性的系统能力</li><li>退役：存储，归档或退出系统</li></ol><p><strong>系统开发方法</strong></p><ol><li>计划驱动</li><li>渐进迭代式开发</li><li>精益开发</li><li>敏捷开发</li></ol><h2 id="系统运行与软件维护" tabindex="-1"><a class="header-anchor" href="#系统运行与软件维护"><span><strong>系统运行与软件维护</strong></span></a></h2><p><strong>系统转换计划</strong></p><p><img src="'+s+'" alt="image-20230910003509739"></p><ul><li>淘汰策略：对企业资源造成浪费的系统（需要重新设计并替换旧系统）</li><li>继承策略：满足企业运作的功能或性能要求（新系统需要全面兼容遗留系统功能及数据）</li><li>改造策略：主要对当前系统功能的增强和数据模型的改造</li><li>集成策略：将系统与其他系统集成使用</li></ul><p><strong>新旧系统转换策略</strong></p><ul><li>直接转换：旧系统停止运行，新系统立即投入使用（人力和费用最省，风险高）</li><li>并行转换：新旧系统并行使用一段时间，试运行后在正式弃用旧系统（风险小，人力和费用消耗大，难以控制两套系统中数据变化）</li><li>分段转换：分期分批、逐步转换</li></ul><p><strong>数据迁移与转换</strong>（ETL）</p><ul><li>抽取</li><li>转换</li><li>装载</li></ul><p><strong>系统维护</strong></p><ul><li>运行前：运行的计划和维护计划</li><li>运行后：软件修改、培训、帮助资料</li></ul><h2 id="系统配置与性能评价" tabindex="-1"><a class="header-anchor" href="#系统配置与性能评价"><span><strong>系统配置与性能评价</strong></span></a></h2><p>系统指标：</p><ul><li><p>**计算机指标：**主频，运算速度，运算精度,内存容量,存储器存取周期,数据处理速率PDR：,吞吐率,响应时间,部件利用率,RASIS特性：可靠，可用，可维护，完整，安全</p></li><li><p>路由器指标：设备吞吐量，端口吞吐量，全双工线速转发，路由表能力，丢包率，延时，时延抖动，VPN支持</p></li><li><p>交换机指标：最大ATM端口数，支持网络类型，最大SONET端口数，最大MAC地址表</p></li><li><p><strong>操作系统指标</strong>：可靠性，系统吞吐率，响应时间，资源利用率，可移植</p></li><li><p><strong>数据库系统指标</strong>：数据库大小，表数量，单表大小，允许记入数量，单行记入大小，索引数量，最大并发事务处理能力，负载均衡能力，最大连接数</p></li><li><p><strong>WEB服务器</strong>：最大并发连接数，响应延迟，吞吐量</p></li></ul><p><strong>性能评价方法</strong></p><ul><li><p>常用方法</p><blockquote><p>时钟频率</p><p>指令执行速度（KIPS，MIPS）</p><p>等效指令速度法：各类指令在程序中所占比例，并行折算评估</p><p>数据处理数率PDR：采用PDR值计算衡量机器性能</p></blockquote></li><li><p><strong>基准程序法：程序中最大，最频繁核心部分作为计算机性能的标准程序</strong></p><blockquote><p>整数测试</p><p>浮动测试</p><p>SPEC基准测试</p><p>TPC基准测试：测试事务处理，数据库处理</p></blockquote></li></ul><p><strong>Amdahl定理</strong>：对性能瓶颈部件采取高速度后系统性能改进程度</p><p><img src="'+n+'" alt="image-20230916153325362"></p><h2 id="系统安全" tabindex="-1"><a class="header-anchor" href="#系统安全"><span><strong>系统安全</strong></span></a></h2><p><strong>信息安全要素</strong></p><ul><li>机密：确保消息不暴露未授权的实体或进程</li><li>完整：只有允许的人才能修改数据，并能识别数据是否以被篡改</li><li>可用：授权后的实体才能访问数据</li><li>可控：授权范围及允许的数据行文和流向</li><li>可审查：对于安全问题提供调查依据</li></ul><p>信息安全范围</p><ul><li>设备：</li><li>数据：</li><li>内容：政治健康，符合法规，符合道德</li><li>行为：</li></ul><p><strong>网络安全措施目标：访问控制，认证，完整性，审计，保密</strong></p><p>**信息存储安全：**使用安全，系统安全监控，计算机病毒，数据加密与防止非法攻击</p><p><strong>信息安全系统框架</strong></p><ul><li><p><strong>信息安全技术</strong></p><ul><li><p>摘要信息（固定长度，不同的数据都会产生不同的摘要信息，校验数据是否被篡改）</p><ol><li>MD5</li><li>SHA-1（安全性高于MD5）</li><li>数字签名：唯一标识发送方</li></ol></li><li><p>双向加密</p><ul><li><strong>对称加密技术</strong>：<strong>加密数据与解密数据的秘钥一致（不公开密钥加密算法），加密强度不高，密钥分发困难</strong><ol><li>DES/3DES密钥加密块算法：分组打乱，通过多次异或操作完成加密解密。56位密钥，64位数据块，速度快，密钥易产生，<strong>容易暴力破解</strong></li><li>AES（高级加密标准）： <ul><li>支持128,192,256位密钥加解密</li><li>Padding填充方式 <ul><li>NoPadding：明文必须16字节整数</li><li>PKCS5Padding：使用缺少数量字符进行填充</li><li>ISO10126Padding：使用随机字符填充</li></ul></li></ul></li><li>RC-5：</li><li>IDEA：比DES加密性好，对计算机功能要求低</li></ol></li><li><strong>非对称加密</strong>：加密数据慢（公钥作为加密密钥，私钥作为解密密钥） <ol><li>RSA512/1024</li><li>ECC</li><li>背包算法</li><li>D-H</li></ol></li><li>数字证书：一种数据结构（版本号，序列号，签名算法，认证机构，有效时间，主题信息，数字签名，公钥信息）<strong>确定公钥与用户关系</strong>（标识用户合法持有的公钥信息）</li><li>签字机构CA：负责签发，管理，撤销证书</li></ul></li></ul></li><li><p><strong>信息安全控制</strong></p><ul><li>访问控制矩阵ACM：确定用户拥有的权限</li><li>控制访问表ACL</li><li>能力表</li><li>授权关系表</li></ul></li></ul><p><strong>信息安全抗攻击技术</strong></p><ul><li><strong>拒绝服务攻击/分布式拒绝服务DDos</strong>：消耗计算机资源，破坏或更改配置信息，使服务器失效</li></ul><ol><li>加强数据包特征识别，通过特征字符串确定攻击服务器和攻击者位置</li><li>设置防火墙监视本地端口使用情况，判断是否存在外部主机主动扫描端口情况</li><li>对通信数据进行ip统计</li><li>修复已发现的问题和系统漏洞</li></ol><ul><li><p>ARP欺骗：欺骗MAC地址，收到的数据被其他主机监听</p><ol><li>固化arp表，阻止arp欺骗</li></ol></li></ul><ol start="2"><li>使用ARP服务器，通过服务器分发MAC地址</li><li>采用双向绑定分发防止ARP</li><li>ARP防护软件</li></ol><ul><li><p>DNS欺骗：冒充域名服务器，将查询的Ip地址转为攻击者IP地址，使用户访问到攻击者页面，导致用户信息泄漏</p><ol><li>被动监听检测：捕获所有DNS请求和应答包，在一定时间间隔内，同一个请求返回不同的应答则可能收到DNS欺骗攻击</li></ol></li></ul><ol start="2"><li>虚假报文探测：发送一个非正常DNS请求包，如果有应答则收到DNS攻击</li><li>交叉检查</li></ol><ul><li><p>IP欺骗</p></li><li><p>端口扫描</p></li></ul><p><strong>网络安全技术</strong></p><ul><li><p>防火墙</p></li><li><p>入侵检测系统IDS：检测外网请求行为是否合法（通过历史行为，特定模式操作匹配）</p></li><li><p>入侵防御IPS 实时检测入侵行为，并直接阻断</p></li><li><p>杀毒软件</p></li><li><p>蜜罐系统：伪造一个蜜罐引诱黑客工具，了解黑客攻击手段和原理</p></li><li><p><img src="'+r+'" alt="image-20230910152930355"></p></li><li><p><strong>网络安全协议</strong></p><ul><li><p>SSL：安全套接字协议，作用在传输层，使用对称加密内容，非对称加密密钥</p></li><li><p>SSH：安全外壳协议：确保ID，口令，会话保密</p></li><li><p>SET：安全电子交易协议（B2C模式）保障支付信息安全，采用PKI框架实现</p></li><li><p>Kerberos：网络身份认证协议，基于信任第三方身份认证</p></li><li><p>PGP协议：使用RSA身份认证，IDEA对称加密，MD5校验数据完整性</p></li></ul></li></ul><p><strong>信息安全保证体系与评估方法</strong></p><p>GB17859-99：计算机系统安全保护能力等级</p><ol><li>用户自主保护：隔离用户与数据</li><li>系统审计保护：定义控制访问权限</li><li>安全标记保护：提供安全策略模型</li><li>结构化保护</li><li>访问验证保护</li></ol><h2 id="系统架构设计" tabindex="-1"><a class="header-anchor" href="#系统架构设计"><span><strong>系统架构设计</strong></span></a></h2><p><strong>目的：解决软件构件复用，质量，维护问题</strong></p><p>架构设计概述：为软件提供一个结构，行为和属性的高级抽象，有构件描述，构件的相互作用，指导构件集成的模式（指定系统的组织结构和拓扑结构，<strong>并显示需求和构件之间对应的关系</strong>，提供一些设计决策原理）</p><p><strong>软件架构</strong>：<strong>软件结构，行为和属性的高级抽象</strong>。指定软件系统的组织结构和拓扑结构</p><p><strong>软件架构设计与周期</strong></p><ol><li>需求分析：根据需求模型构建分析模型（SA系统分析师），保证模型转换可追踪性</li><li>设计阶段：根据SA描述模型产出构件功能及约束限制</li><li>实现阶段</li><li>构件组装：支持可复用构件，监测并消除系统结构失配问题</li><li>部署阶段：提供系统体系结构图（描述软硬件功能分配模型），基于SA模型可以分析部署方案质量</li><li>后开发阶段：维护，演化，复用</li></ol><p><strong>构件</strong>：独立可交互的功能并能部署的单元，外界通过接口访问并提供服务</p><p>构件接口标准化： 消息格式，模式，协议标准化</p><p><strong>商用构件标准规范</strong></p><ul><li>CORBA：对象请求代理（实现对象通信和操作），公共对象服务，公共设施（业务对象使用的服务） <ol><li>Entity：持久化，存储事务信息</li><li>Process：持久化，操作数据信息</li><li>Session：不需要持久化，状态消息由直身控制</li><li>Service</li></ol></li><li>EJB/J2EE</li><li>COM/DCOM/COM+</li></ul><p><strong>面向构件编程COP</strong></p><ul><li>多态</li><li>模块化封装（高层次消息隐藏）</li><li>后期绑定与装载（部署独立性）</li><li>安全性</li><li>构件技术：将细节封装，对业务逻辑实现 <ol><li>EJB：Session Bean，Entity Bean，Message-driven Bean</li><li>componet组件：与语言，平台无关，为应用程序，操作系统提供组件服务</li><li>COBRA：对象请求代理，执行不同语言之间对象通信</li></ol></li></ul><p><strong>软件架构风格</strong>：描述特定软件系统组织方式模式</p><ul><li><p>数据流：按照一定顺序先后执行</p><blockquote><p>批处理序列：按顺序逐步执行，保持数据完整</p><p>管道-过滤器：前一个构件输出作为后一个构件输入，过滤器为构件，连接件为管道</p></blockquote></li><li><p>调用/返回：将问题划分多个步骤调用处理</p><blockquote><p>主程序/子程序：调用作为交互机制，连接构件</p><p>面对对象：对象之间通过程或函数进行交互</p><p>层次结构：只允许相邻层次通信（低耦合），越底层抽象越高。难以分层，正确抽象层次功能</p></blockquote></li><li><p>独立构件：构件之间不存在显示调用关系，通过时间触发，异步方式执行</p><blockquote><p>事件系统：触发或广播方式通知多个构件（匿名调用，并发执行，放弃系统计算控制）</p></blockquote></li><li><p>虚拟机：定义一套规则供使用者使用，基于规则开发构件</p></li><li><p>仓库：以数据为中心，所有操作都围绕数据进行（数据库，超文本）</p></li></ul><p><strong>层次架构风格</strong></p><ul><li><p>C2架构：构件之间通过中间件通信（构件之间不允许直接连接）</p></li><li><p>两层C/S架构：客户端，数据库服务（已不用）</p></li><li><p>三层C/S架构：表现层，处理层，数据层（瓶颈在于各层通信效率）</p></li><li><p>B/S架构（0客户端架构）：浏览器与WEB服务器（数据处理能力差，安全性难以控制，数据查询等响应速度上低于C/S架构，数据交互性不强）</p></li><li><p><strong>RIA应用架构</strong>：数据能够缓存在客户端，由客户端进行计算发送给服务器（小程序）</p></li><li><p>MVC：View（接收用户输入操作）Controller（业务逻辑处理）Model（数据持久化）View（结果返回给View）</p></li><li><p>MVP：Controller中替换Persenter，完全切View和Model之间联系（脱离页面进行单元测试）</p></li><li><p>MVVM：数据模型数据双向绑定</p></li></ul><p><strong>面向服务的SOA架构</strong>（设计方式）</p><p>SOA：将应用程序的不同功能单元（服务）通过这些服务之间定义良好的接口契约联系起来，<strong>独立于实现服务的硬件平台</strong>，操作系统和编程语言。</p><p><strong>目标：关键目标是企业IT资产重用最大化</strong></p><p><strong>服务类型</strong></p><ol><li>连接服务：完成服务接入，服务间通信和交互，提供安全，可靠，高性能的访问能力保障（ESB）</li><li>协作访问：使用通信代理，Web服务代理方式实现通信交互</li><li>业务服务：</li><li>业务流程服务：提供流程驱动，服务调用，事务管理功能</li><li>交互服务</li><li>信息服务：提供数据访问和资源访问</li></ol><p><strong>SOA中关键技术</strong></p><ul><li>发现服务：UDDI，DISCO</li><li>描述服务： WSDL，XML Schema</li><li>消息格式：SOAP，REST</li><li>编码格式：XML，JSON</li><li>传输协议：HTTP，TCP/IP，SMTP</li></ul><p>UDDI：统一描述，发现和集成（用于服务注册和查找）</p><p>WSDL：服务描述语言，描述Web服务的接口与查操作功能</p><p>SOAP：对象访问协议，建立Web服务和服务请求之间的通信（类对象传输协议）</p><p>**企业服务总线ESB：**连接服务节点，具有消息转化，解释，路由功能，使不同的访问相互连通（总线拓扑结构）</p><ol><li>提供透明性消息路由和寻址服务</li><li>提供服务注册和命名管理</li><li>提供多消息传递</li><li>提供多种传输协议</li><li><strong>提供多种数据格式及相互装换</strong></li><li>提供日志和监控功能</li></ol><p><strong>微服务</strong>：SOA技术延深，强调业务彻底组件化和服务化，微服务包含完整的业务功能，开放一种或多种接口为其他服务使用，并且可以包含一个自己私有的数据库</p><ul><li><p>技术异构性：每个服务是一个相对独立的个体，可以通过自身业务需求的技术实现（混合多种编程语言，开发框架，及存储技术）</p></li><li><p>扩展：面向单个微服务进行集群扩展</p></li><li><p>简化部署：每个微服务独立，单个服务问题不会导致整个系统故障</p></li><li><p>可维护性：系统开放很多接口供外部使用，当业务发生变化时，可以使用灰度发布方式构建应用</p></li><li><p>分布式系统复杂性：性能，可靠性都会影响</p></li><li><p>最终一致性：一致性实现较难</p></li><li><p>运维成本：每个服务都要独立的配置，部署，监控，日志收集</p></li></ul><p>**驱动架构ABSD：**侧重于业务，质量和功能需求的组合驱动架构设计</p><ul><li>ABSD方法：设计活动可以从项目总体功能框架明确开始</li><li>ABSD基础：基础功能分解，选择架构风格实现质量和业务需求，软件模板使用</li></ul><p><strong>软件架构的演化和维护</strong></p><p>软件架构的定义包含<strong>组件，连接件，约束</strong>三大要素。这三者之间的添加，修改和删除就是软件架构演化和维护</p><h2 id="应用系统簇与构件系统" tabindex="-1"><a class="header-anchor" href="#应用系统簇与构件系统"><span><strong>应用系统簇与构件系统</strong></span></a></h2><p>特定领域软件架构DSSA</p><ul><li><p>以一个特定问题领域为对象，形成由领域参考模型，参考需求，参考架构组成的开发基础架构，其目标是支持一个特定领域中多个应用生成</p><p><img src="'+e+'" alt="image-20230929115416626"></p></li></ul><p><strong>过程模型</strong></p><p><img src="'+g+'" alt="image-20230929120416451"></p><p><img src="'+a+'" alt="image-20230929120431623"></p><h2 id="分布式系统开发" tabindex="-1"><a class="header-anchor" href="#分布式系统开发"><span><strong>分布式系统开发</strong></span></a></h2><p>基于实例协作：对远程实例有较大控制权，小范围连接采用代理方式</p><p>基于服务的协作：只能调用远程对象的接口方法，无法创建或销毁对象，跨平台连接</p><p>逻辑层设计</p><ol><li>表示层：用户界面实现</li><li>表示逻辑层：产生数据处理的任务</li><li>应用：支持业务规则和应用逻辑处理过程</li><li>数据处理：数据查询逻辑，存储过程</li><li>数据层</li></ol><h2 id="系统质量属性与架构评估" tabindex="-1"><a class="header-anchor" href="#系统质量属性与架构评估"><span><strong>系统质量属性与架构评估</strong></span></a></h2><p>系统质量开发阶段属性：易理解，可扩展，可重用，可测试，可维护，可移植</p><p>系统质量运行阶段属性：性能，安全，可伸缩，互操作性，可靠，可用，鲁棒</p><p><strong>软件架构质量属性</strong></p><p><img src="'+u+'" alt="image-20230929095436895"></p><ul><li>性能：系统响应能力（响应时间，吞吐量）。通过增加计算资源，减少计算开销，引入并发机制，采用资源淘汰、调度策略提升</li><li>可靠性：意外或使用错误情况下维持系统功能特性（MTTR：平均维修时间，MTBF：平均故障间隔时间，MTTF：平均故障时间，MTTA：平均确认时间）。检测策略：心跳，Ping/Echo，冗余，选举</li><li>可用性：系统能够正常运行时间比例</li><li>安全性：阻止非授权用户使用系统。设计策略：入侵检测，用户日志，用户授权，追踪审计</li><li>可修改：系统变更能力强。设计策略：接口-实现类，抽象，内部信息封装</li><li>互操作性：与其他系统，架构集成能力</li></ul><p><strong>系统架构评估</strong></p><p>评估方式</p><ol><li><p>问卷调查（检查表）</p></li><li><p>基于度量方式：设定一些性能指标</p></li><li><p>基于场景方式：根据现场系统进行测试评估</p></li></ol><p><strong>评估方法</strong></p><ul><li><strong>ATAM：架构权衡分析法</strong></li></ul><p><img src="'+c+'" alt="image-20230929113349132"></p><ul><li><strong>SAAM：软件架构评估</strong></li></ul><p>主要输入：问题描述，需求说明，架构描述</p><p>分析过程：场景开发，框架描述，单个场景评估，场景交互，总体评估（多个相互作用）</p><p><img src="'+h+'" alt="image-20230929113625498"></p><ul><li>CBAM：成本效益分析法</li></ul><h2 id="中间件技术" tabindex="-1"><a class="header-anchor" href="#中间件技术"><span><strong>中间件技术</strong></span></a></h2><p>中间件：在分布式系统环境下操作系统与应用程序之间软件（侧重于网络通信功能）、其目的时使其开发应用程序更容易，提供一些列程序抽象，解耦程序依赖</p><p><strong>中间件分类</strong></p><ol><li>数据库访问中间件：JDBC，ODBC</li><li>远程过程调用：RPC</li><li>面向消息中间件MOM：利用高效可靠的消息传递机制进行与平台无关的数据通信</li><li>事务中间件TPM</li></ol><p><strong>典型应用架构</strong></p><ul><li>J2EE：采用多层分布式应用程序模型 <ol><li>客户端层</li><li>web层/服务层：Java Servlet或JSP技术，处理与响应客户端请求</li><li>EJB层：业务代码逻辑</li><li>信息系统层：数据库系统，文件系统</li></ol></li><li>.NET</li></ul>',117)]))}const D=i(d,[["render",m]]),C=JSON.parse('{"path":"/docs/Computer/Computer/6_Framework/3-Framework.html","title":"系统工程","lang":"en-US","frontmatter":{"title":"系统工程","date":"2025/07/04"},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"系统运行与软件维护","slug":"系统运行与软件维护","link":"#系统运行与软件维护","children":[]},{"level":2,"title":"系统配置与性能评价","slug":"系统配置与性能评价","link":"#系统配置与性能评价","children":[]},{"level":2,"title":"系统安全","slug":"系统安全","link":"#系统安全","children":[]},{"level":2,"title":"系统架构设计","slug":"系统架构设计","link":"#系统架构设计","children":[]},{"level":2,"title":"应用系统簇与构件系统","slug":"应用系统簇与构件系统","link":"#应用系统簇与构件系统","children":[]},{"level":2,"title":"分布式系统开发","slug":"分布式系统开发","link":"#分布式系统开发","children":[]},{"level":2,"title":"系统质量属性与架构评估","slug":"系统质量属性与架构评估","link":"#系统质量属性与架构评估","children":[]},{"level":2,"title":"中间件技术","slug":"中间件技术","link":"#中间件技术","children":[]}],"filePathRelative":"docs/Computer/Computer/6_Framework/3-Framework.md","git":{"createdTime":1751621258000,"updatedTime":1751621258000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{D as comp,C as data};
