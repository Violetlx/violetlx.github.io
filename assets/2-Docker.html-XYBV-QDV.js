import{_ as p,c as i,b as t,a as n,d as e,e as l,r as o,o as r}from"./app-C7pp65Rl.js";const c="/assets/image-20250310112644517-BHPAtvCy.png",d="/assets/image-20250310113425445-B-zWOzFe.png",m="/assets/image-20250310121227399-Cojy9LIb.png",u="/assets/image-20250310121234015-DypbmTlx.png",k="/assets/image-20250310121238823-l7GxO_pb.png",v="/assets/image-20250310121245982-BbwGAKa6.png",b="/assets/image-20250310121431739-BbOH6Zr5.png",g="/assets/image-20250310121645822-Bow5WrLM.png",f="/assets/image-20250310121655103-DPMGMTES.png",h="/assets/image-20250310121728686-BzrrYnTF.png",y={},x={href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"left"}},_={href:"https://docs.docker.com/engine/reference/commandline/pull/",target:"_blank",rel:"noopener noreferrer"},w={style:{"text-align":"left"}},j={href:"https://docs.docker.com/engine/reference/commandline/push/",target:"_blank",rel:"noopener noreferrer"},D={style:{"text-align":"left"}},N={href:"https://docs.docker.com/engine/reference/commandline/images/",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"left"}},I={href:"https://docs.docker.com/engine/reference/commandline/rmi/",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"left"}},E={href:"https://docs.docker.com/engine/reference/commandline/run/",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"left"}},T={href:"https://docs.docker.com/engine/reference/commandline/stop/",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"left"}},O={href:"https://docs.docker.com/engine/reference/commandline/start/",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"left"}},R={href:"https://docs.docker.com/engine/reference/commandline/restart/",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"left"}},J={href:"https://docs.docker.com/engine/reference/commandline/rm/",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"left"}},B={href:"https://docs.docker.com/engine/reference/commandline/ps/",target:"_blank",rel:"noopener noreferrer"},Q={style:{"text-align":"left"}},U={href:"https://docs.docker.com/engine/reference/commandline/logs/",target:"_blank",rel:"noopener noreferrer"},Y={style:{"text-align":"left"}},G={href:"https://docs.docker.com/engine/reference/commandline/exec/",target:"_blank",rel:"noopener noreferrer"},z={style:{"text-align":"left"}},H={href:"https://docs.docker.com/engine/reference/commandline/save/",target:"_blank",rel:"noopener noreferrer"},K={style:{"text-align":"left"}},Z={href:"https://docs.docker.com/engine/reference/commandline/load/",target:"_blank",rel:"noopener noreferrer"},$={style:{"text-align":"left"}},F={href:"https://docs.docker.com/engine/reference/commandline/inspect/",target:"_blank",rel:"noopener noreferrer"},W={style:{"text-align":"left"}},X={href:"https://docs.docker.com/engine/reference/commandline/volume_create/",target:"_blank",rel:"noopener noreferrer"},ss={style:{"text-align":"left"}},ns={href:"https://docs.docker.com/engine/reference/commandline/volume_ls/",target:"_blank",rel:"noopener noreferrer"},as={style:{"text-align":"left"}},es={href:"https://docs.docker.com/engine/reference/commandline/volume_prune/",target:"_blank",rel:"noopener noreferrer"},ls={style:{"text-align":"left"}},ts={href:"https://docs.docker.com/engine/reference/commandline/volume_inspect/",target:"_blank",rel:"noopener noreferrer"},ps={style:{"text-align":"left"}},is={href:"https://docs.docker.com/engine/reference/commandline/volume_prune/",target:"_blank",rel:"noopener noreferrer"},os={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://docs.docker.com/engine/reference/commandline/network/",target:"_blank",rel:"noopener noreferrer"},cs={style:{"text-align":"left"}},ds={href:"https://docs.docker.com/engine/reference/commandline/network_create/",target:"_blank",rel:"noopener noreferrer"},ms={style:{"text-align":"left"}},us={href:"https://docs.docker.com/engine/reference/commandline/network_ls/",target:"_blank",rel:"noopener noreferrer"},ks={style:{"text-align":"left"}},vs={href:"https://docs.docker.com/engine/reference/commandline/network_rm/",target:"_blank",rel:"noopener noreferrer"},bs={style:{"text-align":"left"}},gs={href:"https://docs.docker.com/engine/reference/commandline/network_prune/",target:"_blank",rel:"noopener noreferrer"},fs={style:{"text-align":"left"}},hs={href:"https://docs.docker.com/engine/reference/commandline/network_connect/",target:"_blank",rel:"noopener noreferrer"},ys={style:{"text-align":"left"}},xs={href:"https://docs.docker.com/engine/reference/commandline/network_disconnect/",target:"_blank",rel:"noopener noreferrer"},qs={style:{"text-align":"left"}},_s={href:"https://docs.docker.com/engine/reference/commandline/network_inspect/",target:"_blank",rel:"noopener noreferrer"};function ws(js,s){const a=o("ExternalLinkIcon");return r(),i("div",null,[s[87]||(s[87]=t('<p><img src="https://bizhi1.com/wp-content/uploads/2025/01/jinx-arcane-pink-gradient-background-desktop-wallpaper-4k.jpg" alt="金克斯 粉色渐变背景桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 常见命令</p><p>2 数据卷</p><p>3 镜像</p><p>4 网络</p></div><h2 id="_1-常见命令" tabindex="-1"><a class="header-anchor" href="#_1-常见命令"><span>1 常见命令</span></a></h2><p>接下来，我们一起来学习Docker使用的一些基础知识，为将来部署项目打下基础。具体用法可以参考Docker官方文档：</p>',4)),n("p",null,[n("a",x,[s[0]||(s[0]=e("https://docs.docker.com/")),l(a)])]),s[88]||(s[88]=n("h3",{id:"_1-1-命令介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-命令介绍"},[n("span",null,"1.1 命令介绍")])],-1)),s[89]||(s[89]=n("p",null,"其中，比较常见的命令有：",-1)),n("table",null,[s[46]||(s[46]=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},[n("strong",null,"命令")]),n("th",{style:{"text-align":"left"}},[n("strong",null,"说明")]),n("th",{style:{"text-align":"left"}},[n("strong",null,"文档地址")])])],-1)),n("tbody",null,[n("tr",null,[s[2]||(s[2]=n("td",{style:{"text-align":"left"}},"docker pull",-1)),s[3]||(s[3]=n("td",{style:{"text-align":"left"}},"拉取镜像",-1)),n("td",q,[n("a",_,[s[1]||(s[1]=e("docker pull")),l(a)])])]),n("tr",null,[s[5]||(s[5]=n("td",{style:{"text-align":"left"}},"docker push",-1)),s[6]||(s[6]=n("td",{style:{"text-align":"left"}},"推送镜像到DockerRegistry",-1)),n("td",w,[n("a",j,[s[4]||(s[4]=e("docker push")),l(a)])])]),n("tr",null,[s[8]||(s[8]=n("td",{style:{"text-align":"left"}},"docker images",-1)),s[9]||(s[9]=n("td",{style:{"text-align":"left"}},"查看本地镜像",-1)),n("td",D,[n("a",N,[s[7]||(s[7]=e("docker images")),l(a)])])]),n("tr",null,[s[11]||(s[11]=n("td",{style:{"text-align":"left"}},"docker rmi",-1)),s[12]||(s[12]=n("td",{style:{"text-align":"left"}},"删除本地镜像",-1)),n("td",S,[n("a",I,[s[10]||(s[10]=e("docker rmi")),l(a)])])]),n("tr",null,[s[14]||(s[14]=n("td",{style:{"text-align":"left"}},"docker run",-1)),s[15]||(s[15]=n("td",{style:{"text-align":"left"}},"创建并运行容器（不能重复创建）",-1)),n("td",M,[n("a",E,[s[13]||(s[13]=e("docker run")),l(a)])])]),n("tr",null,[s[17]||(s[17]=n("td",{style:{"text-align":"left"}},"docker stop",-1)),s[18]||(s[18]=n("td",{style:{"text-align":"left"}},"停止指定容器",-1)),n("td",P,[n("a",T,[s[16]||(s[16]=e("docker stop")),l(a)])])]),n("tr",null,[s[20]||(s[20]=n("td",{style:{"text-align":"left"}},"docker start",-1)),s[21]||(s[21]=n("td",{style:{"text-align":"left"}},"启动指定容器",-1)),n("td",L,[n("a",O,[s[19]||(s[19]=e("docker start")),l(a)])])]),n("tr",null,[s[23]||(s[23]=n("td",{style:{"text-align":"left"}},"docker restart",-1)),s[24]||(s[24]=n("td",{style:{"text-align":"left"}},"重新启动容器",-1)),n("td",A,[n("a",R,[s[22]||(s[22]=e("docker restart")),l(a)])])]),n("tr",null,[s[26]||(s[26]=n("td",{style:{"text-align":"left"}},"docker rm",-1)),s[27]||(s[27]=n("td",{style:{"text-align":"left"}},"删除指定容器",-1)),n("td",V,[n("a",J,[s[25]||(s[25]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[29]||(s[29]=n("td",{style:{"text-align":"left"}},"docker ps",-1)),s[30]||(s[30]=n("td",{style:{"text-align":"left"}},"查看容器",-1)),n("td",C,[n("a",B,[s[28]||(s[28]=e("docker ps")),l(a)])])]),n("tr",null,[s[32]||(s[32]=n("td",{style:{"text-align":"left"}},"docker logs",-1)),s[33]||(s[33]=n("td",{style:{"text-align":"left"}},"查看容器运行日志",-1)),n("td",Q,[n("a",U,[s[31]||(s[31]=e("docker logs")),l(a)])])]),n("tr",null,[s[35]||(s[35]=n("td",{style:{"text-align":"left"}},"docker exec",-1)),s[36]||(s[36]=n("td",{style:{"text-align":"left"}},"进入容器",-1)),n("td",Y,[n("a",G,[s[34]||(s[34]=e("docker exec")),l(a)])])]),n("tr",null,[s[38]||(s[38]=n("td",{style:{"text-align":"left"}},"docker save",-1)),s[39]||(s[39]=n("td",{style:{"text-align":"left"}},"保存镜像到本地压缩文件",-1)),n("td",z,[n("a",H,[s[37]||(s[37]=e("docker save")),l(a)])])]),n("tr",null,[s[41]||(s[41]=n("td",{style:{"text-align":"left"}},"docker load",-1)),s[42]||(s[42]=n("td",{style:{"text-align":"left"}},"加载本地压缩文件到镜像",-1)),n("td",K,[n("a",Z,[s[40]||(s[40]=e("docker load")),l(a)])])]),n("tr",null,[s[44]||(s[44]=n("td",{style:{"text-align":"left"}},"docker inspect",-1)),s[45]||(s[45]=n("td",{style:{"text-align":"left"}},"查看容器详细信息",-1)),n("td",$,[n("a",F,[s[43]||(s[43]=e("docker inspect")),l(a)])])])])]),s[90]||(s[90]=t('<p>用一副图来表示这些命令的关系：</p><p><img src="'+c+`" alt="image-20250310112644517"></p><p>补充：</p><p>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token comment"># Docker开机自启</span></span>
<span class="line">systemctl enable docker</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Docker容器开机自启</span></span>
<span class="line">docker update <span class="token operator">--</span>restart=always <span class="token punctuation">[</span>容器名<span class="token operator">/</span>容器id<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-演示" tabindex="-1"><a class="header-anchor" href="#_1-2-演示"><span>1.2 演示</span></a></h3><p>教学环节说明：我们以Nginx为例给大家演示上述命令。</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第2步，拉取Nginx镜像</span></span>
<span class="line">docker pull nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第3步，查看镜像</span></span>
<span class="line">docker images</span>
<span class="line"><span class="token comment"># 结果如下：</span></span>
<span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span>
<span class="line">nginx        latest    605c77e624dd   16 months ago   141MB</span>
<span class="line">mysql        latest    3218b38490ce   17 months ago   516MB</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第4步，创建并允许Nginx容器</span></span>
<span class="line">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name nginx <span class="token operator">-</span>p 80:80 nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第5步，查看运行中容器</span></span>
<span class="line">docker <span class="token function">ps</span></span>
<span class="line"><span class="token comment"># 也可以加格式化方式访问，格式会更加清爽</span></span>
<span class="line">docker <span class="token function">ps</span> <span class="token operator">--</span>format <span class="token string">&quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第6步，访问网页，地址：http://虚拟机地址</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第7步，停止容器</span></span>
<span class="line">docker stop nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第8步，查看所有容器</span></span>
<span class="line">docker <span class="token function">ps</span> <span class="token operator">-</span>a <span class="token operator">--</span>format <span class="token string">&quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第9步，再次启动nginx容器</span></span>
<span class="line">docker <span class="token function">start</span> nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第10步，再次查看容器</span></span>
<span class="line">docker <span class="token function">ps</span> <span class="token operator">--</span>format <span class="token string">&quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第11步，查看容器详细信息</span></span>
<span class="line">docker inspect nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第12步，进入容器,查看容器内目录</span></span>
<span class="line">docker exec <span class="token operator">-</span>it nginx bash</span>
<span class="line"><span class="token comment"># 或者，可以进入MySQL</span></span>
<span class="line">docker exec <span class="token operator">-</span>it mysql mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第13步，删除容器</span></span>
<span class="line">docker <span class="token function">rm</span> nginx</span>
<span class="line"><span class="token comment"># 发现无法删除，因为容器运行中，强制删除容器</span></span>
<span class="line">docker <span class="token function">rm</span> <span class="token operator">-</span>f nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-命令别名" tabindex="-1"><a class="header-anchor" href="#_1-3-命令别名"><span>1.3 命令别名</span></a></h3><p>给常用Docker命令起别名，方便我们访问：</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token comment"># 修改/root/.bashrc文件</span></span>
<span class="line">vi <span class="token operator">/</span>root/<span class="token punctuation">.</span>bashrc</span>
<span class="line">内容如下：</span>
<span class="line"><span class="token comment"># .bashrc</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># User specific aliases and functions</span></span>
<span class="line"></span>
<span class="line">alias <span class="token function">rm</span>=<span class="token string">&#39;rm -i&#39;</span></span>
<span class="line">alias <span class="token function">cp</span>=<span class="token string">&#39;cp -i&#39;</span></span>
<span class="line">alias <span class="token function">mv</span>=<span class="token string">&#39;mv -i&#39;</span></span>
<span class="line">alias dps=<span class="token string">&#39;docker ps --format &quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;&#39;</span></span>
<span class="line">alias dis=<span class="token string">&#39;docker images&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Source global definitions</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>f <span class="token operator">/</span>etc/bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> then</span>
<span class="line">        <span class="token punctuation">.</span> <span class="token operator">/</span>etc/bashrc</span>
<span class="line">fi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，执行命令使别名生效</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line">source <span class="token operator">/</span>root/<span class="token punctuation">.</span>bashrc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，试试看新的命令吧。</p><h2 id="_2-数据卷" tabindex="-1"><a class="header-anchor" href="#_2-数据卷"><span>2 数据卷</span></a></h2><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p><ul><li>如果要升级MySQL版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li><li>MySQL、Nginx容器运行后，如果我要修改其中的某些配置该怎么办？</li><li>我想要让Nginx代理我的静态资源怎么办？</li></ul><p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器</strong> <strong>解耦</strong>。</p><h3 id="_2-1-什么是数据卷" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是数据卷"><span>2.1 什么是数据卷</span></a></h3><p><strong>数据卷（volume）<strong>是一个虚拟目录，是</strong>容器内目录</strong>与<strong>宿主机</strong> <strong>目录</strong> 之间映射的桥梁。</p><p>以Nginx为例，我们知道Nginx中有两个关键的目录：</p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p><p>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><p><img src="`+d+'" alt="image-20250310113425445"></p><p>在上图中：</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li></ul><p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p><strong>小提示</strong>：</p><p><code>/var/lib/docker/volumes</code>这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<code>/数据卷名/_data</code>。</p><p><strong>为什么不让容器目录直接指向<strong><strong>宿主机</strong></strong>目录呢</strong>？</p><ul><li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li><li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li></ul><p>不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也<strong>允许让容器直接与<strong><strong>宿主机</strong></strong>目录挂载而不使用数据卷</strong>，具体参考2.2.3小节。</p></div><h3 id="_2-2-数据卷命令" tabindex="-1"><a class="header-anchor" href="#_2-2-数据卷命令"><span>2.2 数据卷命令</span></a></h3><p>数据卷的相关命令有：</p>',31)),n("table",null,[s[62]||(s[62]=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},[n("strong",null,"命令")]),n("th",{style:{"text-align":"left"}},[n("strong",null,"说明")]),n("th",{style:{"text-align":"left"}},[n("strong",null,"文档地址")])])],-1)),n("tbody",null,[n("tr",null,[s[48]||(s[48]=n("td",{style:{"text-align":"left"}},"docker volume create",-1)),s[49]||(s[49]=n("td",{style:{"text-align":"left"}},"创建数据卷",-1)),n("td",W,[n("a",X,[s[47]||(s[47]=e("docker volume create")),l(a)])])]),n("tr",null,[s[51]||(s[51]=n("td",{style:{"text-align":"left"}},"docker volume ls",-1)),s[52]||(s[52]=n("td",{style:{"text-align":"left"}},"查看所有数据卷",-1)),n("td",ss,[n("a",ns,[s[50]||(s[50]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[54]||(s[54]=n("td",{style:{"text-align":"left"}},"docker volume rm",-1)),s[55]||(s[55]=n("td",{style:{"text-align":"left"}},"删除指定数据卷",-1)),n("td",as,[n("a",es,[s[53]||(s[53]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[57]||(s[57]=n("td",{style:{"text-align":"left"}},"docker volume inspect",-1)),s[58]||(s[58]=n("td",{style:{"text-align":"left"}},"查看某个数据卷的详情",-1)),n("td",ls,[n("a",ts,[s[56]||(s[56]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[60]||(s[60]=n("td",{style:{"text-align":"left"}},"docker volume prune",-1)),s[61]||(s[61]=n("td",{style:{"text-align":"left"}},"清除数据卷",-1)),n("td",ps,[n("a",is,[s[59]||(s[59]=e("docker volume prune")),l(a)])])])])]),s[91]||(s[91]=t(`<p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><p>教学<strong>演示环节</strong>：演示一下nginx的html目录挂载</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span>
<span class="line">docker run <span class="token operator">-</span>d <span class="token operator">--</span>name nginx <span class="token operator">-</span>p 80:80 <span class="token operator">-</span>v html:<span class="token operator">/</span>usr/share/nginx/html nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2.然后查看数据卷</span></span>
<span class="line">docker volume <span class="token function">ls</span></span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">DRIVER    VOLUME NAME</span>
<span class="line">local     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</span>
<span class="line">local     html</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3.查看数据卷详情</span></span>
<span class="line">docker volume inspect html</span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line"><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;CreatedAt&quot;</span>: <span class="token string">&quot;2024-05-17T19:57:08+08:00&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Driver&quot;</span>: <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Labels&quot;</span>: null<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Mountpoint&quot;</span>: <span class="token string">&quot;/var/lib/docker/volumes/html/_data&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Name&quot;</span>: <span class="token string">&quot;html&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Options&quot;</span>: null<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Scope&quot;</span>: <span class="token string">&quot;local&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span>
<span class="line">ll <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/volumes/html/_data</span>
<span class="line"><span class="token comment"># 可以看到与nginx的html目录内容一样，结果如下：</span></span>
<span class="line">总用量 8</span>
<span class="line"><span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span><span class="token punctuation">.</span> 1 root root 497 12月 28 2021 50x<span class="token punctuation">.</span>html</span>
<span class="line"><span class="token operator">-</span>rw-r-<span class="token operator">-</span>r-<span class="token operator">-</span><span class="token punctuation">.</span> 1 root root 615 12月 28 2021 index<span class="token punctuation">.</span>html</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5.进入该目录，并随意修改index.html内容</span></span>
<span class="line">cd <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/volumes/html/_data</span>
<span class="line">vi index<span class="token punctuation">.</span>html</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6.打开页面，查看效果</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span>
<span class="line">docker exec <span class="token operator">-</span>it nginx bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>教学<strong>演示环节</strong>：演示一下MySQL的匿名数据卷</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell" data-title="powershell"><pre><code><span class="line"><span class="token comment"># 1.查看MySQL容器详细信息</span></span>
<span class="line">docker inspect mysql</span>
<span class="line"><span class="token comment"># 关注其中.Config.Volumes部分和.Mounts部分</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们关注两部分内容，第一是<code>.Config.Volumes</code>部分：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;Config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ... 略</span></span>
<span class="line">    <span class="token property">&quot;Volumes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;/var/lib/mysql&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ... 略</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p><p>然后，我们再看结果中的<code>.Mounts</code>部分：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;Mounts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;volume&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;Source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;Destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/mysql&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span>     </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，其中有几个关键属性：</p><ul><li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串hash值。</li><li>Source：宿主机目录</li><li>Destination : 容器内的目录</li></ul><p>上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p><p>接下来，可以查看该目录下的MySQL的data文件：</p><div class="language-Bash line-numbers-mode" data-highlighter="prismjs" data-ext="Bash" data-title="Bash"><pre><code><span class="line">ls -l /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考DockerHub对应的页面</p><h3 id="_2-3-挂载本地目录或文件" tabindex="-1"><a class="header-anchor" href="#_2-3-挂载本地目录或文件"><span>2.3 挂载本地目录或文件</span></a></h3><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 挂载本地目录</span></span>
<span class="line"><span class="token parameter variable">-v</span> 本地目录:容器内目录</span>
<span class="line"><span class="token comment"># 挂载本地文件</span></span>
<span class="line"><span class="token parameter variable">-v</span> 本地文件:容器内文件</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token parameter variable">-v</span> mysql:/var/lib/mysql <span class="token comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span>
<span class="line"><span class="token parameter variable">-v</span> ./mysql:/var/lib/mysql <span class="token comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>教学演示</strong>，删除并重新创建mysql容器，并完成本地目录挂载：</p><ul><li>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</li><li>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录（初始化的SQL脚本目录）</li><li>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录（这个是MySQL配置文件目录）</li></ul><p>在课前资料中已经准备好了mysql的<code>init</code>目录和<code>conf</code>目录：</p><p><img src="`+m+'" alt="image-20250310121227399"></p><p>以及对应的初始化SQL脚本和配置文件：</p><p><img src="'+u+'" alt="image-20250310121234015"></p><p><img src="'+k+'" alt="image-20250310121238823"></p><p>其中，hm.cnf主要是配置了MySQL的默认编码，改为utf8mb4；而hmall.sql则是后面我们要用到的黑马商城项目的初始化SQL脚本。</p><p>我们直接将整个mysql目录上传至虚拟机的<code>/root</code>目录下：</p><p><img src="'+v+`" alt="image-20250310121245982"></p><p>接下来，我们演示本地目录挂载：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1.删除原来的MySQL容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mysql</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2.进入root目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> ~</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3.创建并运行新mysql容器，挂载本地目录</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> ./mysql/data:/var/lib/mysql <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> ./mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> ./mysql/init:/docker-entrypoint-initdb.d <span class="token punctuation">\\</span></span>
<span class="line">  mysql</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span></span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-l</span> mysql</span>
<span class="line"><span class="token comment"># 结果：</span></span>
<span class="line">总用量 <span class="token number">4</span></span>
<span class="line">drwxr-xr-x. <span class="token number">2</span> root    root   <span class="token number">20</span> <span class="token number">5</span>月  <span class="token number">19</span> <span class="token number">15</span>:11 conf</span>
<span class="line">drwxr-xr-x. <span class="token number">7</span> polkitd root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">19</span> <span class="token number">15</span>:11 data</span>
<span class="line">drwxr-xr-x. <span class="token number">2</span> root    root   <span class="token number">23</span> <span class="token number">5</span>月  <span class="token number">19</span> <span class="token number">15</span>:11 init</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-l</span> data</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5.查看MySQL容器内数据</span></span>
<span class="line"><span class="token comment"># 5.1.进入MySQL</span></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p123</span></span>
<span class="line"><span class="token comment"># 5.2.查看编码表</span></span>
<span class="line">show variables like <span class="token string">&quot;%char%&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment"># 5.3.结果，发现编码是utf8mb4没有问题</span></span>
<span class="line">+--------------------------+--------------------------------+</span>
<span class="line"><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> Value                          <span class="token operator">|</span></span>
<span class="line">+--------------------------+--------------------------------+</span>
<span class="line"><span class="token operator">|</span> character_set_client     <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> character_set_connection <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> character_set_database   <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> binary                         <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> character_set_results    <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> character_set_server     <span class="token operator">|</span> utf8mb4                        <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8mb3                        <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> /usr/share/mysql-8.0/charsets/ <span class="token operator">|</span></span>
<span class="line">+--------------------------+--------------------------------+</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6.查看数据</span></span>
<span class="line"><span class="token comment"># 6.1.查看数据库</span></span>
<span class="line">show databases<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment"># 结果，hmall是黑马商城数据库</span></span>
<span class="line">+--------------------+</span>
<span class="line"><span class="token operator">|</span> Database           <span class="token operator">|</span></span>
<span class="line">+--------------------+</span>
<span class="line"><span class="token operator">|</span> hmall              <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> information_schema <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> mysql              <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> performance_schema <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> sys                <span class="token operator">|</span></span>
<span class="line">+--------------------+</span>
<span class="line"><span class="token number">5</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 6.2.切换到hmall数据库</span></span>
<span class="line">use hmall<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment"># 6.3.查看表</span></span>
<span class="line">show tables<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment"># 结果：</span></span>
<span class="line">+-----------------+</span>
<span class="line"><span class="token operator">|</span> Tables_in_hmall <span class="token operator">|</span></span>
<span class="line">+-----------------+</span>
<span class="line"><span class="token operator">|</span> address         <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> cart            <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> item            <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> order           <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> order_detail    <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> order_logistics <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> pay_order       <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> user            <span class="token operator">|</span></span>
<span class="line">+-----------------+</span>
<span class="line"><span class="token comment"># 6.4.查看address表数据</span></span>
<span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span>
<span class="line"><span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> user_id <span class="token operator">|</span> province <span class="token operator">|</span> city   <span class="token operator">|</span> town     <span class="token operator">|</span> mobile      <span class="token operator">|</span> street        <span class="token operator">|</span> contact   <span class="token operator">|</span> is_default <span class="token operator">|</span> notes <span class="token operator">|</span></span>
<span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span>
<span class="line"><span class="token operator">|</span> <span class="token number">59</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span> 北京   <span class="token operator">|</span> 朝阳区    <span class="token operator">|</span> <span class="token number">13900112222</span> <span class="token operator">|</span> 金燕龙办公楼   <span class="token operator">|</span> 李佳诚    <span class="token operator">|</span> <span class="token number">0</span>          <span class="token operator">|</span> NULL  <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> <span class="token number">60</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span> 北京   <span class="token operator">|</span> 朝阳区    <span class="token operator">|</span> <span class="token number">13700221122</span> <span class="token operator">|</span> 修正大厦       <span class="token operator">|</span> 李佳红    <span class="token operator">|</span> <span class="token number">0</span>          <span class="token operator">|</span> NULL  <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> <span class="token number">61</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> 上海     <span class="token operator">|</span> 上海   <span class="token operator">|</span> 浦东新区  <span class="token operator">|</span> <span class="token number">13301212233</span> <span class="token operator">|</span> 航头镇航头路   <span class="token operator">|</span> 李佳星    <span class="token operator">|</span> <span class="token number">1</span>          <span class="token operator">|</span> NULL  <span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> <span class="token number">63</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> 广东     <span class="token operator">|</span> 佛山   <span class="token operator">|</span> 永春      <span class="token operator">|</span> <span class="token number">13301212233</span> <span class="token operator">|</span> 永春武馆       <span class="token operator">|</span> 李晓龙    <span class="token operator">|</span> <span class="token number">0</span>          <span class="token operator">|</span> NULL  <span class="token operator">|</span></span>
<span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span>
<span class="line"><span class="token number">4</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-镜像" tabindex="-1"><a class="header-anchor" href="#_3-镜像"><span>3 镜像</span></a></h2><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个Java项目，把它打包为一个镜像该怎么做呢？</p><h3 id="_3-1-镜像结构" tabindex="-1"><a class="header-anchor" href="#_3-1-镜像结构"><span>3.1 镜像结构</span></a></h3><p>要想自己构建镜像，必须先了解镜像的结构。</p><p>之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>举个例子，我们要从0部署一个Java应用，大概流程是这样：</p><ul><li>准备一个linux服务（CentOS或者Ubuntu均可）</li><li>安装并配置JDK</li><li>上传Jar包</li><li>运行jar包</li></ul><p>那因此，我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为<strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p>例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：</p><p><img src="`+b+'" alt="image-20250310121431739"></p><h3 id="_3-2-dockerfile" tabindex="-1"><a class="header-anchor" href="#_3-2-dockerfile"><span>3.2 Dockerfile</span></a></h3><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。</p><p>而这种记录镜像结构的文件就称为<strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p>',51)),n("p",null,[n("a",os,[s[63]||(s[63]=e("https://docs.docker.com/engine/reference/builder/")),l(a)])]),s[92]||(s[92]=t(`<p>其中的语法比较多，比较常用的有：</p><table><thead><tr><th style="text-align:left;"><strong>指令</strong></th><th style="text-align:left;"><strong>说明</strong></th><th style="text-align:left;"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>FROM</strong></td><td style="text-align:left;">指定基础镜像</td><td style="text-align:left;"><code>FROM centos:6</code></td></tr><tr><td style="text-align:left;"><strong>ENV</strong></td><td style="text-align:left;">设置环境变量，可在后面指令使用</td><td style="text-align:left;"><code>ENV key value</code></td></tr><tr><td style="text-align:left;"><strong>COPY</strong></td><td style="text-align:left;">拷贝本地文件到镜像的指定目录</td><td style="text-align:left;"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td style="text-align:left;"><strong>RUN</strong></td><td style="text-align:left;">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:left;"><code>RUN yum install gcc</code></td></tr><tr><td style="text-align:left;"><strong>EXPOSE</strong></td><td style="text-align:left;">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:left;">EXPOSE 8080</td></tr><tr><td style="text-align:left;"><strong>ENTRYPOINT</strong></td><td style="text-align:left;">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:left;">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 指定基础镜像</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span></span>
<span class="line"><span class="token comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span></span>
<span class="line"><span class="token comment"># 拷贝jdk和java项目的包</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span></span>
<span class="line"><span class="token comment"># 设定时区</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span></span>
<span class="line"><span class="token comment"># 安装JDK</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> <span class="token operator">\\</span></span>
<span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz <span class="token operator">\\</span></span>
<span class="line"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span>
<span class="line"><span class="token comment"># 配置环境变量</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span></span>
<span class="line"><span class="token comment"># 指定项目监听的端口</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span></span>
<span class="line"><span class="token comment"># 入口，java项目的启动命令</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;/app.jar&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同学们思考一下：以后我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，是不是很麻烦。</p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 基础镜像</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> openjdk:11.0-jre-buster</span></span>
<span class="line"><span class="token comment"># 设定时区</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span></span>
<span class="line"><span class="token comment"># 拷贝jar包</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> docker-demo.jar /app.jar</span></span>
<span class="line"><span class="token comment"># 入口</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;/app.jar&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是简单多了。</p><h3 id="_3-3-构建镜像" tabindex="-1"><a class="header-anchor" href="#_3-3-构建镜像"><span>3.3 构建镜像</span></a></h3><p>当Dockerfile文件写好以后，就可以利用命令来构建镜像了。</p><p>在课前资料中，我们准备好了一个demo项目及对应的Dockerfile：</p><p><img src="`+g+'" alt="image-20250310121645822"></p><p>首先，我们将课前资料提供的<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：</p><p><img src="'+f+`" alt="image-20250310121655103"></p><p>然后，执行命令，构建镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入镜像目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> /root/demo</span>
<span class="line"><span class="token comment"># 开始构建</span></span>
<span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> docker-demo:1.0 <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令说明：</p><ul><li><code>docker build </code>: 就是构建一个docker镜像</li><li><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</li><li><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录： <ul><li><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 直接指定Dockerfile目录</span></span>
<span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> docker-demo:1.0 /root/demo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>结果：</p><p><img src="`+h+`" alt="image-20250310121728686"></p><p>查看镜像列表：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看镜像列表：</span></span>
<span class="line"><span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span>
<span class="line">docker-demo   <span class="token number">1.0</span>       d6ab0b9e64b9   <span class="token number">27</span> minutes ago   327MB</span>
<span class="line">nginx         latest    605c77e624dd   <span class="token number">16</span> months ago    141MB</span>
<span class="line">mysql         latest    3218b38490ce   <span class="token number">17</span> months ago    516MB</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后尝试运行该镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1.创建并运行容器</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> <span class="token function">dd</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 docker-demo:1.0</span>
<span class="line"><span class="token comment"># 2.查看容器</span></span>
<span class="line">dps</span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES</span>
<span class="line">78a000447b49   docker-demo:1.0   <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8090-<span class="token operator">&gt;</span><span class="token number">8090</span>/tcp              Up <span class="token number">2</span> seconds   <span class="token function">dd</span></span>
<span class="line">f63cfead8502   mysql             <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, :::3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp   Up <span class="token number">2</span> hours     mysql</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3.访问</span></span>
<span class="line"><span class="token function">curl</span> localhost:8080/hello/count</span>
<span class="line"><span class="token comment"># 结果：</span></span>
<span class="line"><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>欢迎访问黑马商城, 这是您第1次访问<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-网络" tabindex="-1"><a class="header-anchor" href="#_4-网络"><span>4 网络</span></a></h2><p>上节课我们创建了一个Java项目的容器，而Java项目往往需要访问其它各种中间件，例如MySQL、Redis等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p><p>首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span>
<span class="line"><span class="token function">docker</span> inspect mysql</span>
<span class="line"><span class="token comment"># 也可以使用format过滤结果</span></span>
<span class="line"><span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&#39;{{range .NetworkSettings.Networks}}{{println .IPAddress}}{{end}}&#39;</span> mysql</span>
<span class="line"><span class="token comment"># 得到IP地址如下：</span></span>
<span class="line"><span class="token number">172.17</span>.0.2</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2.然后通过命令进入dd容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token function">dd</span> <span class="token function">bash</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3.在容器内，通过ping命令测试网络</span></span>
<span class="line"><span class="token function">ping</span> <span class="token number">172.17</span>.0.2</span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">PING <span class="token number">172.17</span>.0.2 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.</span>
<span class="line"><span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.053</span> ms</span>
<span class="line"><span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.059</span> ms</span>
<span class="line"><span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.058</span> ms</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现可以互联，没有问题。</p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：</p>`,31)),n("p",null,[n("a",rs,[s[64]||(s[64]=e("https://docs.docker.com/engine/reference/commandline/network/")),l(a)])]),s[93]||(s[93]=n("p",null,"常见命令有：",-1)),n("table",null,[s[86]||(s[86]=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},[n("strong",null,"命令")]),n("th",{style:{"text-align":"left"}},[n("strong",null,"说明")]),n("th",{style:{"text-align":"left"}},[n("strong",null,"文档地址")])])],-1)),n("tbody",null,[n("tr",null,[s[66]||(s[66]=n("td",{style:{"text-align":"left"}},"docker network create",-1)),s[67]||(s[67]=n("td",{style:{"text-align":"left"}},"创建一个网络",-1)),n("td",cs,[n("a",ds,[s[65]||(s[65]=e("docker network create")),l(a)])])]),n("tr",null,[s[69]||(s[69]=n("td",{style:{"text-align":"left"}},"docker network ls",-1)),s[70]||(s[70]=n("td",{style:{"text-align":"left"}},"查看所有网络",-1)),n("td",ms,[n("a",us,[s[68]||(s[68]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[72]||(s[72]=n("td",{style:{"text-align":"left"}},"docker network rm",-1)),s[73]||(s[73]=n("td",{style:{"text-align":"left"}},"删除指定网络",-1)),n("td",ks,[n("a",vs,[s[71]||(s[71]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[75]||(s[75]=n("td",{style:{"text-align":"left"}},"docker network prune",-1)),s[76]||(s[76]=n("td",{style:{"text-align":"left"}},"清除未使用的网络",-1)),n("td",bs,[n("a",gs,[s[74]||(s[74]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[78]||(s[78]=n("td",{style:{"text-align":"left"}},"docker network connect",-1)),s[79]||(s[79]=n("td",{style:{"text-align":"left"}},"使指定容器连接加入某网络",-1)),n("td",fs,[n("a",hs,[s[77]||(s[77]=e("docs.docker.com")),l(a)])])]),n("tr",null,[s[81]||(s[81]=n("td",{style:{"text-align":"left"}},"docker network disconnect",-1)),s[82]||(s[82]=n("td",{style:{"text-align":"left"}},"使指定容器连接离开某网络",-1)),n("td",ys,[n("a",xs,[s[80]||(s[80]=e("docker network disconnect")),l(a)])])]),n("tr",null,[s[84]||(s[84]=n("td",{style:{"text-align":"left"}},"docker network inspect",-1)),s[85]||(s[85]=n("td",{style:{"text-align":"left"}},"查看网络详细信息",-1)),n("td",qs,[n("a",_s,[s[83]||(s[83]=e("docker network inspect")),l(a)])])])])]),s[94]||(s[94]=t(`<p>教学演示：自定义网络</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1.首先通过命令创建一个网络</span></span>
<span class="line"><span class="token function">docker</span> network create hmall</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2.然后查看网络</span></span>
<span class="line"><span class="token function">docker</span> network <span class="token function">ls</span></span>
<span class="line"><span class="token comment"># 结果：</span></span>
<span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span>
<span class="line">639bc44d0a87   bridge    bridge    <span class="token builtin class-name">local</span></span>
<span class="line">403f16ec62a2   hmall     bridge    <span class="token builtin class-name">local</span></span>
<span class="line">0dc0f72a0fbb   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span></span>
<span class="line">cd8d3e8df47b   none      null      <span class="token builtin class-name">local</span></span>
<span class="line"><span class="token comment"># 其中，除了hmall以外，其它都是默认的网络</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span>
<span class="line"><span class="token comment"># 这样该网络内的其它容器可以用别名互相访问！</span></span>
<span class="line"><span class="token comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span>
<span class="line"><span class="token function">docker</span> network connect hmall mysql <span class="token parameter variable">--alias</span> db</span>
<span class="line"><span class="token comment"># 3.2.db容器，也就是我们的java项目</span></span>
<span class="line"><span class="token function">docker</span> network connect hmall <span class="token function">dd</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4.进入dd容器，尝试利用别名访问db</span></span>
<span class="line"><span class="token comment"># 4.1.进入容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token function">dd</span> <span class="token function">bash</span></span>
<span class="line"><span class="token comment"># 4.2.用db别名访问</span></span>
<span class="line"><span class="token function">ping</span> db</span>
<span class="line"><span class="token comment"># 结果</span></span>
<span class="line">PING db <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.</span>
<span class="line"><span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.070</span> ms</span>
<span class="line"><span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.056</span> ms</span>
<span class="line"><span class="token comment"># 4.3.用容器名访问</span></span>
<span class="line"><span class="token function">ping</span> mysql</span>
<span class="line"><span class="token comment"># 结果：</span></span>
<span class="line">PING mysql <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.</span>
<span class="line"><span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.044</span> ms</span>
<span class="line"><span class="token number">64</span> bytes from mysql.hmall <span class="token punctuation">(</span><span class="token number">172.18</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.054</span> ms</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，现在无需记住IP地址也可以实现容器互联了。</p><p><strong>总结</strong>：</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul>`,5))])}const Ns=p(y,[["render",ws]]),Ss=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day02_Docker/3_Docker/2-Docker.html","title":"Docker基础","lang":"en-US","frontmatter":{"title":"Docker基础","date":"2025/03/06"},"headers":[{"level":2,"title":"1 常见命令","slug":"_1-常见命令","link":"#_1-常见命令","children":[{"level":3,"title":"1.1 命令介绍","slug":"_1-1-命令介绍","link":"#_1-1-命令介绍","children":[]},{"level":3,"title":"1.2 演示","slug":"_1-2-演示","link":"#_1-2-演示","children":[]},{"level":3,"title":"1.3 命令别名","slug":"_1-3-命令别名","link":"#_1-3-命令别名","children":[]}]},{"level":2,"title":"2 数据卷","slug":"_2-数据卷","link":"#_2-数据卷","children":[{"level":3,"title":"2.1 什么是数据卷","slug":"_2-1-什么是数据卷","link":"#_2-1-什么是数据卷","children":[]},{"level":3,"title":"2.2 数据卷命令","slug":"_2-2-数据卷命令","link":"#_2-2-数据卷命令","children":[]},{"level":3,"title":"2.3 挂载本地目录或文件","slug":"_2-3-挂载本地目录或文件","link":"#_2-3-挂载本地目录或文件","children":[]}]},{"level":2,"title":"3 镜像","slug":"_3-镜像","link":"#_3-镜像","children":[{"level":3,"title":"3.1 镜像结构","slug":"_3-1-镜像结构","link":"#_3-1-镜像结构","children":[]},{"level":3,"title":"3.2 Dockerfile","slug":"_3-2-dockerfile","link":"#_3-2-dockerfile","children":[]},{"level":3,"title":"3.3 构建镜像","slug":"_3-3-构建镜像","link":"#_3-3-构建镜像","children":[]}]},{"level":2,"title":"4 网络","slug":"_4-网络","link":"#_4-网络","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day02_Docker/3_Docker/2-Docker.md","git":{"createdTime":1741251281000,"updatedTime":1741654623000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{Ns as comp,Ss as data};
