import{_ as l,c,b as p,a as s,d as a,e,r as o,o as i}from"./app-D-Gd2pB2.js";const u={},k={href:"http://calvin1978.blogcn.com/articles/uuid.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/srikanth-lingala/zip4j",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/srikanth-lingala/zip4j",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const t=o("ExternalLinkIcon");return i(),c("div",null,[n[11]||(n[11]=p(`<p><img src="https://bizhi1.com/wp-content/uploads/2024/10/smoky-sunset-at-emerald-lake-te-5120x2880-1.jpg" alt="翡翠湖烟雾缭绕的日落"></p><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 概述</p><p>② 字符串工具-StrUtil</p><p>③ 16进制工具-HexUtil</p><p>④ Escape工具-EscapeUtil</p><p>⑤ Hash算法-HashUtil</p><p>⑥ URL工具-URLUtil</p><p>⑦ XML工具-XmlUtil</p><p>⑧ 对象工具-ObjectUtil</p><p>⑨ 反射工具-ReflectUtil</p><p>⑩ 泛型类型工具-TypeUtil</p><p>⑪ 分页工具-PageUtil</p><p>⑫ 剪贴板工具-ClipboardUtil</p><p>⑬ 类工具-ClassUtil</p><p>⑭ 枚举工具-EnumUtil</p><p>⑮ 命令行工具-RuntimeUtil</p><p>⑯ 数字工具-NumberUtil</p><p>⑰ 数组工具-ArrayUtil</p><p>⑱ 随机工具-RandomUtil</p><p>⑲ 唯一ID工具-IdUtil</p><p>⑳ 压缩工具-ZipUtil</p><p>㉑ 引用工具-ReferenceUtil</p><p>㉒ 正则工具-ReUtil</p><p>㉓ 身份证工具-IdcardUtil</p><p>㉔ 信息脱敏工具-DesensitizedUtil</p><p>㉕ 社会信用代码工具-CreditCodeUtil</p><p>㉖ SPI加载工具-ServiceLoaderUtil</p><p>㉗ 字符编码工具-CharseUtil</p><p>㉘ 类加载工具-ClassLoaderUtil</p></div><h2 id="_18-随机工具-randomutil" tabindex="-1"><a class="header-anchor" href="#_18-随机工具-randomutil"><span>⑱ 随机工具-RandomUtil</span></a></h2><h3 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明"><span>1 说明</span></a></h3><p><code>RandomUtil</code> 主要针对 JDK 中 <code>Random</code> 对象做封装，严格来说，Java 产生的随机数都是伪随机数，因此 Hutool 封装后产生的随机结果也是伪随机结果，不过这种随即结果对于大多数情况已经够用。</p><h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2 使用</span></a></h3><ul><li><p><code>RandomUtil.randomInt</code> 获得指定范围内的随机数</p><p>例如我们想生成一个 [10,100] 的随机数，则：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>RandomUtil.randomBytes</code> 随机 bytes，一般用于密码或者 salt 生成</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>RandomUtil.randomEle</code> 随机获得列表中的元素</p></li><li><p><code>RandomUtil.randomEleSet</code> 随机获得列表中的一定量的不重复元素，返回 LinkedHashSet</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomEleSet</span><span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>RandomUtil.randomString</code> 获得一个随机的字符串（只包含数字和字符）</p></li><li><p><code>RandomUtil.randomNumbers</code> 获得一个只包含数字的字符串</p></li><li><p><code>RandomUtil.weightRandom</code> 权重随机生成器，传入带权重的对象，然后根据权重随机获取对象</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * RandomUtil使用</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//RandomUtil.randomInt</span></span>
<span class="line">        <span class="token keyword">int</span> randomInt <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--randomInt==&gt;&quot;</span><span class="token operator">+</span>randomInt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//最大</span></span>
<span class="line">        <span class="token keyword">int</span> randomInt1 <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--randomInt1==&gt;&quot;</span><span class="token operator">+</span>randomInt1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//最大最小</span></span>
<span class="line">        <span class="token keyword">int</span> randomInt2 <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--randomInt2==&gt;&quot;</span><span class="token operator">+</span>randomInt2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//RandomUtil.randomInts 随机排列[0,10)</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInts</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--ints==&gt;&quot;</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//RandomUtil.randomBytes 随机 bytes，一般用于密码或者 salt 生成</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--bytes==&gt;&quot;</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//RandomUtil.randomEle 随机获得列表中的元素</span></span>
<span class="line">        <span class="token class-name">String</span> randomEle <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomEle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--randomEle==&gt;&quot;</span><span class="token operator">+</span>randomEle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//RandomUtil.randomEleSet 随机获得列表中的一定量的不重复元素，返回 LinkedHashSet</span></span>
<span class="line">        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomEleSet</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--set==&gt;&quot;</span><span class="token operator">+</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//RandomUtil.randomNumbers 获得一个只包含数字的字符串</span></span>
<span class="line">        <span class="token class-name">String</span> randomNumbers <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomNumbers</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--randomNumbers==&gt;&quot;</span><span class="token operator">+</span>randomNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//RandomUtil.weightRandom 权重随机生成器，传入带权重的对象，</span></span>
<span class="line">        <span class="token comment">//然后根据权重随机获取对象(权重只是概率比较大，不是百分百)</span></span>
<span class="line">        <span class="token class-name">WeightRandom<span class="token punctuation">.</span>WeightObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> weightObjs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeightRandom<span class="token punctuation">.</span>WeightObj</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        weightObjs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeightRandom<span class="token punctuation">.</span>WeightObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        weightObjs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeightRandom<span class="token punctuation">.</span>WeightObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        weightObjs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeightRandom<span class="token punctuation">.</span>WeightObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 根据权重随机获取一个对象</span></span>
<span class="line">        <span class="token class-name">WeightRandom</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringWeightRandom <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">weightRandom</span><span class="token punctuation">(</span>weightObjs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 输出结果</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;随机获取的对象是: &quot;</span> <span class="token operator">+</span> stringWeightRandom<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-唯一id工具-idutil" tabindex="-1"><a class="header-anchor" href="#_19-唯一id工具-idutil"><span>⑲ 唯一ID工具-IdUtil</span></a></h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1 介绍</span></a></h3><p>在分布式环境中，唯一 ID 生成应用十分广泛，生成方法也多种多样，Hutool 针对一些常用生成策略做了简单封装。</p><p>唯一 ID 生成器的工具类，涵盖了：</p><ul><li>UUID</li><li>ObjectId（MongoDB）</li><li>Snowflake（Twitter）</li></ul><h3 id="_2-使用-1" tabindex="-1"><a class="header-anchor" href="#_2-使用-1"><span>2 使用</span></a></h3><p><strong>① UUID</strong></p><p>UUID 全称通用唯一识别码（<code>universally unique identifier</code>），JDK 通过 java.util.UUID 提供了 Leach-Salz 变体的封装。在 Hutool 中，生成一个 UUID 字符串方法如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//生成的UUID是带-的字符串，类似于：a5c8a5e8-df2b-4706-bea4-08d0939410e3</span></span>
<span class="line"><span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//生成的是不带-的字符串，类似于：b17f24ff026d40949c85a24f4f375d42</span></span>
<span class="line"><span class="token class-name">String</span> simpleUUID <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>说明 Hutool 重写 <code>java.util.UUID</code> 的逻辑，对应类为 <code>cn.hutool.core.lang.UUID</code> ，使生成不带 - 的 UUID 字符串不再需要做字符替换，性能提升一倍左右。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1.UUID</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//生成的UUID是带-的字符串，类似于：a5c8a5e8-df2b-4706-bea4-08d0939410e3</span></span>
<span class="line">        <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--uuid==&gt;&quot;</span><span class="token operator">+</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//生成的是不带-的字符串，类似于：b17f24ff026d40949c85a24f4f375d42</span></span>
<span class="line">        <span class="token class-name">String</span> simpleUUID <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--simpleUUID==&gt;&quot;</span><span class="token operator">+</span>simpleUUID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> fastSimpleUUID <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">fastSimpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--fastSimpleUUID==&gt;&quot;</span><span class="token operator">+</span>fastSimpleUUID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> fastUUID <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">fastUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1--fastUUID==&gt;&quot;</span><span class="token operator">+</span>fastUUID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test1--uuid==&gt;4873489f-e80c-4a44-8c21-c5fc34c264f2</span></span>
<span class="line">        <span class="token comment">//test1--simpleUUID==&gt;876ed5dc11d044aebb0547a3321ed298</span></span>
<span class="line">        <span class="token comment">//test1--fastSimpleUUID==&gt;caea9cc54e914790b7b438c505cd7b78</span></span>
<span class="line">        <span class="token comment">//test1--fastUUID==&gt;7864d747-3579-44e4-a4b9-53cf85afcbb9</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② ObjectId</strong></p>`,21)),s("p",null,[n[1]||(n[1]=a("ObjectId 是 MongoDB 数据库的一种唯一 ID 生成策略，是 UUID version1 的变种，详细介绍可见：")),s("a",k,[n[0]||(n[0]=a("服务化框架－分布式Unique ID的生成方法一览")),e(t)])]),n[12]||(n[12]=p(`<p>Hutool 针对此封装了 cn..hutool.core.lang.ObjectId，快捷创建方法为：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//生成类似：5b9e306a4df4f8c54a39fb0c</span></span>
<span class="line"><span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token class-name">ObjectId</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//方法2：从Hutool-4.1.14开始提供</span></span>
<span class="line"><span class="token class-name">String</span> id2 <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">objectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 2.ObjectId</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> objectId <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">objectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--objectId==&gt;&quot;</span><span class="token operator">+</span>objectId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//生成类似：5b9e306a4df4f8c54a39fb0c</span></span>
<span class="line">        <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token class-name">ObjectId</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--id==&gt;&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//方法2：从Hutool-4.1.14开始提供</span></span>
<span class="line">        <span class="token class-name">String</span> id2 <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">objectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2--id2==&gt;&quot;</span><span class="token operator">+</span>id2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test2--objectId==&gt;677f468a502e7e99744a5a9c</span></span>
<span class="line">        <span class="token comment">//test2--id==&gt;677f468a502e7e99744a5a9d</span></span>
<span class="line">        <span class="token comment">//test2--id2==&gt;677f468a502e7e99744a5a9e</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ Snowflake</strong></p><p>分布式系统中，有一些需要使用全局唯一 ID 的场景，有些时候我们希望能使用一种简单一些的 ID，并且希望 ID 能够按照时间有序生成。Twitter 的 Snowflake 算法就是这种生成器。</p><p>使用方法如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//参数1为终端ID</span></span>
<span class="line"><span class="token comment">//参数2为数据中心ID</span></span>
<span class="line"><span class="token class-name">Snowflake</span> snowflake <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflake</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> id <span class="token operator">=</span> snowflake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//简单使用</span></span>
<span class="line"><span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflakeNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflakeNextIdStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意 <code>IdUtil.createSnowflake</code> 每次调用会创建一个新的 Snowflake 对象，不同的 Snowflake 对象创建的 ID 可能会有重复，因此请自行维护对象为单例，或者使用 <code>IdUtil.getSnowflake</code> 使用全局单例对象。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 3.Snowflake</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//参数1为终端ID</span></span>
<span class="line">        <span class="token comment">//参数2为数据中心ID</span></span>
<span class="line">        <span class="token class-name">Snowflake</span> snowflake <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflake</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">long</span> id <span class="token operator">=</span> snowflake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--id==&gt;&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//简单使用</span></span>
<span class="line">        <span class="token keyword">long</span> id1 <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflakeNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> id2 <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflakeNextIdStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--id1==&gt;&quot;</span><span class="token operator">+</span>id1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3--id2==&gt;&quot;</span><span class="token operator">+</span>id2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//test3--id==&gt;1877200198204264448</span></span>
<span class="line">        <span class="token comment">//test3--id1==&gt;1877200198425829376</span></span>
<span class="line">        <span class="token comment">//test3--id2==&gt;1877200198425829377</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-压缩工具-ziputil" tabindex="-1"><a class="header-anchor" href="#_20-压缩工具-ziputil"><span>⑳ 压缩工具-ZipUtil</span></a></h2><h3 id="_1-由来" tabindex="-1"><a class="header-anchor" href="#_1-由来"><span>1 由来</span></a></h3>`,11)),s("p",null,[n[3]||(n[3]=a("在 Java 中，对文件、文件夹打包，压缩是一件比较繁琐的事情，我们常常引入 ")),s("a",r,[n[2]||(n[2]=a("Zip4j")),e(t)]),n[4]||(n[4]=a(" 进行此类操作。但是很多时候，JDK 中的 zip 报就可满足我们大部分需求。ZipUtil 就是针对 java.util.zip 做工具化封装，是压缩解压操作可以一个方法搞定，并且自动处理文件和目录的问题，不需要用户判断，压缩后的文件也会自动创建文件，自动创建父目录，大大简化的压缩解压的复杂度。"))]),n[13]||(n[13]=p(`<h3 id="_2-方法" tabindex="-1"><a class="header-anchor" href="#_2-方法"><span>2 方法</span></a></h3><p><strong>① Zip</strong></p><ol><li><p>压缩</p><p>ZipUtil.zip 方法提供一系列的重载方法，满足不同需求的压缩需求，这包括：</p><ul><li><p>打包到当前目录（可用打包文件，也可以打包文件夹，根据路径自动判断）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//将aaa目录下的所有文件目录打包到d:/aaa.zip</span></span>
<span class="line"><span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token string">&quot;d:/aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>指定打包后保存的目的地，自动判断目标是文件还是文件夹</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//将aaa目录下的所有文件目录打包到d:/bbb/目录下的aaa.zip文件中</span></span>
<span class="line"><span class="token comment">//此处第二个参数必须为文件，不能为目录</span></span>
<span class="line"><span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token string">&quot;d:/aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;d:/bbb/aaa.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//将aaa目录下的所有文件目录打包到d:/bbb/目录下的ccc.zip文件中</span></span>
<span class="line"><span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token string">&quot;d:/aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;d:/bbb/ccc.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可选是否包含被打包的目录。比如我们打包一个照片的目录，打开这个压缩包有可能是带目录的，也有可能是打开压缩包直接看到的是文件。zip 方法增加一个 boolean 参数可选这两种模式。以应对众多需求。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//将aaa目录以及其目录下的所有文件目录打包到d:/bbb/目录下的ccc.zip文件中</span></span>
<span class="line"><span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token string">&quot;d:/aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;d:/bbb/ccc.zip&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多文件或目录压缩。可以选择多个文件或目录一起打成 zip 包。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;d:/bbb/ccc.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;d:/test1/file1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;d:/test1/file2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;d:/test2/file1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;d:/test2/file2.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>解压</p><p><code>ZipUtil.unzip</code> 解压。同样提供几个重载，满足不同需求。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//将test.zip解压到e:\\\\aaa目录下，返回解压到的目录</span></span>
<span class="line">file unzip <span class="token operator">=</span> <span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">unzip</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\aaa\\\\test.zip&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;e:\\\\aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>② Gzip</strong></p><p>Gzip 是网页传输中广泛使用的压缩方式，Hutool 同样提供其工具方法简化其过程。</p><p><code>ZipUtil.gzip</code> 压缩，可压缩字符串，也可压缩文件 <code>ZipUtil.unGzip</code> 解压Gzip文件</p><p><strong>③ Zlib</strong></p><p>ZipUtil.zlib 压缩，可压缩字符串，也可压缩文件 <code>ZipUtil.unZlib</code> 解压 zlib 文件</p><blockquote><p>注意 ZipUtil 默认情况下使用系统编码，也就是说：</p><ol><li>如果你在命令下运行，则调用系统编码（一般Windows下为GBK、Linux下为UTF-8）</li><li>如果你在IDE（如Eclipse）下运行代码，则读取的是当前项目的编码（详细请查阅 IDE 设置，我们项目默认都是 UTF-8 编码，因此解压和压缩都是用这个编码）</li></ol></blockquote><p><strong>④ 常见问题</strong></p>`,10)),s("ol",null,[n[10]||(n[10]=p(`<li><p>解压时报 <code>java.lang.IllegalArgumentException:MALFORMED</code> 错误</p><p>基本是因为编码问题，Hutool 默认使用 UTF-8 编码，自定义为其他编码即可（一般为 GBK）。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//将test.zip解压到e:\\\\aaa目录下，返回解压到的目录</span></span>
<span class="line"><span class="token class-name">File</span> unzip <span class="token operator">=</span> <span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">unzip</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\aaa\\\\test.zip&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;e:\\\\aaa&quot;</span><span class="token punctuation">,</span><span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">CHARSET_GBK</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1)),s("li",null,[n[8]||(n[8]=s("p",null,"压缩并添加密码",-1)),s("p",null,[n[6]||(n[6]=a("Hutool 或 JDK 的 zip 工具并不支持添加密码，可以考虑使用 ")),s("a",d,[n[5]||(n[5]=a("Zip4j (opens new window)")),e(t)]),n[7]||(n[7]=a("完成，以下代码来自Zip4j官网。"))]),n[9]||(n[9]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ZipParameters</span> zipParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">zipParameters<span class="token punctuation">.</span><span class="token function">setEncryptFiles</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">zipParameters<span class="token punctuation">.</span><span class="token function">setEncryptionMethod</span><span class="token punctuation">(</span><span class="token class-name">EncryptionMethod</span><span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Below line is optional. AES 256 is used by default. You can override it to use AES 128. AES 192 is supported only for extracting.</span></span>
<span class="line">zipParameters<span class="token punctuation">.</span><span class="token function">setAesKeyStrength</span><span class="token punctuation">(</span><span class="token class-name">AesKeyStrength</span><span class="token punctuation">.</span><span class="token constant">KEY_STRENGTH_256</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> filesToAdd <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;somefile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;someotherfile&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">ZipFile</span> zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipFile</span><span class="token punctuation">(</span><span class="token string">&quot;filename.zip&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">zipFile<span class="token punctuation">.</span><span class="token function">addFiles</span><span class="token punctuation">(</span>filesToAdd<span class="token punctuation">,</span> zipParameters<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])]),n[14]||(n[14]=p(`<h2 id="_21-引用工具-referenceutil" tabindex="-1"><a class="header-anchor" href="#_21-引用工具-referenceutil"><span>㉑ 引用工具-ReferenceUtil</span></a></h2><h3 id="_1-介绍-1" tabindex="-1"><a class="header-anchor" href="#_1-介绍-1"><span>1 介绍</span></a></h3><p>引用工具类，主要针对 Reference 工具化封装</p><p>主要封装包括：</p><ol><li><code>SoftReference</code> 软引用，在GC报告内存不足时会被GC回收</li><li><code>WeakReference</code> 弱引用，在GC时发现弱引用会回收其对象</li><li><code>PhantomReference</code> 虚引用，在GC时发现虚引用对象，会将<code>PhantomReference</code>插入<code>ReferenceQueue</code>。此时对象未被真正回收，要等到<code>ReferenceQueue</code>被真正处理后才会被回收。</li></ol><h3 id="_2-方法-1" tabindex="-1"><a class="header-anchor" href="#_2-方法-1"><span>2 方法</span></a></h3><p><strong>① create</strong></p><p>根据类型枚举创建引用</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 1.创建不同类型的引用对象</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> strongReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Strong Reference&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建软引用</span></span>
<span class="line">        <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> softReference <span class="token operator">=</span> <span class="token class-name">ReferenceUtil</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">ReferenceUtil<span class="token punctuation">.</span>ReferenceType</span><span class="token punctuation">.</span><span class="token constant">SOFT</span><span class="token punctuation">,</span> strongReference<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;软引用内容: &quot;</span> <span class="token operator">+</span> softReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建弱引用</span></span>
<span class="line">        <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> weakReference <span class="token operator">=</span> <span class="token class-name">ReferenceUtil</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">ReferenceUtil<span class="token punctuation">.</span>ReferenceType</span><span class="token punctuation">.</span><span class="token constant">WEAK</span><span class="token punctuation">,</span> strongReference<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;弱引用内容: &quot;</span> <span class="token operator">+</span> weakReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建虚引用</span></span>
<span class="line">        <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> phantomReference <span class="token operator">=</span> <span class="token class-name">ReferenceUtil</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">ReferenceUtil<span class="token punctuation">.</span>ReferenceType</span><span class="token punctuation">.</span><span class="token constant">PHANTOM</span><span class="token punctuation">,</span> strongReference<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;虚引用内容: &quot;</span> <span class="token operator">+</span> phantomReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//结果：</span></span>
<span class="line">        <span class="token comment">//软引用内容: Strong Reference</span></span>
<span class="line">        <span class="token comment">//弱引用内容: Strong Reference</span></span>
<span class="line">        <span class="token comment">//虚引用内容: null</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>create(ReferenceType type, T referent)</code>：根据指定的引用类型和被引用对象创建引用对象。<code>ReferenceType</code> 是枚举类型，表示引用类型。 <ul><li><code>type</code>：引用类型枚举，包括 <code>SOFT</code>（软引用）、<code>WEAK</code>（弱引用）、<code>PHANTOM</code>（虚引用）。</li><li><code>referent</code>：被引用的对象。</li></ul></li><li><code>create(ReferenceType type, T referent, ReferenceQueue&lt;? super T&gt; queue)</code>：创建带有引用队列的引用对象，适用于 <code>PHANTOM</code> 类型。</li></ul><p><strong>作用：</strong> 该方法可以根据需求创建不同类型的引用对象，用于内存敏感的场景。</p><p><strong>实际开发场景：</strong> 在缓存机制中，使用软引用和弱引用可以避免内存泄漏，同时也能在内存不足时自动释放对象。</p>`,12))])}const g=l(u,[["render",m],["__file","9-Hutool_Core.html.vue"]]),f=JSON.parse('{"path":"/docs/Java/Hutool/2_Hutool_Core/9-Hutool_Core.html","title":"Hutool-Core核心（九）","lang":"en-US","frontmatter":{"title":"Hutool-Core核心（九）","date":"2024/01/09"},"headers":[{"level":2,"title":"工具类","slug":"工具类","link":"#工具类","children":[]},{"level":2,"title":"⑱ 随机工具-RandomUtil","slug":"_18-随机工具-randomutil","link":"#_18-随机工具-randomutil","children":[{"level":3,"title":"1 说明","slug":"_1-说明","link":"#_1-说明","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用","link":"#_2-使用","children":[]}]},{"level":2,"title":"⑲ 唯一ID工具-IdUtil","slug":"_19-唯一id工具-idutil","link":"#_19-唯一id工具-idutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍","link":"#_1-介绍","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用-1","link":"#_2-使用-1","children":[]}]},{"level":2,"title":"⑳ 压缩工具-ZipUtil","slug":"_20-压缩工具-ziputil","link":"#_20-压缩工具-ziputil","children":[{"level":3,"title":"1 由来","slug":"_1-由来","link":"#_1-由来","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法","link":"#_2-方法","children":[]}]},{"level":2,"title":"㉑ 引用工具-ReferenceUtil","slug":"_21-引用工具-referenceutil","link":"#_21-引用工具-referenceutil","children":[{"level":3,"title":"1 介绍","slug":"_1-介绍-1","link":"#_1-介绍-1","children":[]},{"level":3,"title":"2 方法","slug":"_2-方法-1","link":"#_2-方法-1","children":[]}]}],"filePathRelative":"docs/Java/Hutool/2_Hutool_Core/9-Hutool_Core.md","git":{"createdTime":1737440609000,"updatedTime":1737440609000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{g as comp,f as data};
