import{_ as p,c as l,b as a,a as n,d as e,e as i,r as c,o}from"./app-0ki2vGVh.js";const u={},r={href:"https://gitee.com/dromara/hutool/blob/v5-master/hutool-core/src/main/java/cn/hutool/core/io/resource/Resource.java",target:"_blank",rel:"noopener noreferrer"};function d(k,s){const t=c("ExternalLinkIcon");return o(),l("div",null,[s[2]||(s[2]=a(`<p><img src="https://bizhi1.com/wp-content/uploads/2024/05/Inner_Mongolia_Winter_Grass_Tree_Snow_5K-Wallpaper_5120x2880-small.jpg" alt="内蒙古，冬季，草，树，雪，5K"></p><h2 id="io-流相关" tabindex="-1"><a class="header-anchor" href="#io-流相关"><span>IO 流相关</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>① 概述</p><p>② IO工具类-IoUtil</p><p>③ 文件工具类-FileUtil</p><p>④ 文件监听-WatchMonitor</p><p>⑤ 文件类型判断-FileTypeUtil</p><p>⑥ 文件</p><p>⑦ 资源</p></div><h2 id="_5-文件类型判断-filetypeutil" tabindex="-1"><a class="header-anchor" href="#_5-文件类型判断-filetypeutil"><span>⑤ 文件类型判断-FileTypeUtil</span></a></h2><h3 id="_1-由来" tabindex="-1"><a class="header-anchor" href="#_1-由来"><span>1 由来</span></a></h3><p>在文件上传时，有时候我们需要判断文件类型。但是又不能简单的通过扩展名来判断（防止恶意脚本等上传到服务器上），于是我们需要在服务端通过读取文件首部几个字节值来判断常用的文件类型。</p><h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2 使用</span></a></h3><p>这个工具类使用非常方便，通过调用 <code>FileTypeUtil.getType</code> 即可判断，这个方法同时提供众多重载方法，用于读取不同的文件和流。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;d:/test.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token class-name">FileTypeUtil</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//输出 jpg则说明确实为jpg文件</span></span>
<span class="line"><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-原理和局限性" tabindex="-1"><a class="header-anchor" href="#_3-原理和局限性"><span>3 原理和局限性</span></a></h3><p>这个类是通过读取文件流前 N 个 byte 值来判断文件类型，在类中我们通过 Map 形式将常用的文件类型做了映射，这些映射都是网络上搜集而来。也就是说，我们只能识别有限的几种文件类型。但是这些类型已经涵盖了常用的图片、音频、视频、office 文档类型，可以应对大部分的使用场景。</p><blockquote><p>对于某些文本格式的文件我们并不能通过首部 byte 判断其类型，比如 JSON ，这类文件本质上是文本文件，我们应该读取其文本内容，通过其语法判断类型。</p></blockquote><h3 id="_4-自定义类型" tabindex="-1"><a class="header-anchor" href="#_4-自定义类型"><span>4 自定义类型</span></a></h3><p>为了提高 <code>FileTypeUtil</code> 的扩展性，我们通过 <code>putFileType</code> 方法可以自定义文件类型。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">FileTypeUtil</span><span class="token punctuation">.</span><span class="token function">putFileType</span><span class="token punctuation">(</span><span class="token string">&quot;ffd8ffe000104a464946&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;new_jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一个参数是文件流前 N 个 byte 的 16 进制表示，我们可以读取自定义文件查看，选取一定长度即可（长度越长越精确），第二个参数就是文件类型，然后使用 <code>FileTypeUtil.getType</code> 即可。</p><blockquote><p>注意 xlsx、docx 本质上是各种 XML 打包为 zip 的结果，因此会被识别为 zip 格式。</p></blockquote><h2 id="_6-文件" tabindex="-1"><a class="header-anchor" href="#_6-文件"><span>⑥ 文件</span></a></h2><h3 id="_1-文件读取-filereader" tabindex="-1"><a class="header-anchor" href="#_1-文件读取-filereader"><span>1 文件读取-FileReader</span></a></h3><h3 id="i由来" tabindex="-1"><a class="header-anchor" href="#i由来"><span>Ⅰ由来</span></a></h3><p>在 <code>FileUtil</code> 中本来已经针对文件的读操作做了大量的静态封装，但是根据职责分离原则，我觉得有必要针对文件读取单独封装一个类，这样项目更加清晰。当然，使用 <code>FileUtil</code> 操作文件是最方便的。</p><h3 id="ii-使用" tabindex="-1"><a class="header-anchor" href="#ii-使用"><span>Ⅱ 使用</span></a></h3><p>在 JDK 中，同样有一个 FileReader 类，但是并不如想象的那样好用，于是 Hutool 便提供了更加便捷的 FileReader 类。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//默认UTF-8编码，可以在构造中传入第二个参数做为编码</span></span>
<span class="line"><span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;test.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> result <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FileReader 提供了以下方法快速读取文件内容：</p><ul><li><code>readBytes</code></li><li><code>readString</code></li><li><code>readLines</code></li></ul><p>同时，此类还提供了以下方法用于转换为流或者 <code>BufferedReader</code>：</p><ul><li><code>getReader</code></li><li><code>getInputStream</code></li></ul><h3 id="_2-文件写入-filewriter" tabindex="-1"><a class="header-anchor" href="#_2-文件写入-filewriter"><span>2 文件写入-FileWriter</span></a></h3><p>相应的，文件读取有了，自然有文件写入类，使用方式与 <code>FileReader</code> 也类似：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;test.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>写入文件分为追加模式和覆盖模式两类，追加模式可以用 <code>append</code> 方法，覆盖模式可以用 <code>write</code> 方法，同时也提供了一个 <code>write</code> 方法，第二个参数是可选覆盖模式。</p><p>同样，此类提供了：</p><ul><li><code>getOutputStream</code></li><li><code>getWrite</code></li><li><code>getPrintWriter</code></li></ul><p>这些方法用于转换为相应的类，提供更加灵活的写入操作。</p><h3 id="_3-文件追加-fileappender" tabindex="-1"><a class="header-anchor" href="#_3-文件追加-fileappender"><span>3 文件追加-FileAppender</span></a></h3><h3 id="i-由来" tabindex="-1"><a class="header-anchor" href="#i-由来"><span>Ⅰ 由来</span></a></h3><p>顾名思义，<code>FileAppender</code> 类表示文件追加器。此对象持有一个文件，在内存中积累一定量的数据后统一追加到文件，此类只有在写入文件时打开文件，并在写入结束后关闭之。因此此类不需要关闭。</p><p>在调用 append 方法后会缓存与内存，只有超过容量最后才会一次性写入文件，因此内存中随时有剩余未写入文件的内容，在最后必须调用 flush 方法将剩余内容刷入文件。</p><p>也就是说，这是一个支持缓存的文件内容追加器。此类主要用于类似于日志写出这类需求。</p><h3 id="ii-使用-1" tabindex="-1"><a class="header-anchor" href="#ii-使用-1"><span>Ⅱ 使用</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">FileAppender</span> appender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileAppender</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">appender<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">appender<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">appender<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">appender<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">appender<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-文件跟随-tailer" tabindex="-1"><a class="header-anchor" href="#_4-文件跟随-tailer"><span>4 文件跟随-Tailer</span></a></h3><h3 id="i由来-1" tabindex="-1"><a class="header-anchor" href="#i由来-1"><span>Ⅰ由来</span></a></h3><p>有时候我们要启动一个线程实时监控文件的变化，比如有新内容写到文件时，我们可以及时打印出来，这个功能非常类似于 Linux 下的 tail -f 命令。</p><h3 id="ii-使用-2" tabindex="-1"><a class="header-anchor" href="#ii-使用-2"><span>Ⅱ 使用</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Tailer</span> tailer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tailer</span><span class="token punctuation">(</span><span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;f:/test/test.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Tailer</span><span class="token punctuation">.</span><span class="token constant">CONSOLE_HANDLER</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tailer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>Tailer.CONSOLE_HANDLER</code> 表示文件新增内容默认输出到控制台。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 命令行打印的行处理器</span>
<span class="line"> * </span>
<span class="line"> * <span class="token keyword">@author</span> looly</span>
<span class="line"> * <span class="token keyword">@since</span> 4.5.2</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleLineHandler</span> <span class="token keyword">implements</span> <span class="token class-name">LineHandler</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以实现自己的 LineHandler 来处理每一行数据。</p><blockquote><p>注意 此方法会阻塞当前线程</p></blockquote><h3 id="_5-文件名工具-filenameutil" tabindex="-1"><a class="header-anchor" href="#_5-文件名工具-filenameutil"><span>5 文件名工具-FileNameUtil</span></a></h3><h3 id="i-由来-1" tabindex="-1"><a class="header-anchor" href="#i-由来-1"><span>Ⅰ 由来</span></a></h3><p>文件名操作工具类，主要针对文件名获取主文件名、扩展名等操作，同时针对 Windows 平台，清理无效字符。</p><p>此工具类在 <code>5.4.1</code> 之前是 <code>FileUtil</code> 的一部分，后单独剥离为 <code>FileNameUtil</code> 工具。</p><h3 id="ii-使用-3" tabindex="-1"><a class="header-anchor" href="#ii-使用-3"><span>Ⅱ 使用</span></a></h3><p>① 获取文件名</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;/opt/test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// test.txt</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">FileNameUtil</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 获取主文件名和扩展名</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;/opt/test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// &quot;test&quot;</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">FileNameUtil</span><span class="token punctuation">.</span><span class="token function">mainName</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// &quot;txt&quot;</span></span>
<span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">FileNameUtil</span><span class="token punctuation">.</span><span class="token function">extName</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，此处获取的扩展名不带 <code>.</code> 。<code>FileNameUtil.mainName</code> 和 <code>FileNameUtil.getPrefix</code> 等价，同理 <code>FileNameUtil.extName</code> 和 <code>FileNameUtil.getSuffix</code> 等价，保留两个方法用于适应不同用户的习惯。</p></blockquote><h2 id="_7-资源" tabindex="-1"><a class="header-anchor" href="#_7-资源"><span>⑦ 资源</span></a></h2><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1 概述</span></a></h3><h3 id="i-由来-2" tabindex="-1"><a class="header-anchor" href="#i-由来-2"><span>Ⅰ 由来</span></a></h3><p>资源（Resource）在 Hutool 中是一个广泛的概念，凡是存储数据的地方都可以归类到资源，那为何要提供一个如此抽象的接口呢？</p><p>在实际编码当中，我们需要读取一些数据，比如配置文件、文本内容、图片甚至是任何二进制流，为此我们要加入很多的重载方法，比如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等等如此，这样会造成整个代码变得非常冗余，查找 API 也很费尽。其实无论数据来自哪里，最终目的是，我们想从这些地方督导 byte[] 或者 String。那么，我们就可以抽象一个 Resource 接口，让代码变得简单：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> resource<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>用户只需传入 Resource 的实现即可。</p><h3 id="ii-定义" tabindex="-1"><a class="header-anchor" href="#ii-定义"><span>Ⅱ 定义</span></a></h3><p>常见的，我们需要从资源中获取流（getStream），获取 Reader 来读取文本（getReader），直接读取文本（readStr），于是定义如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">URL</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">InputStream</span> <span class="token function">getStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">BufferedReader</span> <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">readStr</span><span class="token punctuation">(</span><span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73)),n("blockquote",null,[n("p",null,[s[1]||(s[1]=e("关于 Resource 的详细定义见：")),n("a",r,[s[0]||(s[0]=e("Resource.java")),i(t)])])]),s[3]||(s[3]=a(`<p>定义了 Resource ，我们就可以预定一一些特别的资源：</p><ul><li><code>BytesResource</code> 从 byte[] 中读取资源</li><li><code>InputStreamResource</code> 从流中读取资源</li><li><code>UrlResource</code> 从 URL 中读取资源</li><li><code>FileResource</code> 从文件中读取资源</li><li><code>ClassPathResource</code> 从 classpath（src/resources 下）中读取资源</li><li><code>WebAppResource</code> 从 web root 中读取资源</li><li><code>MultiResource</code> 从多种资源中混合读取资源</li><li><code>MultiFileResource</code> 从多个文件中混合读取资源</li></ul><p>当然，我们还可以根据业务需要自己实现 Resource 接口，，完成自定义的资源读取。</p><blockquote><p>为了便于资源的查找，可以使用 <code>ResourceUtil</code> 快捷工具来获得我们需要的资源。</p></blockquote><h3 id="_2-资源工具-resourceutil" tabindex="-1"><a class="header-anchor" href="#_2-资源工具-resourceutil"><span>2 资源工具-ResourceUtil</span></a></h3><h3 id="i-介绍" tabindex="-1"><a class="header-anchor" href="#i-介绍"><span>Ⅰ 介绍</span></a></h3><p><code>ResourceUtil</code> 提供了资源快捷读取封装。</p><h3 id="ii-使用-4" tabindex="-1"><a class="header-anchor" href="#ii-使用-4"><span>Ⅱ 使用</span></a></h3><p>ResourceUtil 中最核心的方法是 getResourceObj ，此方法可以根据传入路径是否为绝对路径而返回不同的实现。比如路径是：file:/opt/test，或者 /opt/test</p><p>都会被当做绝对路径，此时调用 FileResource 来读取数据。如果不满足以上条件，默认用 <code>ClassPathResource</code> 读取 classpath 中的资源或者文件。</p><p>同样，此工具类还封装了 readBytes 和 readStr 用于快捷读取 bytes 和字符串。</p><p>举个例子，假设我们在 <code>classpath</code> 下放了一个 <code>test.xml</code> ，读取就变得非常简单：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">ResourceUtil</span><span class="token punctuation">.</span><span class="token function">readUtf8Str</span><span class="token punctuation">(</span><span class="token string">&quot;test.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>假设我们的文件存放 <code>src/resources/config</code> 目录下，则读取改为：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">ResourceUtil</span><span class="token punctuation">.</span><span class="token function">readUtf8Str</span><span class="token punctuation">(</span><span class="token string">&quot;config/test.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注意 在 IDEA 中，新加入文件到 <code>src/resources</code> 目录下，需要重新 import 项目，以便在编译时顺利把资源文件拷贝到 target 目录下。如果找不到文件，请去 target 目录下确认文件是否存在。</p></blockquote><h3 id="_3-classpath资源访问-classpathresource" tabindex="-1"><a class="header-anchor" href="#_3-classpath资源访问-classpathresource"><span>③ ClassPath资源访问-ClassPathResource</span></a></h3><h3 id="i-什么时-classpath" tabindex="-1"><a class="header-anchor" href="#i-什么时-classpath"><span>Ⅰ 什么时 ClassPath</span></a></h3><p>简单来说 ClassPath 就是查找 class 文件的路径，在 Tomcat 等容器下，ClassPath 一般是 <code>WEB-INF/classes</code> ，在普通 java 程序中，我们可以通过定义 -cp 或者 -classpath 参数来定义查找 class 文件的路径，这些路径就是 ClassPath 。</p><p>为了项目方便，我们定义的配置文件肯定不能用绝对路径，所以需要使用相对路径，这时候最好的办法就是把配置文件和 class 文件放在一起，便于查找。</p><h3 id="ii-由来" tabindex="-1"><a class="header-anchor" href="#ii-由来"><span>Ⅱ 由来</span></a></h3><p>在 Java 编码过程中，我们常常希望读取项目内的配置文件，按照 Maven 的习惯，这些文件一般放在项目的 src/main/resources 下，读取的时候使用：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;config.properties&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用当前类来获取资源其实就是使用当前类的类加载器获取资源，最后 openStream() 方法获取输入流来读取文件流。</p><h3 id="iii-封装" tabindex="-1"><a class="header-anchor" href="#iii-封装"><span>Ⅲ 封装</span></a></h3><p>面对这种复杂的读取操作，我们封装了 <code>ClassPathResource</code> 类简化这种资源的读取：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ClassPathResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;test.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Properties: {}&quot;</span><span class="token punctuation">,</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就大大简化了 ClassPath 中资源的获取。</p><blockquote><p>Hutool 提供针对 properties 的封装类 Props ，同时提供更加强大的配置文件 Setting 类，这两个类已经针对 ClassPath 做过相应封装，可以以更加便捷的方式读取配置文件。</p></blockquote>`,29))])}const v=p(u,[["render",d]]),m=JSON.parse('{"path":"/docs/Java/Hutool/2_Hutool_Core/5-Hutool_Core.html","title":"Hutool-Core核心（五）","lang":"en-US","frontmatter":{"title":"Hutool-Core核心（五）","date":"2024/12/20"},"headers":[{"level":2,"title":"IO 流相关","slug":"io-流相关","link":"#io-流相关","children":[]},{"level":2,"title":"⑤ 文件类型判断-FileTypeUtil","slug":"_5-文件类型判断-filetypeutil","link":"#_5-文件类型判断-filetypeutil","children":[{"level":3,"title":"1 由来","slug":"_1-由来","link":"#_1-由来","children":[]},{"level":3,"title":"2 使用","slug":"_2-使用","link":"#_2-使用","children":[]},{"level":3,"title":"3 原理和局限性","slug":"_3-原理和局限性","link":"#_3-原理和局限性","children":[]},{"level":3,"title":"4 自定义类型","slug":"_4-自定义类型","link":"#_4-自定义类型","children":[]}]},{"level":2,"title":"⑥ 文件","slug":"_6-文件","link":"#_6-文件","children":[{"level":3,"title":"1 文件读取-FileReader","slug":"_1-文件读取-filereader","link":"#_1-文件读取-filereader","children":[]},{"level":3,"title":"Ⅰ由来","slug":"i由来","link":"#i由来","children":[]},{"level":3,"title":"Ⅱ 使用","slug":"ii-使用","link":"#ii-使用","children":[]},{"level":3,"title":"2 文件写入-FileWriter","slug":"_2-文件写入-filewriter","link":"#_2-文件写入-filewriter","children":[]},{"level":3,"title":"3 文件追加-FileAppender","slug":"_3-文件追加-fileappender","link":"#_3-文件追加-fileappender","children":[]},{"level":3,"title":"Ⅰ 由来","slug":"i-由来","link":"#i-由来","children":[]},{"level":3,"title":"Ⅱ 使用","slug":"ii-使用-1","link":"#ii-使用-1","children":[]},{"level":3,"title":"4 文件跟随-Tailer","slug":"_4-文件跟随-tailer","link":"#_4-文件跟随-tailer","children":[]},{"level":3,"title":"Ⅰ由来","slug":"i由来-1","link":"#i由来-1","children":[]},{"level":3,"title":"Ⅱ 使用","slug":"ii-使用-2","link":"#ii-使用-2","children":[]},{"level":3,"title":"5 文件名工具-FileNameUtil","slug":"_5-文件名工具-filenameutil","link":"#_5-文件名工具-filenameutil","children":[]},{"level":3,"title":"Ⅰ 由来","slug":"i-由来-1","link":"#i-由来-1","children":[]},{"level":3,"title":"Ⅱ 使用","slug":"ii-使用-3","link":"#ii-使用-3","children":[]}]},{"level":2,"title":"⑦ 资源","slug":"_7-资源","link":"#_7-资源","children":[{"level":3,"title":"1 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":3,"title":"Ⅰ 由来","slug":"i-由来-2","link":"#i-由来-2","children":[]},{"level":3,"title":"Ⅱ 定义","slug":"ii-定义","link":"#ii-定义","children":[]},{"level":3,"title":"2 资源工具-ResourceUtil","slug":"_2-资源工具-resourceutil","link":"#_2-资源工具-resourceutil","children":[]},{"level":3,"title":"Ⅰ 介绍","slug":"i-介绍","link":"#i-介绍","children":[]},{"level":3,"title":"Ⅱ 使用","slug":"ii-使用-4","link":"#ii-使用-4","children":[]},{"level":3,"title":"③ ClassPath资源访问-ClassPathResource","slug":"_3-classpath资源访问-classpathresource","link":"#_3-classpath资源访问-classpathresource","children":[]},{"level":3,"title":"Ⅰ 什么时 ClassPath","slug":"i-什么时-classpath","link":"#i-什么时-classpath","children":[]},{"level":3,"title":"Ⅱ 由来","slug":"ii-由来","link":"#ii-由来","children":[]},{"level":3,"title":"Ⅲ 封装","slug":"iii-封装","link":"#iii-封装","children":[]}]}],"filePathRelative":"docs/Java/Hutool/2_Hutool_Core/5-Hutool_Core.md","git":{"createdTime":1734915055000,"updatedTime":1735284834000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{v as comp,m as data};
