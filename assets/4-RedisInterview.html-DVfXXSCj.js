import{_ as s,c as e,b as n,o as a}from"./app-DlQzn5rm.js";const l="/assets/image-20250624164231710-D3QB5tQ5.png",i="/assets/image-20250624164306032-TF9RNxbD.png",p="/assets/image-20250624164318234-DoHmC6lb.png",d="/assets/image-20250624164340252-D0FIbywy.png",o="/assets/image-20250624164425910-g6oQRlq5.png",c={};function r(g,t){return a(),e("div",null,t[0]||(t[0]=[n('<p><img src="https://bizhi1.com/wp-content/uploads/2024/11/classic-car-futuristic-cityscape-desktop-wallpaper.jpg" alt="经典汽车未来城市景观桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>1 RedisObject</p><p>2 SkipList</p><p>3 SortedSet</p></div><p>我们常用的Redis数据类型有5种，分别是：</p><ul><li>String</li><li>List</li><li>Set</li><li>SortedSet</li><li>Hash</li></ul><p>还有一些高级数据类型，比如Bitmap、HyperLogLog、GEO等，其底层都是基于上述5种基本数据类型。因此在Redis的源码中，其实只有5种数据类型。</p><h2 id="_1-redisobject" tabindex="-1"><a class="header-anchor" href="#_1-redisobject"><span>1 RedisObject</span></a></h2><p>不管是任何一种数据类型，最终都会封装为RedisObject格式，它是一种结构体，C语言中的一种结构，可以理解为Java中的类。</p><p>结构大概是这样的：</p><p><img src="'+l+'" alt="image-20250624164231710"></p><p>可以看到整个结构体中并不包含真实的数据，仅仅是对象头信息，内存占用的大小为4+4+24+32+64 = 128bit</p><p>也就是16字节，然后指针<code>ptr</code>指针指向的才是真实数据存储的内存地址。所以RedisObject的内存开销是很大的。</p><p>属性中的<code>encoding</code>就是当前对象底层采用的<strong>数据结构</strong>或<strong>编码方式</strong>，可选的有11种之多：</p><table><thead><tr><th style="text-align:left;"><strong>编号</strong></th><th style="text-align:left;"><strong>编码方式</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">0</td><td style="text-align:left;">OBJ_ENCODING_RAW</td><td style="text-align:left;">raw编码动态字符串</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:left;">OBJ_ENCODING_INT</td><td style="text-align:left;">long类型的整数的字符串</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">OBJ_ENCODING_HT</td><td style="text-align:left;">hash表（也叫dict）</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">OBJ_ENCODING_ZIPMAP</td><td style="text-align:left;">已废弃</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">OBJ_ENCODING_LINKEDLIST</td><td style="text-align:left;">双端链表</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">OBJ_ENCODING_ZIPLIST</td><td style="text-align:left;">压缩列表</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">OBJ_ENCODING_INTSET</td><td style="text-align:left;">整数集合</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">OBJ_ENCODING_SKIPLIST</td><td style="text-align:left;">跳表</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">OBJ_ENCODING_EMBSTR</td><td style="text-align:left;">embstr编码的动态字符串</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">OBJ_ENCODING_QUICKLIST</td><td style="text-align:left;">快速列表</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">OBJ_ENCODING_STREAM</td><td style="text-align:left;">Stream流</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">OBJ_ENCODING_LISTPACK</td><td style="text-align:left;">紧凑列表</td></tr></tbody></table><p>Redis中的5种不同的数据类型采用的底层数据结构和编码方式如下：</p><table><thead><tr><th style="text-align:left;"><strong>数据类型</strong></th><th style="text-align:left;"><strong>编码方式</strong></th></tr></thead><tbody><tr><td style="text-align:left;">STRING</td><td style="text-align:left;"><code>int</code>、<code>embstr</code>、<code>raw</code></td></tr><tr><td style="text-align:left;">LIST</td><td style="text-align:left;"><code>LinkedList和ZipList</code>(3.2以前)、<code>QuickList</code>（3.2以后）</td></tr><tr><td style="text-align:left;">SET</td><td style="text-align:left;"><code>intset</code>、<code>HT</code></td></tr><tr><td style="text-align:left;">ZSET</td><td style="text-align:left;"><code>ZipList</code>（7.0以前）、<code>Listpack</code>（7.0以后）、<code>HT</code>、<code>SkipList</code></td></tr><tr><td style="text-align:left;">HASH</td><td style="text-align:left;"><code>ZipList</code>（7.0以前）、<code>Listpack</code>（7.0以后）、<code>HT</code></td></tr></tbody></table><h2 id="_2-skiplist" tabindex="-1"><a class="header-anchor" href="#_2-skiplist"><span>2 SkipList</span></a></h2><p>SkipList（跳表）首先是链表，但与传统链表相比有几点差异：</p><ul><li>元素按照升序排列存储</li><li>节点可能包含多个指针，指针跨度不同。</li></ul><p>传统链表只有指向前后元素的指针，因此只能顺序依次访问。如果查找的元素在链表中间，查询的效率会比较低。而SkipList则不同，它内部包含跨度不同的多级指针，可以让我们跳跃查找链表中间的元素，效率非常高。</p><p>其结构如图：</p><p><img src="'+i+'" alt="image-20250624164306032"></p><p>我们可以看到1号元素就有指向3、5、10的多个指针，查询时就可以跳跃查找。例如我们要找大小为14的元素，查找的流程是这样的：</p><p><img src="'+p+`" alt="image-20250624164318234"></p><ul><li>首先找元素1节点最高级指针，也就是4级指针，起始元素大小为1，指针跨度为9，可以判断出目标元素大小为10。由于14比10大，肯定要从10这个元素向下接着找。</li><li>找到10这个元素，发现10这个元素的最高级指针跨度为5，判断出目标元素大小为15，大于14，需要判断下级指针</li><li>10这个元素的2级指针跨度为3，判断出目标元素为13，小于14，因此要基于元素13接着找</li><li>13这个元素最高级级指针跨度为2，判断出目标元素为15，比14大，需要判断下级指针。</li><li>13的下级指针跨度为1，因此目标元素是14，刚好于目标一致，找到。</li></ul><p>这种多级指针的查询方式就避免了传统链表的逐个遍历导致的查询效率下降问题。在对有序数据做随机查询和排序时效率非常高。</p><p>跳表的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 头尾节点指针</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 节点数量</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 最大的索引层级</span></span>
<span class="line">    <span class="token keyword">int</span> level<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到SkipList主要属性是header和tail，也就是头尾指针，因此它是支持双向遍历的。</p><p>跳表中节点的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span></span>
<span class="line">    sds ele<span class="token punctuation">;</span> <span class="token comment">// 节点存储的字符串</span></span>
<span class="line">    <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token comment">// 节点分数，排序、查找用</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span> <span class="token comment">// 前一个节点指针</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span> <span class="token comment">// 下一个节点指针</span></span>
<span class="line">        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> span<span class="token punctuation">;</span> <span class="token comment">// 索引跨度</span></span>
<span class="line">    <span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 多级索引数组</span></span>
<span class="line"><span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个节点中都包含ele和score两个属性，其中score是得分，也就是节点排序的依据。ele则是节点存储的字符串数据指针。</p><p>其内存结构如下：</p><p><img src="`+d+`" alt="image-20250624164340252"></p><h2 id="_3-sortedset" tabindex="-1"><a class="header-anchor" href="#_3-sortedset"><span>3 SortedSet</span></a></h2><p><strong>面试题</strong>：Redis的<code>SortedSet</code>底层的数据结构是怎样的？</p><p><strong>答</strong>：SortedSet是有序集合，底层的存储的每个数据都包含element和score两个值。score是得分，element则是字符串值。SortedSet会根据每个element的score值排序，形成有序集合。</p><p>它支持的操作很多，比如：</p><ul><li>根据element查询score值</li><li>按照score值升序或降序查询element</li></ul><p>要实现根据element查询对应的score值，就必须实现element与score之间的键值映射。SortedSet底层是基于<strong>HashTable</strong>来实现的。</p><p>要实现对score值排序，并且查询效率还高，就需要有一种高效的有序数据结构，SortedSet是基于<strong>跳表</strong>实现的。</p><p>加分项：因为SortedSet底层需要用到两种数据结构，对内存占用比较高。因此Redis底层会对SortedSet中的元素大小做判断。如果<strong>元素大小****小于128</strong>且<strong>每个元素都小于64字节</strong>，SortedSet底层会采用<strong>ZipList</strong>，也就是<strong>压缩列</strong>表来代替<strong>HashTable</strong>和<strong>SkipList</strong></p><p>不过，<code>ZipList</code>存在连锁更新问题，因此而在Redis7.0版本以后，<code>ZipList</code>又被替换为<strong>Listpack</strong>（紧凑列表）。</p><p>Redis源码中<code>zset</code>，也就是<code>SortedSet</code>的结构体如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zset</span> <span class="token punctuation">{</span></span>
<span class="line">    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span> <span class="token comment">// dict，底层就是HashTable</span></span>
<span class="line">    zskiplist <span class="token operator">*</span>zsl<span class="token punctuation">;</span> <span class="token comment">// 跳表</span></span>
<span class="line"><span class="token punctuation">}</span> zset<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其内存结构如图：</p><p><img src="`+o+'" alt="image-20250624164425910"></p>',46)]))}const m=s(c,[["render",r]]),k=JSON.parse('{"path":"/docs/Java/Heima/Microservices/Day10_RedisInterview/4-RedisInterview.html","title":"Redis数据结构","lang":"en-US","frontmatter":{"title":"Redis数据结构","date":"2025/03/06"},"headers":[{"level":2,"title":"1 RedisObject","slug":"_1-redisobject","link":"#_1-redisobject","children":[]},{"level":2,"title":"2 SkipList","slug":"_2-skiplist","link":"#_2-skiplist","children":[]},{"level":2,"title":"3 SortedSet","slug":"_3-sortedset","link":"#_3-sortedset","children":[]}],"filePathRelative":"docs/Java/Heima/Microservices/Day10_RedisInterview/4-RedisInterview.md","git":{"createdTime":1741251281000,"updatedTime":1750756522000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":2}]}}');export{m as comp,k as data};
