import{_ as l,c as p,b as a,a as e,d as t,e as n,r,o as d}from"./app-DlQzn5rm.js";const c="/assets/6NizZtSKQLWrjw2-ceIZ_3tT.png",o="/assets/QfoYW7w6LdKzJrc-0PHVjp1T.png",g="/assets/jJYo2bAwSIHkG4B-DmM3eFme.png",m="/assets/6rPsyHajdgDB2TO-_i9edhm6.png",h="/assets/D4uGkUECizseawt-D6JV-yd9.png",u="/assets/EzVI3GWPdQ9wc17-D63liB0w.png",_="/assets/CVxgLzDO8mjXdSK-DLA7Jx1v.png",b="/assets/ckTh61JGiPXD8lW-BnHsxpak.png",v="/assets/eBrqf6NHFyIpjOR-MRE5OLoN.png",f="/assets/WcbXGyrYmgVM7Ih-BDwd6vuw.png",x="/assets/jatAiNHho6FTzxs-DJNfLRjd.png",k="/assets/Sjn9kC586dvAghx-DoiWtdk4.png",G="/assets/pfDUIHwAQ1jyza7-DdOG0Pv-.png",y="/assets/wmqydKAvuelRkEf-B_GjeTDs.png",S="/assets/7C8hQ3PH5c4vEaD-CRvyp3BR.png",C="/assets/dHz2iXnJt49KwjM-BpZkeXyq.png",H="/assets/WSrhmtwcQyNJdDs-Bzj4yoRP.png",D="/assets/Rodj7rIZHEMU5SC-Vqy97IPS.png",B="/assets/FwjEBZl4SAruhxs-DDSlyAiZ.png",w="/assets/2zfiKg4WpwCq9YL-D7ApyOhL.png",j="/assets/KWEZ9AYD1NbcX7g-BZlXQdUQ.png",A="/assets/ad7zuHvK2McTQl5-CEVQD1pq.png",E="/assets/OHZko9jdDWvRMKi-Cot8wxK1.png",V="/assets/62JueaM9ByrmHdX-B2Htr-Zl.png",L="/assets/QBPNgHCUzGOiJuy-CcTJOCAR.png",M="/assets/b645MnGSFxRyhaQ-C4ZxjnGC.gif",q="/assets/4xCVHGPLgjXbB1F-DMt3kSDW.png",z="/assets/IqK6GEc92hYx7HF-DGCZKAdu.png",R="/assets/DnfmIo3KZlt5zJ4-CT_KvduP.png",Q="/assets/uJS8Gp3CazAKU7l-B62DkMwb.png",W="/assets/KNfMvCTkE3YQxdj-gCKqu1TZ.png",J="/assets/bvTfga13wtuSUhq-BgHiEPh9.png",Z="/assets/XIx7L3lTW9FcBtP-BFBNeevM.png",O="/assets/o2p7dO4F9A5VDjJ-DhSQ-Mzk.png",P="/assets/p2mvTbZuEqVkYB9-CQh7q_VI.png",I="/assets/nBw6OEL9liyMe7d-Dyq0OHwf.png",K="/assets/vMYXFVyWo6PNOzf-Bb_Pzx-P.png",F="/assets/5GQRnhD8XijVZuy-BMXV9eO1.png",N="/assets/CVdReJPu5YMTmHQ-TIktk4Pe.png",T="/assets/oU5ORWqvghNCcTi-DRyLzrDF.png",U="/assets/6jGfxUmrERZSV9h-CdQ0NUZ5.png",Y="/assets/AVwpC1ZLzmOlEUg-CSDUW0zb.png",X="/assets/PVOR9ZjmIqkr4cv-DixPdGY5.png",$="/assets/AR9NuTBG2UweEnb-NaqaduWr.png",ss="/assets/UcwRJu78Kmvod4k-BiMKJU4t.png",es="/assets/gcnCSJKtNqrokIQ-f1JpYOdQ.png",ts="/assets/mU3Y9JodyTpV7nB-DX87DQwr.png",as="/assets/S6OrkKeFsCymWcB-JpxaVtOw.png",is="/assets/iMQfWOwkSH8ujh2-BntyHCz3.png",ns="/assets/6WNlEc9FbaJmhkv-BewT2aC5.png",ls="/assets/OKwIG2BvZC7mVjl-CWjWSqYE.png",ps="/assets/HWlevFmCKdRju6V-DLvWLcBF.png",rs="/assets/gvmsB4Rn7xYfc9A-BD6KSJQn.png",ds="/assets/iP9EZnU81O3wGYB-CChVi51W.png",cs="/assets/gLQzrsRiN2Cj6Fe-B1lxZtlU.png",os="/assets/PfZBknlC8RjHvxV-BXnmv6V6.png",gs="/assets/27XoOIwArYdnhyE-Dd_OIJnP.png",ms="/assets/sOguJ7GYApZUiLS-Dv_sW7SO.png",hs="/assets/clQsuFdDfemyxzR-DmreNImU.png",us="/assets/ApuMYyt5S73LF6E-B6ur7_Hq.png",_s="/assets/QgZLxhAM5fzis6n-6uKgJd9V.png",bs="/assets/hBtO3EZJRnmWYeC-C0WetA7K.png",vs="/assets/nfe4SVwFj39JTuB-Bs4Mq8w8.png",fs="/assets/lqVRcoryfCZnMeg-C984Q2Qc.png",xs="/assets/V1s3vjWHUAiyIC2-a_FysRrz.png",ks="/assets/MIc5GEnqgrZsWBe-rbFQ6DI4.png",Gs="/assets/LZYvpoBcJR56VlA-6RB2hh3k.png",ys="/assets/URnavcD49XsEkwY-z5mDXzBM.png",Ss="/assets/yHmSVrhQN5eFZow-DD3dwVdj.png",Cs="/assets/r6yLWmFxQVogejR-bFST-gAW.png",Hs="/assets/p4qvjwdhcrSXM2R-CApmYBi7.png",Ds="/assets/fxEsGzic2mgAJRt-BrZ_hw2x.png",Bs="/assets/R9O3bTxLo7HfBw6-B-M1DILm.png",ws="/assets/TzkfoeEVc5wi67d-Lrw7EvUI.png",js="/assets/YzAaK6L4o8rx3Jw-DavCu1fE.png",As="/assets/UDezhHG5E7v93r1-DCugFYD1.png",Es="/assets/rG3BDcENxJMot4R-DzkWRRA_.png",Vs="/assets/J8hZK1oVE2Hi9Gm-KlfMBfb4.png",Ls="/assets/9kpVQfbAGz2gRL5-BpUiLQwb.png",Ms="/assets/nItWOHxSi9kleV5-1QldrepP.png",qs="/assets/dOGxz6gusfM4onA-KuQLczAM.png",zs="/assets/54QENAfDJj3ikSl-D0uzhk6x.png",Rs="/assets/385yrHgBX1uvPYR-CHSBTL7r.png",Qs="/assets/K4EfVpQ1BvhwSFL-DEHZh72c.png",Ws="/assets/ZYHrCAUJQvED93K-Upj0dEOf.png",Js="/assets/puY46lMsi2GkbKj-D_TLqYyO.png",Zs="/assets/fZvNMLo1p7CGWIJ-C1ho-WC-.png",Os="/assets/Zl6xeMd7qnV5UPW-COX-S8Sh.png",Ps="/assets/pbSW2LukQAz5Cqj-DnAtVzKX.png",Is="/assets/J1FOEVfW5bI6Tyl-fHqylLwn.png",Ks="/assets/g1bZS56xRVdQIsm-C00AwF-g.png",Fs="/assets/DEvC6qPBAMS32ra-DGG-Ac2n.png",Ns="/assets/Be8LsuUKFtbGf2j-9s2Pkc0F.png",Ts="/assets/shjpkZWQNRwH9Gg-Ca0aAr-J.png",Us="/assets/nla3Lbq2v5DWNcE-CqXi_UxV.png",Ys={},Xs={href:"http://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},$s={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},se={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://github.com/atguiguvueyue/git-demo/invitations",target:"_blank",rel:"noopener noreferrer"};function te(ae,s){const i=r("ExternalLinkIcon");return d(),p("div",null,[s[8]||(s[8]=a('<p><img src="https://bizhi1.com/wp-content/uploads/2024/09/spiderman-miles-morales-red-black-desktop-wallpaper-4k-small.jpg" alt="蜘蛛侠红黑桌面壁纸"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>0 内容介绍</p><p>1 Git概述</p><p>2 Git安装</p><p>3 Git常用命令</p><p>4 Git分支操作</p><p>5 Git团队协作机制</p><p>6 GitHub操作</p></div><h2 id="_0、内容介绍" tabindex="-1"><a class="header-anchor" href="#_0、内容介绍"><span>0、内容介绍</span></a></h2><h3 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h3><ul><li>Git 介绍：分布式版本控制工具 VS 集中式版本控制工具</li><li>Git 安装：基于官网发布的最新版本 2.31.1 安装讲解</li><li>Git 命令：基于开发案例详细讲解了<code>git</code>的常用命令</li><li>Git 分支：分支特性、分支创建、分支转换、分支合并、代码合并冲突解决</li><li>IDEA 集成 Git</li></ul><h3 id="github" tabindex="-1"><a class="header-anchor" href="#github"><span>GitHub</span></a></h3><ul><li>创建远程库</li><li>代码推送 Push</li><li>代码拉取 Pull</li><li>代码克隆 Clone</li><li>SSH 免密登录</li><li>IDEA 集成 GitHub</li></ul><h3 id="gitee-码云" tabindex="-1"><a class="header-anchor" href="#gitee-码云"><span>Gitee 码云</span></a></h3><ul><li>创建远程库</li><li>IDEA 集成 GitHub</li><li>码云连接 GitHub 进行代码的复制和迁移</li></ul><h3 id="gitlab" tabindex="-1"><a class="header-anchor" href="#gitlab"><span>GitLab</span></a></h3><ul><li>GitLab 服务器的搭建和部署</li><li>IDEA 集成 GitLab</li></ul><h2 id="_1、git-概述" tabindex="-1"><a class="header-anchor" href="#_1、git-概述"><span>1、Git 概述</span></a></h2>',12)),e("ul",null,[e("li",null,[s[1]||(s[1]=t("官网地址：")),e("a",Xs,[s[0]||(s[0]=t("http://git-scm.com/")),n(i)])]),s[2]||(s[2]=e("li",null,[e("code",null,"--everything is local"),t("：分布式特性")],-1))]),s[9]||(s[9]=a('<p>Git 是一个<strong>免费</strong>的、<strong>开源</strong>的 <mark>分布式版本控制系统</mark>，可以快速高效地处理从小型到大型的各种项目</p><p>Git 易于学习，占地面积小，<strong>性能极快</strong>。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性</p><p>其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具</p><h3 id="_1-1、何为版本控制" tabindex="-1"><a class="header-anchor" href="#_1-1、何为版本控制"><span>1.1、何为版本控制？</span></a></h3><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统</p><p>版本控制其实最重要的是可以记录文件修改<strong>历史记录</strong>，从而让用户能够查看历史版本，方便版本切换</p><p><img src="'+c+'" alt="image-20210916222911720"></p><h3 id="_1-2、为什么需要版本控制" tabindex="-1"><a class="header-anchor" href="#_1-2、为什么需要版本控制"><span>1.2、为什么需要版本控制？</span></a></h3><p>个人开发过渡到团队协作</p><p><img src="'+o+'" alt="image-20210916223038071"></p><h3 id="_1-3、版本控制工具" tabindex="-1"><a class="header-anchor" href="#_1-3、版本控制工具"><span>1.3、版本控制工具</span></a></h3><h4 id="集中式版本控制工具" tabindex="-1"><a class="header-anchor" href="#集中式版本控制工具"><span>集中式版本控制工具</span></a></h4><p>CVS、SVN（Subversion）、VSS.......</p><p>集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法</p><p>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易</p><p>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作</p><p><img src="'+g+'" alt="image-20210916223444358"></p><p><strong>总结</strong></p><ul><li><strong>优点</strong>：可以看到其他人正在做些什么；开发者权限控制</li><li><strong>缺点</strong>：中央服务器的单点故障，无法提交历史记录</li></ul><h4 id="分布式版本控制工具" tabindex="-1"><a class="header-anchor" href="#分布式版本控制工具"><span>分布式版本控制工具</span></a></h4><p>Git、Mercurial、Bazaar、Darcs.......</p><p>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份</p><p>分布式的版本控制系统出现之后，解决了集中式版本控制系统的缺陷：</p><ol><li>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li><li>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</li></ol><p><img src="'+m+'" alt="image-20210916224708069"></p><p><strong>优点</strong>：</p><ul><li>版本控制在本地，可以断网开发</li><li>保存完整项目，包含历史记录，更安全</li></ul><h3 id="_1-4、git-简史" tabindex="-1"><a class="header-anchor" href="#_1-4、git-简史"><span>1.4、Git 简史</span></a></h3><p><img src="'+h+'" alt="image-20210916225109044"></p><h3 id="_1-5、git-工作机制" tabindex="-1"><a class="header-anchor" href="#_1-5、git-工作机制"><span>1.5、Git 工作机制</span></a></h3><p><img src="'+u+'" alt="image-20210916225215882"></p><ul><li><strong>工作区</strong>写代码，通过<code>git add</code>命令添加至<strong>暂存区</strong></li><li><strong>暂存区</strong>临时存储代码，通过<code>git commit</code>提交至<strong>本地库</strong></li><li><strong>本地库</strong>记录历史记录，通过<code>git push</code>推送至<strong>远程库</strong></li></ul><h3 id="_1-6、git-和代码托管中心" tabindex="-1"><a class="header-anchor" href="#_1-6、git-和代码托管中心"><span>1.6、Git 和代码托管中心</span></a></h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为<strong>远程库</strong></p><ul><li>局域网 <ul><li>☑️ GitLab</li></ul></li><li>互联网 <ul><li>☑️ GitHub（外网）</li><li>☑️ Gitee码云（国内网站）</li></ul></li></ul><h2 id="_2、git-安装" tabindex="-1"><a class="header-anchor" href="#_2、git-安装"><span>2、Git 安装</span></a></h2><hr>',37)),e("p",null,[s[4]||(s[4]=t("官网地址：")),e("a",$s,[s[3]||(s[3]=t("https://git-scm.com/")),n(i)])]),s[10]||(s[10]=a('<p>查看 GNU 协议，可以直接点击下一步</p><p><img src="'+_+'" alt="image-20210916233221530"></p><p>选择 Git 安装位置，要求是非中文并且没有空格的目录，然后下一步</p><p><img src="'+b+'" alt="image-20210916233242454"></p><p>Git 选项配置，推荐默认设置，然后下一步</p><p><img src="'+v+'" alt="image-20210916233256977"></p><p>Git 安装目录名，不用修改，直接点击下一步</p><p><img src="'+f+'" alt="image-20210916233310729"></p><p>Git 的默认编辑器，建议使用默认的 Vim 编辑器，然后点击下一步</p><p><img src="'+x+'" alt="image-20210916233417531"></p><p>默认分支名设置，选择让 Git 决定，分支名默认为 master，下一步</p><p><img src="'+k+'" alt="image-20210916233436237"></p><p>修改 Git 的环境变量，选第一个，不修改环境变量，只在 Git Bash 里使用 Git</p><p><img src="'+G+'" alt="image-20210916233458071"></p><p>选择后台客户端连接协议，选默认值 OpenSSL，然后下一步</p><p><img src="'+y+'" alt="image-20210916233517370"></p><p>配置 Git 文件的行末换行符，Windows 使用 CRLF，Linux 使用 LF，选择第一个自动转换，然后继续下一步</p><p><img src="'+S+'" alt="image-20210916233531902"></p><p>选择 Git 终端类型，选择默认的 Git Bash 终端，然后继续下一步</p><p><img src="'+C+'" alt="image-20210916233717491"></p><p>选择 Git pull 合并的模式，选择默认，然后下一步</p><p><img src="'+H+'" alt="image-20210916233746777"></p><p>选择 Git 的凭据管理器，选择默认的跨平台的凭据管理器，然后下一步</p><p><img src="'+D+'" alt="image-20210916233757028"></p><p>其他配置，选择默认设置，然后下一步</p><p><img src="'+B+'" alt="image-20210916233804540"></p><p>实验室功能，技术还不成熟，有已知的 bug，不要勾选，然后点击右下角的 Install 按钮，开始安装 Git</p><p><img src="'+w+'" alt="image-20210916233812916"></p><p>点击 Finsh 按钮，Git 安装成功！</p><p><img src="'+j+'" alt="image-20210916233821255"></p><p>右键任意位置，在右键菜单里选择 Git Bash Here 即可打开 Git Bash 命令行终端</p><p><img src="'+A+'" alt="image-20210916233913106"></p><p>在 Git Bash 终端里输入 <code>git --version</code> 查看 git 版本，如图所示，说明 Git 安装成功</p><p><img src="'+E+`" alt="image-20210917000255009"></p><h2 id="_3、git-常用命令" tabindex="-1"><a class="header-anchor" href="#_3、git-常用命令"><span>3、Git 常用命令</span></a></h2><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git config user.name 用户名</code></td><td style="text-align:left;">设置用户签名</td></tr><tr><td style="text-align:left;"><code>git config user.email 邮箱</code></td><td style="text-align:left;">设置用户签名</td></tr><tr><td style="text-align:left;"><code>git init</code></td><td style="text-align:left;">初始化本地库</td></tr><tr><td style="text-align:left;"><code>git status</code></td><td style="text-align:left;">查看本地库状态</td></tr><tr><td style="text-align:left;"><code>git add 文件名</code></td><td style="text-align:left;">添加至暂存区</td></tr><tr><td style="text-align:left;"><code>git commit -m &quot;日志信息&quot; 文件名</code></td><td style="text-align:left;">提交至本地库</td></tr><tr><td style="text-align:left;"><code>git reflog</code></td><td style="text-align:left;">查看历史记录</td></tr><tr><td style="text-align:left;"><code>git reset --hard 版本号</code></td><td style="text-align:left;">版本穿梭</td></tr></tbody></table><h3 id="_3-1、设置用户签名" tabindex="-1"><a class="header-anchor" href="#_3-1、设置用户签名"><span>3.1、设置用户签名</span></a></h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name 用户名</span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email 邮箱</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p>全局范围的签名设置</p><p><img src="`+V+`" alt="image-20210917001235229"></p><p>说明：</p><p>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的</p><p><mark>Git 首次安装必须设置一下用户签名，否则无法提交代码</mark></p><p>‼️ 注意：这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系</p><h3 id="_3-2、初始化本地库" tabindex="-1"><a class="header-anchor" href="#_3-2、初始化本地库"><span>3.2、初始化本地库</span></a></h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+L+`" alt="image-20210917203400924"></p><h3 id="_3-3、查看本地库状态" tabindex="-1"><a class="header-anchor" href="#_3-3、查看本地库状态"><span>3.3、查看本地库状态</span></a></h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> status</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+M+'" alt="git status"></p><p>新增文件前</p><p><img src="'+q+'" alt="image-20210917204804510"></p><p>新增文件后</p><p><img src="'+z+`" alt="image-20210917204858689"></p><h3 id="_3-4、添加暂存区" tabindex="-1"><a class="header-anchor" href="#_3-4、添加暂存区"><span>3.4、添加暂存区</span></a></h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> 文件名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p>红色表示仍在工作区，修改尚未被追踪；绿色表示已添加至暂存区，修改被追踪</p><p><img src="`+R+`" alt="image-20210917205319556"></p><p>使用命令，删除暂存区该文件（只是删除暂存区，不影响工作区）</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> hello.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+Q+`" alt="image-20210917205546165"></p><h3 id="_3-5、提交至本地库" tabindex="-1"><a class="header-anchor" href="#_3-5、提交至本地库"><span>3.5、提交至本地库</span></a></h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># -m 表示添加一个版本日志信息，不写此参数也会打开日志信息的文件框。一般带参数</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;日志信息&quot;</span> 文件名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p>正常操作</p><p><img src="`+W+'" alt="image-20210917210542226"></p><p>无<code>-m</code>参数时</p><p><img src="'+J+'" alt="image-20210917210109185"></p><p>如果强制退出</p><p><img src="'+Z+'" alt="image-20210917210156460"></p><h3 id="_3-6、修改文件" tabindex="-1"><a class="header-anchor" href="#_3-6、修改文件"><span>3.6、修改文件</span></a></h3><p>案例实操</p><p><img src="'+O+`" alt="image-20210917211143162"></p><p>git 里是按照行维护文件的，所以修改内容其实就是之前的行删除，修改过后的行添加进来</p><p>因此在<code>commit</code>之后提示信息<code>1 insertion(+), 1 deletion(-)</code></p><h3 id="_3-7、历史版本" tabindex="-1"><a class="header-anchor" href="#_3-7、历史版本"><span>3.7、历史版本</span></a></h3><h4 id="查看历史版本" tabindex="-1"><a class="header-anchor" href="#查看历史版本"><span>查看历史版本</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看精简版本信息</span></span>
<span class="line"><span class="token function">git</span> reflog</span>
<span class="line"><span class="token comment"># 查看详细版本信息</span></span>
<span class="line"><span class="token function">git</span> log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+P+`" alt="image-20210917211945690"></p><h4 id="版本穿梭" tabindex="-1"><a class="header-anchor" href="#版本穿梭"><span>版本穿梭</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 版本号</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+I+'" alt="image-20210917212348218"></p><p>文件验证当前版本号</p><p><img src="'+K+'" alt="image-20210917212941200"></p><p>Git 切换版本，底层其实是移动的 HEAD 指针，具体原理如下图所示</p><p><img src="'+F+'" alt="image-20210917213424162"></p><p><img src="'+N+'" alt="image-20210917213247141"></p><p><img src="'+T+'" alt="image-20210917213333350"></p><h2 id="_4、git-分支操作" tabindex="-1"><a class="header-anchor" href="#_4、git-分支操作"><span>4、Git 分支操作</span></a></h2><p><img src="'+U+'" alt="image-20210917213616760"></p><h3 id="_4-1、什么是分支" tabindex="-1"><a class="header-anchor" href="#_4-1、什么是分支"><span>4.1、什么是分支</span></a></h3><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本（分支底层其实也是指针的引用）</p><p><img src="'+Y+`" alt="image-20210917213935209"></p><h3 id="_4-2、分支的好处" tabindex="-1"><a class="header-anchor" href="#_4-2、分支的好处"><span>4.2、分支的好处</span></a></h3><p>同时并行推进多个功能开发，<strong>提高开发效率</strong></p><p>各个分支在开发过程中，如果某一个分支开发失败，<strong>不会对其他分支有任何影响</strong>。失败的分支删除重新开始即可</p><h3 id="_4-3、分支的操作" tabindex="-1"><a class="header-anchor" href="#_4-3、分支的操作"><span>4.3、分支的操作</span></a></h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git branch 分支名</code></td><td style="text-align:left;">创建分支</td></tr><tr><td style="text-align:left;"><code>git branch -v</code></td><td style="text-align:left;">查看分支</td></tr><tr><td style="text-align:left;"><code>git checkout</code> 分支名</td><td style="text-align:left;">切换分支</td></tr><tr><td style="text-align:left;"><code>git merge</code> 分支名</td><td style="text-align:left;">把指定的分支合并到当前分支</td></tr></tbody></table><h4 id="创建分支、查看分支" tabindex="-1"><a class="header-anchor" href="#创建分支、查看分支"><span>创建分支、查看分支</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch 分支名</span>
<span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-v</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+X+`" alt="image-20210917214653546"></p><h4 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支"><span>切换分支</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+$+`" alt="image-20210917215246415"></p><h4 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支"><span>合并分支</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> merge 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p><strong>正常合并</strong></p><p><img src="`+ss+'" alt="image-20210917215908842"></p><p><strong>冲突合并</strong></p><p>冲突产生的原因：合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容</p><p><img src="'+es+'" alt="image-20210917220923478"></p><p>解决冲突</p><p><img src="'+ts+'" alt="image-20210917221121233"></p><p><img src="'+as+'" alt="image-20210917221239011"></p><p><img src="'+is+'" alt="image-20210917222018377"></p><h4 id="创建分支和切换分支图解" tabindex="-1"><a class="header-anchor" href="#创建分支和切换分支图解"><span>创建分支和切换分支图解</span></a></h4><p><img src="'+ns+'" alt="image-20210917221451896"></p><p><img src="'+ls+'" alt="image-20210917221515718"></p><p>master、hot-fix 其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD 决定的。所以创建分支的本质就是多创建一个指针</p><ul><li>HEAD 如果指向 master，那么我们现在就在 master 分支上</li><li>HEAD 如果指向 hotfix，那么我们现在就在 hotfix 分支上</li></ul><p>所以切换分支的本质就是移动HEAD指针</p><h2 id="_5、git-团队协作机制" tabindex="-1"><a class="header-anchor" href="#_5、git-团队协作机制"><span>5、Git 团队协作机制</span></a></h2><h3 id="_5-1、团队内协作" tabindex="-1"><a class="header-anchor" href="#_5-1、团队内协作"><span>5.1、团队内协作</span></a></h3><p><img src="'+ps+'" alt="image-20210917222216595"></p><h3 id="_5-2、跨团队协作" tabindex="-1"><a class="header-anchor" href="#_5-2、跨团队协作"><span>5.2、跨团队协作</span></a></h3><p><img src="'+rs+'" alt="image-20210917222441407"></p><h2 id="_6、github-操作" tabindex="-1"><a class="header-anchor" href="#_6、github-操作"><span>6、GitHub 操作</span></a></h2>',146)),e("ul",null,[e("li",null,[s[6]||(s[6]=t("GitHub 官网：")),e("a",se,[s[5]||(s[5]=t("https://github.com/")),n(i)])])]),s[11]||(s[11]=a('<p>PS：全球最大同性交友网站，技术宅男的天堂，新世界的大门，你还在等什么？</p><table><thead><tr><th style="text-align:left;">账号</th><th style="text-align:left;">姓名</th><th style="text-align:left;">验证邮箱</th></tr></thead><tbody><tr><td style="text-align:left;"><code>atguiguyuebuqun</code></td><td style="text-align:left;"><code>岳不群</code></td><td style="text-align:left;"><code>atguiguyuebuqun@aliyun.com</code></td></tr><tr><td style="text-align:left;"><code>atguigulinghuchong</code></td><td style="text-align:left;"><code>令狐冲</code></td><td style="text-align:left;"><code>atguigulinghuchong@163.com</code></td></tr><tr><td style="text-align:left;"><code>atguigudongfang1</code></td><td style="text-align:left;"><code>东方不败</code></td><td style="text-align:left;"><code>atguigudongfang1@163.com</code></td></tr></tbody></table><h3 id="_6-1、创建远程仓库" tabindex="-1"><a class="header-anchor" href="#_6-1、创建远程仓库"><span>6.1、创建远程仓库</span></a></h3><p><img src="'+ds+'" alt="image-20210917223235275"></p><p><img src="'+cs+`" alt=""></p><h3 id="_6-2、远程仓库操作" tabindex="-1"><a class="header-anchor" href="#_6-2、远程仓库操作"><span>6.2、远程仓库操作</span></a></h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git remote add 别名 远程地址</code></td><td style="text-align:left;">起别名</td></tr><tr><td style="text-align:left;"><code>git remote -v</code></td><td style="text-align:left;">查看当前所有远程别名</td></tr><tr><td style="text-align:left;"><code>git clone 远程地址</code></td><td style="text-align:left;">将远程仓库的内容克隆到本地</td></tr><tr><td style="text-align:left;"><code>git pull 远程地址别名 远程分支名</code></td><td style="text-align:left;">将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr><tr><td style="text-align:left;"><code>git push 别名 分支</code></td><td style="text-align:left;">推送本地分支上的内容到远程仓库</td></tr></tbody></table><h4 id="创建远程仓库别名" tabindex="-1"><a class="header-anchor" href="#创建远程仓库别名"><span>创建远程仓库别名</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote <span class="token parameter variable">-v</span></span>
<span class="line"><span class="token function">git</span> remote <span class="token function">add</span> 别名 远程地址</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+os+`" alt="image-20210917225451875"></p><h4 id="推送本地分支到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送本地分支到远程仓库"><span>推送本地分支到远程仓库</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push 别名 分支</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p>由于 GitHub 外网的特殊原因，会有网络延迟，等待时间可能较长，属于正常现象。可能要多尝试几次，需要点耐心。当然你有工具除外</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push git-demo master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果本地还没有过 SSH 免密登录操作（下面内容会详细介绍），则在执行命令后会弹出一个<code>Connect to GitHub</code>的提示框</p><p><img src="`+gs+'" alt="image-20210918224448045"></p><p>点击<code>Sign in with your browser</code>后会自动打开系统默认浏览器</p><p>如果你的 GitHub 尚未进行过任何 Git 相关授权，则会给出确认授权提示信息，点击<code>Authorize GitCredentialManager</code>进行授权即可</p><p><img src="'+ms+'" alt="image-20210918231341801"></p><p>接着会提示授权成功（如果在此之前已经对<code>Git Credential Manager</code>进行过授权，则直接提示此信息）</p><p><img src="'+hs+'" alt="image-20210918224627107"></p><p>成功推送本地分支至远程库</p><p><img src="'+us+'" alt="image-20210918224403240"></p><p><strong>凭据管理器</strong></p><p>在上述操作过程中，点击<code>Authorize GitCredentialManager</code>进行授权后，在 GitHub 设置页面的<code>Application</code>选项—<code>Authorized OAuth Apps</code>中可以查看到 <code>Git Credential Manager</code>的授权信息</p><p><img src="'+_s+'" alt="image-20210918231735259"></p><p>在上述过程前，本地凭据管理器中还没有任何身份凭证信息（没有 Git 和 GitHub 相关的凭据信息）</p><p><img src="'+bs+'" alt="image-20210918230512316"></p><p>执行过上述命令等操作后，本地凭据管理器中会出现 Git 相关凭据信息</p><p><img src="'+vs+`" alt="image-20210918233953904"></p><h4 id="拉取远程仓库到本地" tabindex="-1"><a class="header-anchor" href="#拉取远程仓库到本地"><span>拉取远程仓库到本地</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> pull 别名 分支</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p><img src="`+fs+`" alt="image-20210918234422490"></p><h4 id="克隆远程仓库到本地" tabindex="-1"><a class="header-anchor" href="#克隆远程仓库到本地"><span>克隆远程仓库到本地</span></a></h4><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone 远程库地址</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）案例实操</p><p>首先获取需要克隆的远程库地址</p><p><img src="`+xs+'" alt="image-20210918235159899"></p><p>由于<code>workspace</code>下面已经存在一个同名的仓库地址，所以直接在<code>workspace</code>中键入命令会有错误提示信息</p><p><img src="'+ks+'" alt="image-20210918235519853"></p><p>这是因为，<code>clone</code>命令默认帮我们创建的一个远程仓库名称同名的文件夹，所以这里我删除了<code>git-demo</code>目录</p><p><img src="'+Gs+'" alt="image-20210918235857263"></p><p>小结：<code>clone</code> 会做如下操作</p><ul><li>1、拉取代码</li><li>2、初始化本地仓库</li><li>3、创建别名（默认<code>origin</code>）</li></ul><h3 id="_6-3、团队内协作" tabindex="-1"><a class="header-anchor" href="#_6-3、团队内协作"><span>6.3、团队内协作</span></a></h3><p>如果项目之外成员想要将自己编写的代码推送至远程库，则会提示<code>unable to access...403</code></p><p><img src="'+ys+'" alt="image-20210919002334885"></p><p>要想获取推送的权限，则需要该项目管理员对该成员进行邀请，将其添加至该项目中</p><p>1）邀请合作者，输入用户名，复制地址并发送给合作者</p><p><img src="'+Ss+'" alt="image-20210919001646877"></p><p><img src="'+Cs+'" alt="image-20210919001732944"></p><p><img src="'+Hs+'" alt="image-20210919001847491"></p><p>2）合作者访问该链接，点击接受邀请，可以在其账号上看到该远程仓库</p>',60)),e("ul",null,[e("li",null,[e("a",ee,[s[7]||(s[7]=t("https://github.com/atguiguvueyue/git-demo/invitations")),n(i)])])]),s[12]||(s[12]=a('<p><img src="'+Ds+'" alt="image-20210919002022667"></p><p><img src="'+Bs+'" alt="image-20210919002239871"></p><p>接下来，就可以通过<code>git</code>命令对远程库进行克隆、拉取、提交、推送等操作了</p><h3 id="_6-4、跨团队协作" tabindex="-1"><a class="header-anchor" href="#_6-4、跨团队协作"><span>6.4、跨团队协作</span></a></h3><p>1）合作者视角</p><p>点击<code>Fork</code>，将其他项目“叉”到自己账号上</p><p><img src="'+ws+'" alt="image-20210919003412417"></p><p>自己账号上就有了该项目，可以清楚地看到该项目<code>forked from xxx</code>，即可对代码进行修改</p><p><img src="'+js+'" alt="image-20210919003500235"></p><p>修改代码后，点击<code>Pull requests</code>—<code>New pull request</code>，发起拉取请求</p><p><img src="'+As+'" alt="image-20210919004019396"></p><p>查看修改内容，点击<code>Create pull request</code>，创建拉取请求</p><p><img src="'+Es+'" alt="image-20210919004334829"></p><p>填写请求信息及评论内容，点击<code>Create pull request</code></p><p><img src="'+Vs+'" alt="image-20210919004505828"></p><p>创建完成</p><p><img src="'+Ls+'" alt="image-20210919004830149"></p><p>2）项目管理员视角</p><p>可以在该项目中查看到<code>Pull requests</code>有一条新的记录，可以点击下方提交信息进行查看</p><p><img src="'+Ms+'" alt="image-20210919005217558"></p><p>想要看到合作者修改的具体内容，可以点击提交记录进行查看</p><p><img src="'+qs+'" alt="image-20210919005303909"></p><p><img src="'+zs+'" alt="image-20210919005442954"></p><p>同时，可以对拉取请求进行审查和评论</p><p><img src="'+Rs+'" alt="image-20210919005558618"></p><p>最后，审查通过就可以对拉取请求进行合并了，点击<code>Merge pull request</code>进行合并</p><p><img src="'+Qs+'" alt="image-20210919005831430"></p><p>点击<code>Confirm merge</code>，确认合并</p><p><img src="'+Ws+`" alt="image-20210919005854745"></p><p>合并成功之后，项目成员就可以看到修改的相关内容了</p><h3 id="_6-5、ssh-免密登录" tabindex="-1"><a class="header-anchor" href="#_6-5、ssh-免密登录"><span>6.5、SSH 免密登录</span></a></h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># -t指定加密算法，-C添加注释</span></span>
<span class="line">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> 描述</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p><strong>本地生成 SSH 密钥</strong></p><p>键入命令，连敲三次回车即可</p><p><img src="`+Js+'" alt="image-20210919011352497"></p><p>进入<code>~/.ssh</code>目录，复制公钥信息</p><p><img src="'+Zs+'" alt="image-20210919011953686"></p><p><strong>GitHub 上添加公钥</strong></p><p>未添加任何公钥之前，<code>Code</code>—<code>SSH</code>会有警告提示信息，表示目前 SSH 方式是没有权限的</p><p><img src="'+Os+'" alt="image-20210919014241528"></p><p>在 GitHub 的<code>settings</code>—<code>SSH and GPG keys</code>中，点击<code>New SSH key</code>添加一个公钥</p><p><img src="'+Ps+'" alt="image-20210919012856831"></p><p>将<code>id_rsa.pub</code>即公钥信息粘贴至<code>Key</code>中，<code>Title</code>随意，点击<code>Add SSH key</code>进行添加</p><p><img src="'+Is+'" alt="image-20210919013103108"></p><p>出现下列信息，说明添加成功</p><p><img src="'+Ks+'" alt="image-20210919013731928"></p><p><strong>验证 SSH免密登录 是否可用</strong></p><p>进入<code>git-demo</code>项目，点开<code>Code</code>—<code>SSH</code>，发现已经没有警告提示信息了，表示可用</p><p><img src="'+Fs+'" alt="image-20210919014010529"></p><p>复制 SSH 协议地址，使用<code>clone</code>命令克隆到本地，键入<code>yes</code>即可</p><p><img src="'+Ns+'" alt="image-20210919015207022"></p><p>接下来就是修改内容、添加暂存区、提交本地库、推送远程库的操作了</p><p>这时候我们发现已经不再弹出登录授权的提示信息，就可以推送过去了</p><p><img src="'+Ts+'" alt="image-20210919015907992"></p><p>查看远程库历史版本信息，确认推送成功</p><p><img src="'+Us+'" alt="image-20210919020511037"></p><p>至此，SSH 免密登录配置成功！</p>',59))])}const ne=l(Ys,[["render",te]]),le=JSON.parse('{"path":"/docs/Middleware/Git/Git_Atguigu/1_Git_Entry/2-Git_Entry.html","title":"初识Git(一)","lang":"en-US","frontmatter":{"title":"初识Git(一)","date":"2025/06/25"},"headers":[{"level":2,"title":"0、内容介绍","slug":"_0、内容介绍","link":"#_0、内容介绍","children":[{"level":3,"title":"Git","slug":"git","link":"#git","children":[]},{"level":3,"title":"GitHub","slug":"github","link":"#github","children":[]},{"level":3,"title":"Gitee 码云","slug":"gitee-码云","link":"#gitee-码云","children":[]},{"level":3,"title":"GitLab","slug":"gitlab","link":"#gitlab","children":[]}]},{"level":2,"title":"1、Git 概述","slug":"_1、git-概述","link":"#_1、git-概述","children":[{"level":3,"title":"1.1、何为版本控制？","slug":"_1-1、何为版本控制","link":"#_1-1、何为版本控制","children":[]},{"level":3,"title":"1.2、为什么需要版本控制？","slug":"_1-2、为什么需要版本控制","link":"#_1-2、为什么需要版本控制","children":[]},{"level":3,"title":"1.3、版本控制工具","slug":"_1-3、版本控制工具","link":"#_1-3、版本控制工具","children":[]},{"level":3,"title":"1.4、Git 简史","slug":"_1-4、git-简史","link":"#_1-4、git-简史","children":[]},{"level":3,"title":"1.5、Git 工作机制","slug":"_1-5、git-工作机制","link":"#_1-5、git-工作机制","children":[]},{"level":3,"title":"1.6、Git 和代码托管中心","slug":"_1-6、git-和代码托管中心","link":"#_1-6、git-和代码托管中心","children":[]}]},{"level":2,"title":"2、Git 安装","slug":"_2、git-安装","link":"#_2、git-安装","children":[]},{"level":2,"title":"3、Git 常用命令","slug":"_3、git-常用命令","link":"#_3、git-常用命令","children":[{"level":3,"title":"3.1、设置用户签名","slug":"_3-1、设置用户签名","link":"#_3-1、设置用户签名","children":[]},{"level":3,"title":"3.2、初始化本地库","slug":"_3-2、初始化本地库","link":"#_3-2、初始化本地库","children":[]},{"level":3,"title":"3.3、查看本地库状态","slug":"_3-3、查看本地库状态","link":"#_3-3、查看本地库状态","children":[]},{"level":3,"title":"3.4、添加暂存区","slug":"_3-4、添加暂存区","link":"#_3-4、添加暂存区","children":[]},{"level":3,"title":"3.5、提交至本地库","slug":"_3-5、提交至本地库","link":"#_3-5、提交至本地库","children":[]},{"level":3,"title":"3.6、修改文件","slug":"_3-6、修改文件","link":"#_3-6、修改文件","children":[]},{"level":3,"title":"3.7、历史版本","slug":"_3-7、历史版本","link":"#_3-7、历史版本","children":[]}]},{"level":2,"title":"4、Git 分支操作","slug":"_4、git-分支操作","link":"#_4、git-分支操作","children":[{"level":3,"title":"4.1、什么是分支","slug":"_4-1、什么是分支","link":"#_4-1、什么是分支","children":[]},{"level":3,"title":"4.2、分支的好处","slug":"_4-2、分支的好处","link":"#_4-2、分支的好处","children":[]},{"level":3,"title":"4.3、分支的操作","slug":"_4-3、分支的操作","link":"#_4-3、分支的操作","children":[]}]},{"level":2,"title":"5、Git 团队协作机制","slug":"_5、git-团队协作机制","link":"#_5、git-团队协作机制","children":[{"level":3,"title":"5.1、团队内协作","slug":"_5-1、团队内协作","link":"#_5-1、团队内协作","children":[]},{"level":3,"title":"5.2、跨团队协作","slug":"_5-2、跨团队协作","link":"#_5-2、跨团队协作","children":[]}]},{"level":2,"title":"6、GitHub 操作","slug":"_6、github-操作","link":"#_6、github-操作","children":[{"level":3,"title":"6.1、创建远程仓库","slug":"_6-1、创建远程仓库","link":"#_6-1、创建远程仓库","children":[]},{"level":3,"title":"6.2、远程仓库操作","slug":"_6-2、远程仓库操作","link":"#_6-2、远程仓库操作","children":[]},{"level":3,"title":"6.3、团队内协作","slug":"_6-3、团队内协作","link":"#_6-3、团队内协作","children":[]},{"level":3,"title":"6.4、跨团队协作","slug":"_6-4、跨团队协作","link":"#_6-4、跨团队协作","children":[]},{"level":3,"title":"6.5、SSH 免密登录","slug":"_6-5、ssh-免密登录","link":"#_6-5、ssh-免密登录","children":[]}]}],"filePathRelative":"docs/Middleware/Git/Git_Atguigu/1_Git_Entry/2-Git_Entry.md","git":{"createdTime":1750834125000,"updatedTime":1750834125000,"contributors":[{"name":"lixuan","email":"2789968443@qq.com","commits":1}]}}');export{ne as comp,le as data};
